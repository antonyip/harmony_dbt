{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.4", "generated_at": "2022-05-17T02:31:11.179105Z", "invocation_id": "4a3ccdb5-356c-4653-95c7-35ef3b4de317", "env": {}, "project_id": "beb35b7502fa7bb8f1e3ee6da0945d34", "user_id": "ae8c306c-329d-4e70-837c-2ce0da7e4f48", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.harmony.metric_gas_used_count": {"raw_sql": "{{ \n    config(\n        materialized='table',\n        tags=['metrics'],\n        cluster_by=['metric_date']\n    )\n}}\n\nwith\n\ndaily as (\n\n    select \n        date_trunc('day', block_timestamp) as metric_date,\n        'daily' as metric_period,\n        sum(gas_used) as gas_total\n    from {{ ref(\"blocks\") }}\n    group by 1, 2\n\n),\n\nhourly as (\n\n    select \n        date_trunc('hour', block_timestamp) as metric_date,\n        'hourly' as metric_period,\n        sum(gas_used) as gas_total\n    from {{ ref(\"blocks\") }}\n    group by 1, 2\n\n),\n\nminute as (\n\n    select \n        date_trunc('minute', block_timestamp) as metric_date,\n        'minute' as metric_period,\n        sum(gas_used) as gas_total\n    from {{ ref(\"blocks\") }}\n    group by 1, 2\n\n),\n\nfinal as (\n    select * from daily\n    union all\n    select * from hourly\n    union all\n    select * from minute\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.blocks", "model.harmony.blocks", "model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["metrics"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["metric_date"], "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "metrics", "metric_gas_used_count"], "unique_id": "model.harmony.metric_gas_used_count", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "metrics/metric_gas_used_count.sql", "original_file_path": "models/metrics/metric_gas_used_count.sql", "name": "metric_gas_used_count", "alias": "metric_gas_used_count", "checksum": {"name": "sha256", "checksum": "1ebe038025f2a7568ba461aacf039314c5b6469aa4ad79cc3f4bd4e8fd1322b6"}, "tags": ["metrics"], "refs": [["blocks"], ["blocks"], ["blocks"]], "sources": [], "description": "The total gas used within a given period", "columns": {"metric_date": {"name": "metric_date", "description": "The date the metric occurred", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_period": {"name": "metric_period", "description": "i.e. Hourly, Daily, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_total": {"name": "gas_total", "description": "The amount of gas used in that period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/metrics/metric_gas_used_count.yml", "compiled_path": "target/compiled/harmony/models/metrics/metric_gas_used_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "table", "tags": ["metrics"], "cluster_by": ["metric_date"]}, "created_at": 1652754672.28292, "compiled_sql": "\n\nwith\n\ndaily as (\n\n    select \n        date_trunc('day', block_timestamp) as metric_date,\n        'daily' as metric_period,\n        sum(gas_used) as gas_total\n    from HARMONY.DEV.blocks\n    group by 1, 2\n\n),\n\nhourly as (\n\n    select \n        date_trunc('hour', block_timestamp) as metric_date,\n        'hourly' as metric_period,\n        sum(gas_used) as gas_total\n    from HARMONY.DEV.blocks\n    group by 1, 2\n\n),\n\nminute as (\n\n    select \n        date_trunc('minute', block_timestamp) as metric_date,\n        'minute' as metric_period,\n        sum(gas_used) as gas_total\n    from HARMONY.DEV.blocks\n    group by 1, 2\n\n),\n\nfinal as (\n    select * from daily\n    union all\n    select * from hourly\n    union all\n    select * from minute\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.metric_gas_used_count"}, "model.harmony.metric_transactions_count": {"raw_sql": "{{ \n    config(\n        materialized='table',\n        tags=['metrics'],\n        cluster_by=['metric_date']\n    )\n}}\n\nwith\n\ndaily as (\n    select \n        date_trunc('day', block_timestamp) as metric_date,\n        'daily' as metric_period,\n        count(1) as txs_count\n    from {{ ref(\"txs\") }}\n    group by 1, 2\n),\n\nhourly as (\n    select \n        date_trunc('hour', block_timestamp) as metric_date,\n        'hourly' as metric_period,\n        count(1) as txs_count\n    from {{ ref(\"txs\") }}\n    group by 1, 2\n),\n\nminute as (\n    select \n        date_trunc('minute', block_timestamp) as metric_date,\n        'minute' as metric_period,\n        count(1) as txs_count\n    from {{ ref(\"txs\") }}\n    group by 1, 2\n),\n\nfinal as (\n    select * from daily\n    union all\n    select * from hourly\n    union all\n    select * from minute\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.txs", "model.harmony.txs", "model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["metrics"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["metric_date"], "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "metrics", "metric_transactions_count"], "unique_id": "model.harmony.metric_transactions_count", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "metrics/metric_transactions_count.sql", "original_file_path": "models/metrics/metric_transactions_count.sql", "name": "metric_transactions_count", "alias": "metric_transactions_count", "checksum": {"name": "sha256", "checksum": "048b1fc26460b84ac1935473acd69de26aec6e0ce4d55b39ca213575c2076cbb"}, "tags": ["metrics"], "refs": [["txs"], ["txs"], ["txs"]], "sources": [], "description": "The number of transactions within a given period", "columns": {"metric_date": {"name": "metric_date", "description": "The date the metric occurred", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_period": {"name": "metric_period", "description": "i.e. Hourly, Daily, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "txs_count": {"name": "txs_count", "description": "The number of transactions active in that period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/metrics/metric_transactions_count.yml", "compiled_path": "target/compiled/harmony/models/metrics/metric_transactions_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "table", "tags": ["metrics"], "cluster_by": ["metric_date"]}, "created_at": 1652754672.290824, "compiled_sql": "\n\nwith\n\ndaily as (\n    select \n        date_trunc('day', block_timestamp) as metric_date,\n        'daily' as metric_period,\n        count(1) as txs_count\n    from HARMONY.DEV.txs\n    group by 1, 2\n),\n\nhourly as (\n    select \n        date_trunc('hour', block_timestamp) as metric_date,\n        'hourly' as metric_period,\n        count(1) as txs_count\n    from HARMONY.DEV.txs\n    group by 1, 2\n),\n\nminute as (\n    select \n        date_trunc('minute', block_timestamp) as metric_date,\n        'minute' as metric_period,\n        count(1) as txs_count\n    from HARMONY.DEV.txs\n    group by 1, 2\n),\n\nfinal as (\n    select * from daily\n    union all\n    select * from hourly\n    union all\n    select * from minute\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.metric_transactions_count"}, "model.harmony.metric_miner_count": {"raw_sql": "{{ \n    config(\n        materialized='table',\n        tags=['metrics'],\n        cluster_by=['metric_date']\n    )\n}}\n\nwith\n\ndaily as (\n    select \n        date_trunc('day', block_timestamp) as metric_date,\n        'daily' as metric_period,\n        count(distinct miner) as miner_count\n    from {{ ref(\"blocks\") }}\n    group by 1, 2\n),\n\nhourly as (\n    select \n        date_trunc('hour', block_timestamp) as metric_date,\n        'hourly' as metric_period,\n        count(distinct miner) as miner_count\n    from {{ ref(\"blocks\") }}\n    group by 1, 2\n),\n\nminute as (\n    select \n        date_trunc('minute', block_timestamp) as metric_date,\n        'minute' as metric_period,\n        count(distinct miner) as miner_count\n    from {{ ref(\"blocks\") }}\n    group by 1, 2\n),\n\nfinal as (\n    select * from daily\n    union all\n    select * from hourly\n    union all\n    select * from minute\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.blocks", "model.harmony.blocks", "model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["metrics"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["metric_date"], "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "metrics", "metric_miner_count"], "unique_id": "model.harmony.metric_miner_count", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "metrics/metric_miner_count.sql", "original_file_path": "models/metrics/metric_miner_count.sql", "name": "metric_miner_count", "alias": "metric_miner_count", "checksum": {"name": "sha256", "checksum": "bb48c02d241dba967b80356d6a6a28deedb8d3c15ce956d5222c2229232968c3"}, "tags": ["metrics"], "refs": [["blocks"], ["blocks"], ["blocks"]], "sources": [], "description": "The distinct number of miners within a given period", "columns": {"metric_date": {"name": "metric_date", "description": "The date the metric occurred", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_period": {"name": "metric_period", "description": "i.e. Hourly, Daily, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "miner_count": {"name": "miner_count", "description": "The distinct count of miners active in that period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/metrics/metric_miner_count.yml", "compiled_path": "target/compiled/harmony/models/metrics/metric_miner_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "table", "tags": ["metrics"], "cluster_by": ["metric_date"]}, "created_at": 1652754672.294026, "compiled_sql": "\n\nwith\n\ndaily as (\n    select \n        date_trunc('day', block_timestamp) as metric_date,\n        'daily' as metric_period,\n        count(distinct miner) as miner_count\n    from HARMONY.DEV.blocks\n    group by 1, 2\n),\n\nhourly as (\n    select \n        date_trunc('hour', block_timestamp) as metric_date,\n        'hourly' as metric_period,\n        count(distinct miner) as miner_count\n    from HARMONY.DEV.blocks\n    group by 1, 2\n),\n\nminute as (\n    select \n        date_trunc('minute', block_timestamp) as metric_date,\n        'minute' as metric_period,\n        count(distinct miner) as miner_count\n    from HARMONY.DEV.blocks\n    group by 1, 2\n),\n\nfinal as (\n    select * from daily\n    union all\n    select * from hourly\n    union all\n    select * from minute\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.metric_miner_count"}, "model.harmony.metric_unique_users_count": {"raw_sql": "{{ \n    config(\n        materialized='table',\n        tags=['metrics'],\n        cluster_by=['metric_date']\n    )\n}}\n\nwith\n\nmin_address as (\n\n    select \n        from_address,\n        min(block_timestamp) as min_timestamp\n    from {{ ref(\"txs\") }}\n    group by 1\n\n),\n\ndaily as (\n\n    select\n        date_trunc('day', min_timestamp) as metric_date,\n        'daily' as metric_period,\n        count(from_address) as unique_users_count,\n        sum(unique_users_count) over (partition by metric_period order by metric_date) as unique_users_cumulative\n    from min_address\n    group by 1, 2\n\n),\n\nhourly as (\n\n    select\n        date_trunc('hour', min_timestamp) as metric_date,\n        'hourly' as metric_period,\n        count(from_address) as unique_users_count,\n        sum(unique_users_count) over (partition by metric_period order by metric_date) as unique_users_cumulative\n    from min_address\n    group by 1, 2\n\n),\n\nminute as (\n\n    select\n        date_trunc('minute', min_timestamp) as metric_date,\n        'minute' as metric_period,\n        count(from_address) as unique_users_count,\n        sum(unique_users_count) over (partition by metric_period order by metric_date) as unique_users_cumulative\n    from min_address\n    group by 1, 2\n\n),\n\nfinal as (\n    select * from daily\n    union all\n    select * from hourly\n    union all\n    select * from minute\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["metrics"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["metric_date"], "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "metrics", "metric_unique_users_count"], "unique_id": "model.harmony.metric_unique_users_count", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "metrics/metric_unique_users_count.sql", "original_file_path": "models/metrics/metric_unique_users_count.sql", "name": "metric_unique_users_count", "alias": "metric_unique_users_count", "checksum": {"name": "sha256", "checksum": "25e9c951039b19edd17f4135315d9cbce81ef127e2e7ba153eb8cd37d0a4190c"}, "tags": ["metrics"], "refs": [["txs"]], "sources": [], "description": "The distinct number of unique users within a given period", "columns": {"metric_date": {"name": "metric_date", "description": "The date the metric occurred", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_period": {"name": "metric_period", "description": "i.e. Hourly, Daily, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_users_count": {"name": "unique_users_count", "description": "The distinct count of unique users in that period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_users_cumulative": {"name": "unique_users_cumulative", "description": "The sum of unique users in that period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/metrics/metric_unique_users_count.yml", "compiled_path": "target/compiled/harmony/models/metrics/metric_unique_users_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "table", "tags": ["metrics"], "cluster_by": ["metric_date"]}, "created_at": 1652754672.297586, "compiled_sql": "\n\nwith\n\nmin_address as (\n\n    select \n        from_address,\n        min(block_timestamp) as min_timestamp\n    from HARMONY.DEV.txs\n    group by 1\n\n),\n\ndaily as (\n\n    select\n        date_trunc('day', min_timestamp) as metric_date,\n        'daily' as metric_period,\n        count(from_address) as unique_users_count,\n        sum(unique_users_count) over (partition by metric_period order by metric_date) as unique_users_cumulative\n    from min_address\n    group by 1, 2\n\n),\n\nhourly as (\n\n    select\n        date_trunc('hour', min_timestamp) as metric_date,\n        'hourly' as metric_period,\n        count(from_address) as unique_users_count,\n        sum(unique_users_count) over (partition by metric_period order by metric_date) as unique_users_cumulative\n    from min_address\n    group by 1, 2\n\n),\n\nminute as (\n\n    select\n        date_trunc('minute', min_timestamp) as metric_date,\n        'minute' as metric_period,\n        count(from_address) as unique_users_count,\n        sum(unique_users_count) over (partition by metric_period order by metric_date) as unique_users_cumulative\n    from min_address\n    group by 1, 2\n\n),\n\nfinal as (\n    select * from daily\n    union all\n    select * from hourly\n    union all\n    select * from minute\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.metric_unique_users_count"}, "model.harmony.metric_erc20_transfers_count": {"raw_sql": "{{ \n    config(\n        materialized='table',\n        tags=['metrics'],\n        cluster_by=['metric_date']\n    )\n}}\n\nwith\n\ndaily as (\n    select \n        date_trunc('day', block_timestamp) as metric_date,\n        'daily' as metric_period,\n        count(1) as transfers_count\n    from {{ ref(\"transfers\") }}\n    group by 1, 2\n),\n\nhourly as (\n    select \n        date_trunc('hour', block_timestamp) as metric_date,\n        'hourly' as metric_period,\n        count(1) as transfers_count\n    from {{ ref(\"transfers\") }}\n    group by 1, 2\n),\n\nminute as (\n    select \n        date_trunc('minute', block_timestamp) as metric_date,\n        'minute' as metric_period,\n        count(1) as transfers_count\n    from {{ ref(\"transfers\") }}\n    group by 1, 2\n),\n\nfinal as (\n    select * from daily\n    union all\n    select * from hourly\n    union all\n    select * from minute\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.transfers", "model.harmony.transfers", "model.harmony.transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["metrics"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["metric_date"], "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "metrics", "metric_erc20_transfers_count"], "unique_id": "model.harmony.metric_erc20_transfers_count", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "metrics/metric_erc20_transfers_count.sql", "original_file_path": "models/metrics/metric_erc20_transfers_count.sql", "name": "metric_erc20_transfers_count", "alias": "metric_erc20_transfers_count", "checksum": {"name": "sha256", "checksum": "2555fcd8e2b64c7ea2ec4646ef0ea2c84b22bb70e609c748929a318e5b8ebc2f"}, "tags": ["metrics"], "refs": [["transfers"], ["transfers"], ["transfers"]], "sources": [], "description": "The count of erc20 transfers within a given period", "columns": {"metric_date": {"name": "metric_date", "description": "The date the metric occurred", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_period": {"name": "metric_period", "description": "i.e. Hourly, Daily, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfers_count": {"name": "transfers_count", "description": "The amount erc20 transfers in that period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/metrics/metric_erc20_transfers_count.yml", "compiled_path": "target/compiled/harmony/models/metrics/metric_erc20_transfers_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "table", "tags": ["metrics"], "cluster_by": ["metric_date"]}, "created_at": 1652754672.301611, "compiled_sql": "\n\nwith\n\ndaily as (\n    select \n        date_trunc('day', block_timestamp) as metric_date,\n        'daily' as metric_period,\n        count(1) as transfers_count\n    from HARMONY.DEV.transfers\n    group by 1, 2\n),\n\nhourly as (\n    select \n        date_trunc('hour', block_timestamp) as metric_date,\n        'hourly' as metric_period,\n        count(1) as transfers_count\n    from HARMONY.DEV.transfers\n    group by 1, 2\n),\n\nminute as (\n    select \n        date_trunc('minute', block_timestamp) as metric_date,\n        'minute' as metric_period,\n        count(1) as transfers_count\n    from HARMONY.DEV.transfers\n    group by 1, 2\n),\n\nfinal as (\n    select * from daily\n    union all\n    select * from hourly\n    union all\n    select * from minute\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.metric_erc20_transfers_count"}, "model.harmony.stg_tokenprice_from_swaps": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key=\"key\",\n        incremental_strategy = 'delete+insert',\n        tags=['core', 'defi', 'tokenprice'],\n        cluster_by=['block_date', 'token_address']\n        )\n}}\n\nwith \nstables as (\n  select * from {{ ref('harmony_stable_tokens')}}\n),\n\nswaps_ref as (\n  select * from {{ ref('swaps') }}\n  where {{ incremental_last_x_days(\"block_timestamp\", 3) }}\n),\n\n-- trim the swaps table, truncate to day, and normalize the decimals, remove nulls with inner join\nsimpleswaps as (\n  select\n    date_trunc('day', s.block_timestamp) as block_date,\n    s.tx_hash,\n    s.pool_address,\n    s.token0_address,\n    s.token0_symbol,\n    s.token1_address,\n    s.token1_symbol,\n    (s.amount0in + s.amount0out) / pow(10, t0.decimals) as amt0,\n    (s.amount1in + s.amount1out) / pow(10, t1.decimals) as amt1\n  from swaps_ref as s\n  inner join {{ ref('tokens') }} as t0\n    on t0.token_address = s.token0_address\n  inner join {{ ref('tokens') }} as t1\n    on t1.token_address = s.token1_address\n),\n\n-- aggregate daily swap volumes between all pairs\nswaps_daily_agg as (\n  select  \n    s.block_date,\n    s.pool_address,\n    s.token0_address,\n    s.token0_symbol,\n    s.token1_address,\n    s.token1_symbol,\n    sum(s.amt0) as amt0,\n    sum(s.amt1) as amt1\n  from simpleswaps as s\n  group by 1,2,3,4,5,6\n),\n\n-- union all 0->1 and 1->0 swaps into a tall table for simplified bi-directional lookups and volume ranking\nconsolidated_pairs as (\n  select \n    concat_ws( '-', block_date, token_address ) as key,\n    block_date,\n    token_address,\n    token_symbol,\n    sum(amt) as amt,\n    pair_address,\n    pair_symbol,\n    sum(pair_amt) as pair_amt,\n    sum(pair_amt) / sum (amt) as price,\n    row_number() over (partition by block_date, token_address order by sum(amt) desc) as rank -- can't use rank() because of ties for 1st\n  from (\n    select \n        block_date, \n        token0_address as token_address, \n        token0_symbol as token_symbol,\n        amt0 as amt,\n        token1_address as pair_address,\n        token1_symbol as pair_symbol,\n        amt1 as pair_amt\n    from swaps_daily_agg\n    union all\n    select \n        block_date, \n        token1_address as token_address, \n        token1_symbol as token_symbol,\n        amt1 as amt,\n        token0_address as pair_address,\n        token0_symbol as pair_symbol,\n        amt0 as pair_amt\n    from swaps_daily_agg\n   ) \n  group by 1,2,3,4,6,7\n  order by 4,2,5 desc\n),\n\nstart_stables as (\nselect distinct\n    concat_ws( '-', c.block_date, c.token_address ) as key,\n    c.block_date,\n    s.token_address,\n    s.token_symbol,\n    1 as usd_price,\n    0 as volume_for_price,\n    null as price_pair_token,\n    null as price_pair_symbol,\n    'stables' as lookup_round\nfrom consolidated_pairs as c\ninner join stables as s\n  on c.token_address = s.token_address\n),\n\n-- add WONE lookup\nwone_lookup as (\nselect \n    c.key,  \n    c.block_date,\n    c.token_address,\n    c.token_symbol,\n    sum(c.pair_amt) / sum(c.amt) as usd_price,\n    sum(c.amt) as volume_for_price,\n    null as price_pair_token,\n    null as price_pair_symbol,\n    'wONE' as lookup_round\nfrom consolidated_pairs as c\n  inner join start_stables as s\n    on c.pair_address = s.token_address\nwhere c.token_address = '0xcf664087a5bb0237a0bad6742852ec6c8d69a27a' -- WONE  \ngroup by 1,2,3,4,7,8\n  \nunion all\n  select * from start_stables\n),\n\n-- add lookups1a table for next round of matches, where top pair matches the wone_lookup table (wone + stables) (exclude keys that already exist in wone_lookup_table)\nlookups1a as (\nselect \n    c.key,  \n    c.block_date,\n    c.token_address,\n    c.token_symbol,\n    c.price * s.usd_price as usd_price,\n    c.amt as volume_for_price,\n    c.pair_address as pair_token_for_price,\n    c.pair_symbol as pair_symbol_for_price,\n    '1a' as lookup_round\nfrom consolidated_pairs as c\n  inner join wone_lookup as s\n    on c.pair_address = s.token_address\n    and c.block_date = s.block_date\n    and c.rank = 1\nwhere c.key not in (select key from wone_lookup)\n  \nunion all\n  select * from wone_lookup\n), \n\n-- add lookups1b table for next round of matches, where top pair matches the lookups1a table (exclude keys that already exist in lookups1a table)\nlookups1b as (\nselect \n    c.key,  \n    c.block_date,\n    c.token_address,\n    c.token_symbol,\n    c.price * s.usd_price as usd_price,\n    c.amt as volume_for_price,\n    c.pair_address as pair_token_for_price,\n    c.pair_symbol as pair_symbol_for_price,\n    '1b' as lookup_round\nfrom consolidated_pairs as c\n  inner join lookups1a as s\n    on c.pair_address = s.token_address\n    and c.block_date = s.block_date\n    and c.rank = 1\nwhere c.key not in (select key from lookups1a)\n  \nunion all\n  select * from lookups1a\n), \n\n-- add lookups1c table for next round of matches, where top pair matches the lookups1b table (exclude keys that already exist in lookups1b table)\nlookups1c as (\nselect \n    c.key,  \n    c.block_date,\n    c.token_address,\n    c.token_symbol,\n    c.price * s.usd_price as usd_price,\n    c.amt as volume_for_price,\n    c.pair_address as pair_token_for_price,\n    c.pair_symbol as pair_symbol_for_price,\n    '1c' as lookup_round\nfrom consolidated_pairs as c\n  inner join lookups1b as s\n    on c.pair_address = s.token_address\n    and c.block_date = s.block_date\n    and c.rank = 1\nwhere c.key not in (select key from lookups1b)\n  \nunion all\n  select * from lookups1b\n), \n\n-- add lookups2a table for next round of matches, where 2nd most common pair matches the lookups1c table (exclude keys that already exist in lookups1c table)\nlookups2a as (\nselect \n    c.key,  \n    c.block_date,\n    c.token_address,\n    c.token_symbol,\n    c.price * s.usd_price as usd_price,\n    c.amt as volume_for_price,\n    c.pair_address as pair_token_for_price,\n    c.pair_symbol as pair_symbol_for_price,\n    '2a' as lookup_round\nfrom consolidated_pairs as c\n  inner join lookups1c as s\n    on c.pair_address = s.token_address\n    and c.block_date = s.block_date\n    and c.rank = 2\nwhere c.key not in (select key from lookups1c)\n  \nunion all\n  select * from lookups1c\n),\n\n-- add lookups2b table for next round of matches, where 2nd most common pair matches the lookups2a table (exclude keys that already exist in lookups2a table)\nlookups2b as (\nselect \n    c.key,  \n    c.block_date,\n    c.token_address,\n    c.token_symbol,\n    c.price * s.usd_price as usd_price,\n    c.amt as volume_for_price,\n    c.pair_address as pair_token_for_price,\n    c.pair_symbol as pair_symbol_for_price,\n    '2b' as lookup_round\nfrom consolidated_pairs as c\n  inner join lookups2a as s\n    on c.pair_address = s.token_address\n    and c.block_date = s.block_date\n    and c.rank = 1\nwhere c.key not in (select key from lookups2a)\n  \nunion all\n  select * from lookups2a\n), \n\n-- IF needed, additional lookup rounds could be added, e.g.:\n-- TODO: add lookups2c table for next round of matches, where 2nd most common pair matches the lookups2b table (exclude keys that already exist in lookups2b table)\n-- TODO: add lookups3a table for next round of matches, where 3rd most common pair matches the lookups2c table (exclude keys that already exist in lookups2c table)\n-- TODO: add lookups3b table for next round of matches, where 3rd most common pair matches the lookups3a table (exclude keys that already exist in lookups3a table)\n-- TODO: add lookups3c table for next round of matches, where 3rd most common pair matches the lookups3b table (exclude keys that already exist in lookups3b table)\n\nfinal as (\nselect \n  l.block_date,\n  l.token_address,\n  l.token_symbol,\n  l.usd_price,\n  l.usd_price * sum(c.amt) as usd_volume,\n  sum(c.amt) as token_volume,\n  l.pair_token_for_price,\n  l.pair_symbol_for_price,\n  l.volume_for_price,\n  l.key,\n  l.lookup_round\nfrom lookups2b as l\nleft join consolidated_pairs as c \n    on l.key = c.key\ngroup by 1,2,3,4,7,8,9,10,11\norder by l.token_symbol, l.block_date asc\n)\n\n-- the check see if any are missing from final (should be empty):\n--select * from final \n--where key not in (select distinct key from consolidated_pairs);\n\n--select * from final;  \n--select distinct key from consolidated_pairs; \n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_last_x_days", "macro.harmony.create_js_onetohex", "macro.harmony.grant_data_share_statements"], "nodes": ["seed.harmony.harmony_stable_tokens", "model.harmony.swaps", "model.harmony.tokens", "model.harmony.tokens"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "defi", "tokenprice"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_date", "token_address"], "unique_key": "key", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_js_onetohex() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "staging", "stg_tokenprice_from_swaps"], "unique_id": "model.harmony.stg_tokenprice_from_swaps", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "staging/stg_tokenprice_from_swaps.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.sql", "name": "stg_tokenprice_from_swaps", "alias": "stg_tokenprice_from_swaps", "checksum": {"name": "sha256", "checksum": "ca34089800ee35a772eaf5ae4343a0ec66c6efca69c415777a203524a231c26c"}, "tags": ["core", "defi", "tokenprice"], "refs": [["harmony_stable_tokens"], ["swaps"], ["tokens"], ["tokens"]], "sources": [], "description": "Volume-weighted average daily prices based on swap data, assuming curated stables = 1 USD, and preferring most liquid pair", "columns": {"block_date": {"name": "block_date", "description": "daily timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_address": {"name": "token_address", "description": "HRC token EVM address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_symbol": {"name": "token_symbol", "description": "HRC token symbol", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_price": {"name": "usd_price", "description": "Volume-weighted average price during the block_date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_volume": {"name": "usd_volume", "description": "The USD-equivalent amount swapped on this date based on curated liquidity pool list", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_volume": {"name": "token_volume", "description": "The amount of tokens swapped on this date based on curated liquidity pool list", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pair_token_for_price": {"name": "pair_token_for_price", "description": "The swap pair token used to lookup the usd price, usually the highest volume pair", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pair_symbol_for_price": {"name": "pair_symbol_for_price", "description": "The symbol for the swap pair token used to lookup the usd price, usually the highest volume pair", "meta": {}, "data_type": null, "quote": null, "tags": []}, "volume_for_price": {"name": "volume_for_price", "description": "The quantity of the token swapped with the pair that was used to lookup the usd_price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "key": {"name": "key", "description": "Admin field - Unique key - <block_date>-<token_address>", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lookup_round": {"name": "lookup_round", "description": "Admin field - the point in the price lookup loop that this price was matched", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/staging/stg_tokenprice_from_swaps.yml", "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_js_onetohex() }}", "materialized": "incremental", "unique_key": "key", "incremental_strategy": "delete+insert", "tags": ["core", "defi", "tokenprice"], "cluster_by": ["block_date", "token_address"]}, "created_at": 1652754672.3218079, "compiled_sql": "\n\nwith \nstables as (\n  select * from HARMONY.DEV.harmony_stable_tokens\n),\n\nswaps_ref as (\n  select * from HARMONY.DEV.swaps\n  where \n        block_timestamp >= current_date() - interval '3 day'\n    \n),\n\n-- trim the swaps table, truncate to day, and normalize the decimals, remove nulls with inner join\nsimpleswaps as (\n  select\n    date_trunc('day', s.block_timestamp) as block_date,\n    s.tx_hash,\n    s.pool_address,\n    s.token0_address,\n    s.token0_symbol,\n    s.token1_address,\n    s.token1_symbol,\n    (s.amount0in + s.amount0out) / pow(10, t0.decimals) as amt0,\n    (s.amount1in + s.amount1out) / pow(10, t1.decimals) as amt1\n  from swaps_ref as s\n  inner join HARMONY.DEV.tokens as t0\n    on t0.token_address = s.token0_address\n  inner join HARMONY.DEV.tokens as t1\n    on t1.token_address = s.token1_address\n),\n\n-- aggregate daily swap volumes between all pairs\nswaps_daily_agg as (\n  select  \n    s.block_date,\n    s.pool_address,\n    s.token0_address,\n    s.token0_symbol,\n    s.token1_address,\n    s.token1_symbol,\n    sum(s.amt0) as amt0,\n    sum(s.amt1) as amt1\n  from simpleswaps as s\n  group by 1,2,3,4,5,6\n),\n\n-- union all 0->1 and 1->0 swaps into a tall table for simplified bi-directional lookups and volume ranking\nconsolidated_pairs as (\n  select \n    concat_ws( '-', block_date, token_address ) as key,\n    block_date,\n    token_address,\n    token_symbol,\n    sum(amt) as amt,\n    pair_address,\n    pair_symbol,\n    sum(pair_amt) as pair_amt,\n    sum(pair_amt) / sum (amt) as price,\n    row_number() over (partition by block_date, token_address order by sum(amt) desc) as rank -- can't use rank() because of ties for 1st\n  from (\n    select \n        block_date, \n        token0_address as token_address, \n        token0_symbol as token_symbol,\n        amt0 as amt,\n        token1_address as pair_address,\n        token1_symbol as pair_symbol,\n        amt1 as pair_amt\n    from swaps_daily_agg\n    union all\n    select \n        block_date, \n        token1_address as token_address, \n        token1_symbol as token_symbol,\n        amt1 as amt,\n        token0_address as pair_address,\n        token0_symbol as pair_symbol,\n        amt0 as pair_amt\n    from swaps_daily_agg\n   ) \n  group by 1,2,3,4,6,7\n  order by 4,2,5 desc\n),\n\nstart_stables as (\nselect distinct\n    concat_ws( '-', c.block_date, c.token_address ) as key,\n    c.block_date,\n    s.token_address,\n    s.token_symbol,\n    1 as usd_price,\n    0 as volume_for_price,\n    null as price_pair_token,\n    null as price_pair_symbol,\n    'stables' as lookup_round\nfrom consolidated_pairs as c\ninner join stables as s\n  on c.token_address = s.token_address\n),\n\n-- add WONE lookup\nwone_lookup as (\nselect \n    c.key,  \n    c.block_date,\n    c.token_address,\n    c.token_symbol,\n    sum(c.pair_amt) / sum(c.amt) as usd_price,\n    sum(c.amt) as volume_for_price,\n    null as price_pair_token,\n    null as price_pair_symbol,\n    'wONE' as lookup_round\nfrom consolidated_pairs as c\n  inner join start_stables as s\n    on c.pair_address = s.token_address\nwhere c.token_address = '0xcf664087a5bb0237a0bad6742852ec6c8d69a27a' -- WONE  \ngroup by 1,2,3,4,7,8\n  \nunion all\n  select * from start_stables\n),\n\n-- add lookups1a table for next round of matches, where top pair matches the wone_lookup table (wone + stables) (exclude keys that already exist in wone_lookup_table)\nlookups1a as (\nselect \n    c.key,  \n    c.block_date,\n    c.token_address,\n    c.token_symbol,\n    c.price * s.usd_price as usd_price,\n    c.amt as volume_for_price,\n    c.pair_address as pair_token_for_price,\n    c.pair_symbol as pair_symbol_for_price,\n    '1a' as lookup_round\nfrom consolidated_pairs as c\n  inner join wone_lookup as s\n    on c.pair_address = s.token_address\n    and c.block_date = s.block_date\n    and c.rank = 1\nwhere c.key not in (select key from wone_lookup)\n  \nunion all\n  select * from wone_lookup\n), \n\n-- add lookups1b table for next round of matches, where top pair matches the lookups1a table (exclude keys that already exist in lookups1a table)\nlookups1b as (\nselect \n    c.key,  \n    c.block_date,\n    c.token_address,\n    c.token_symbol,\n    c.price * s.usd_price as usd_price,\n    c.amt as volume_for_price,\n    c.pair_address as pair_token_for_price,\n    c.pair_symbol as pair_symbol_for_price,\n    '1b' as lookup_round\nfrom consolidated_pairs as c\n  inner join lookups1a as s\n    on c.pair_address = s.token_address\n    and c.block_date = s.block_date\n    and c.rank = 1\nwhere c.key not in (select key from lookups1a)\n  \nunion all\n  select * from lookups1a\n), \n\n-- add lookups1c table for next round of matches, where top pair matches the lookups1b table (exclude keys that already exist in lookups1b table)\nlookups1c as (\nselect \n    c.key,  \n    c.block_date,\n    c.token_address,\n    c.token_symbol,\n    c.price * s.usd_price as usd_price,\n    c.amt as volume_for_price,\n    c.pair_address as pair_token_for_price,\n    c.pair_symbol as pair_symbol_for_price,\n    '1c' as lookup_round\nfrom consolidated_pairs as c\n  inner join lookups1b as s\n    on c.pair_address = s.token_address\n    and c.block_date = s.block_date\n    and c.rank = 1\nwhere c.key not in (select key from lookups1b)\n  \nunion all\n  select * from lookups1b\n), \n\n-- add lookups2a table for next round of matches, where 2nd most common pair matches the lookups1c table (exclude keys that already exist in lookups1c table)\nlookups2a as (\nselect \n    c.key,  \n    c.block_date,\n    c.token_address,\n    c.token_symbol,\n    c.price * s.usd_price as usd_price,\n    c.amt as volume_for_price,\n    c.pair_address as pair_token_for_price,\n    c.pair_symbol as pair_symbol_for_price,\n    '2a' as lookup_round\nfrom consolidated_pairs as c\n  inner join lookups1c as s\n    on c.pair_address = s.token_address\n    and c.block_date = s.block_date\n    and c.rank = 2\nwhere c.key not in (select key from lookups1c)\n  \nunion all\n  select * from lookups1c\n),\n\n-- add lookups2b table for next round of matches, where 2nd most common pair matches the lookups2a table (exclude keys that already exist in lookups2a table)\nlookups2b as (\nselect \n    c.key,  \n    c.block_date,\n    c.token_address,\n    c.token_symbol,\n    c.price * s.usd_price as usd_price,\n    c.amt as volume_for_price,\n    c.pair_address as pair_token_for_price,\n    c.pair_symbol as pair_symbol_for_price,\n    '2b' as lookup_round\nfrom consolidated_pairs as c\n  inner join lookups2a as s\n    on c.pair_address = s.token_address\n    and c.block_date = s.block_date\n    and c.rank = 1\nwhere c.key not in (select key from lookups2a)\n  \nunion all\n  select * from lookups2a\n), \n\n-- IF needed, additional lookup rounds could be added, e.g.:\n-- TODO: add lookups2c table for next round of matches, where 2nd most common pair matches the lookups2b table (exclude keys that already exist in lookups2b table)\n-- TODO: add lookups3a table for next round of matches, where 3rd most common pair matches the lookups2c table (exclude keys that already exist in lookups2c table)\n-- TODO: add lookups3b table for next round of matches, where 3rd most common pair matches the lookups3a table (exclude keys that already exist in lookups3a table)\n-- TODO: add lookups3c table for next round of matches, where 3rd most common pair matches the lookups3b table (exclude keys that already exist in lookups3b table)\n\nfinal as (\nselect \n  l.block_date,\n  l.token_address,\n  l.token_symbol,\n  l.usd_price,\n  l.usd_price * sum(c.amt) as usd_volume,\n  sum(c.amt) as token_volume,\n  l.pair_token_for_price,\n  l.pair_symbol_for_price,\n  l.volume_for_price,\n  l.key,\n  l.lookup_round\nfrom lookups2b as l\nleft join consolidated_pairs as c \n    on l.key = c.key\ngroup by 1,2,3,4,7,8,9,10,11\norder by l.token_symbol, l.block_date asc\n)\n\n-- the check see if any are missing from final (should be empty):\n--select * from final \n--where key not in (select distinct key from consolidated_pairs);\n\n--select * from final;  \n--select distinct key from consolidated_pairs; \n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.stg_tokenprice_from_swaps"}, "model.harmony.stg_txs": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='tx_id',\n        tags=['core', 'transactions'],\n        cluster_by=['block_timestamp']\n        )\n}}\n\nwith\n\ndeduped_raw_txs as (\n    select\n        *\n    from {{ source(\"chainwalkers\", \"harmony_txs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n    qualify row_number() over (partition by tx_id order by ingested_at desc) = 1\n)\n\nselect * from deduped_raw_txs", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_js_onetohex", "macro.harmony.grant_data_share_statements"], "nodes": ["source.harmony.chainwalkers.harmony_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "transactions"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "tx_id", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_js_onetohex() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "staging", "stg_txs"], "unique_id": "model.harmony.stg_txs", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "staging/stg_txs.sql", "original_file_path": "models/staging/stg_txs.sql", "name": "stg_txs", "alias": "stg_txs", "checksum": {"name": "sha256", "checksum": "70763c967cb01ce983ed35c34a67ce8c10f7bac526591fa716fcadbbfa7b1efd"}, "tags": ["core", "transactions"], "refs": [], "sources": [["chainwalkers", "harmony_txs"]], "description": "Transactions from the Harmony chain shard 0. Duplicates have been removed.", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "Synonmous with transaction hash, a unique on chain identifier for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_block_index": {"name": "tx_block_index", "description": "The index of the transaction within the block. Starts at 0.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with `block_id` for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network. (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The time this row was ingested by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/staging/stg_txs.yml", "compiled_path": "target/compiled/harmony/models/staging/stg_txs.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_js_onetohex() }}", "materialized": "incremental", "unique_key": "tx_id", "tags": ["core", "transactions"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.305629, "compiled_sql": "\n\nwith\n\ndeduped_raw_txs as (\n    select\n        *\n    from chainwalkers.prod.harmony_txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.stg_txs\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.stg_txs)\n    qualify row_number() over (partition by tx_id order by ingested_at desc) = 1\n)\n\nselect * from deduped_raw_txs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.stg_txs"}, "model.harmony.stg_delegators": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key='day_date || validator_address',\n        incremental_strategy = 'delete+insert',\n        tags=['core', 'ant_ingest'],\n        cluster_by=['day_date']\n        )\n}}\n\nwith\nsource_table as (\n    select\n        *\n    from {{ ref(\"stg_ant_ingest\") }}\n    where {{ incremental_load_filter(\"ingest_timestamp\") }}\n),\n\n\nsubselect_source as (\n    select\n        ingest_timestamp,\n        parsed_data:data:result as actual_data\n    from source_table\n    where parsed_data:type = 'hmy_getAllValidatorInformation'\n        and parsed_data:data:result[0] is not null\n),\n\nflattened_validators as (\n    select\n        ingest_timestamp,\n        date_trunc('day', ingest_timestamp) as day_date,\n        f.value:validator:address::string as validator_address,\n        f.value:validator:identity::string as validator_identity,\n        f.value:\"active-status\"::string as active_status,\n        f.value:\"booted-status\"::string as booted_status,\n        f.value:validator:delegations as delegations,\n        f.value:\"total-delegation\"::float as total_delegation,\n        array_size(f.value:validator:delegations) as total_delegator_count\n    from subselect_source, Table(Flatten(subselect_source.actual_data)) as f\n)\n\nselect * from flattened_validators", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_js_onetohex", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.stg_ant_ingest"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "ant_ingest"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["day_date"], "unique_key": "day_date || validator_address", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_js_onetohex() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "staging", "stg_delegators"], "unique_id": "model.harmony.stg_delegators", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "staging/stg_delegators.sql", "original_file_path": "models/staging/stg_delegators.sql", "name": "stg_delegators", "alias": "stg_delegators", "checksum": {"name": "sha256", "checksum": "ce2eb636a3009e2931e2ec05a8ba0aa0c81bb97b2edcb66b85ffad234a6b1a64"}, "tags": ["core", "ant_ingest"], "refs": [["stg_ant_ingest"]], "sources": [], "description": "Filtered ingest from hmy_getAllValidatorInformation from the harmony endpoint.", "columns": {"ingest_timestamp": {"name": "ingest_timestamp", "description": "Timestamp the block chain was queried.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day_date": {"name": "day_date", "description": "Truncated Date of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "validator_address": {"name": "validator_address", "description": "Address of the Validator.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "validator_identity": {"name": "validator_identity", "description": "Identity of the Validator.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_status": {"name": "active_status", "description": "If the Validator is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "booted_status": {"name": "booted_status", "description": "If the Validator is booted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delegations": {"name": "delegations", "description": "The number of delegations.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_delegation": {"name": "total_delegation", "description": "The total number of delegations", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_delegator_count": {"name": "total_delegator_count", "description": "The total number of delegators", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/staging/stg_delegators.yml", "compiled_path": "target/compiled/harmony/models/staging/stg_delegators.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_js_onetohex() }}", "materialized": "incremental", "unique_key": "day_date || validator_address", "incremental_strategy": "delete+insert", "tags": ["core", "ant_ingest"], "cluster_by": ["day_date"]}, "created_at": 1652754672.314284, "compiled_sql": "\n\nwith\nsource_table as (\n    select\n        *\n    from HARMONY.DEV.stg_ant_ingest\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.stg_delegators\" variable.\n    \n      ingest_timestamp > (select max(ingest_timestamp) from HARMONY.DEV.stg_delegators)\n),\n\n\nsubselect_source as (\n    select\n        ingest_timestamp,\n        parsed_data:data:result as actual_data\n    from source_table\n    where parsed_data:type = 'hmy_getAllValidatorInformation'\n        and parsed_data:data:result[0] is not null\n),\n\nflattened_validators as (\n    select\n        ingest_timestamp,\n        date_trunc('day', ingest_timestamp) as day_date,\n        f.value:validator:address::string as validator_address,\n        f.value:validator:identity::string as validator_identity,\n        f.value:\"active-status\"::string as active_status,\n        f.value:\"booted-status\"::string as booted_status,\n        f.value:validator:delegations as delegations,\n        f.value:\"total-delegation\"::float as total_delegation,\n        array_size(f.value:validator:delegations) as total_delegator_count\n    from subselect_source, Table(Flatten(subselect_source.actual_data)) as f\n)\n\nselect * from flattened_validators", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.stg_delegators"}, "model.harmony.stg_blocks": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key='block_id',\n        tags=['core'],\n        cluster_by=['block_timestamp']\n        )\n}}\n\nwith\n\ndeduped_raw_blocks as (\n\n    select \n        *\n    from {{ source(\"chainwalkers\",\"harmony_blocks\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n    qualify row_number() over (partition by block_id order by ingested_at desc) = 1\n\n)\n\nselect * from deduped_raw_blocks", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_js_onetohex", "macro.harmony.grant_data_share_statements"], "nodes": ["source.harmony.chainwalkers.harmony_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "block_id", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_js_onetohex() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "staging", "stg_blocks"], "unique_id": "model.harmony.stg_blocks", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "staging/stg_blocks.sql", "original_file_path": "models/staging/stg_blocks.sql", "name": "stg_blocks", "alias": "stg_blocks", "checksum": {"name": "sha256", "checksum": "c8feb8a080dcdc0d5102ac5599f8eafdd50377a3d3297eb98617d558b21fc09c"}, "tags": ["core"], "refs": [], "sources": [["chainwalkers", "harmony_blocks"]], "description": "Blocks from the Harmony chain shard 0. Duplicates have been removed.", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with block_id for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network. (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "header": {"name": "header", "description": "A json column containing the block's header information.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The time this row was ingested by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/staging/stg_blocks.yml", "compiled_path": "target/compiled/harmony/models/staging/stg_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_js_onetohex() }}", "materialized": "incremental", "unique_key": "block_id", "tags": ["core"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.332895, "compiled_sql": "\n\nwith\n\ndeduped_raw_blocks as (\n\n    select \n        *\n    from chainwalkers.prod.harmony_blocks\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.stg_blocks\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.stg_blocks)\n    qualify row_number() over (partition by block_id order by ingested_at desc) = 1\n\n)\n\nselect * from deduped_raw_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.stg_blocks"}, "model.harmony.stg_ant_ingest": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key='ingest_timestamp',\n        incremental_strategy = 'delete+insert',\n        tags=['core','ingest'],\n        cluster_by=['ingest_timestamp']\n        )\n}}\n\nwith\nold_source_table as (\n\n    select\n        ingest_timestamp::timestamp as ingest_timestamp,\n        try_parse_json(ingest_data) as parsed_data\n    from {{ source(\"ingest\",\"src_old_ant_ingest\") }}\n    where     \n        {% if is_incremental() %}\n            ingest_timestamp::timestamp > (select max(ingest_timestamp) from {{ this }})\n        {%- else -%}\n            true\n        {% endif %}\n        and ingest_timestamp < '2022-03-07 15:00:00.000'\n\n),\ncurrent_source_table as (\n\n    select\n        ingest_timestamp::timestamp as ingest_timestamp,\n        try_parse_json(ingest_data) as parsed_data\n    from {{ source(\"ingest\",\"ant_ingest\") }}\n    where         \n        {% if is_incremental() %}\n            ingest_timestamp::timestamp > (select max(ingest_timestamp) from {{ this }})\n        {%- else -%}\n            true\n        {% endif %}\n        and ingest_timestamp > '2022-03-07 15:00:00.000'\n\n),\nsource_table as (\n\n    select * from old_source_table\n    union all \n    select * from current_source_table\n\n)\n\nselect * from source_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.harmony.create_js_onetohex", "macro.harmony.grant_data_share_statements"], "nodes": ["source.harmony.ingest.src_old_ant_ingest", "source.harmony.ingest.ant_ingest"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "ingest"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["ingest_timestamp"], "unique_key": "ingest_timestamp", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_js_onetohex() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "staging", "stg_ant_ingest"], "unique_id": "model.harmony.stg_ant_ingest", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "staging/stg_ant_ingest.sql", "original_file_path": "models/staging/stg_ant_ingest.sql", "name": "stg_ant_ingest", "alias": "stg_ant_ingest", "checksum": {"name": "sha256", "checksum": "6f24ed9829a63a0b25ade73a6986e2e465b70e39f68bd4150234b6f6c7bd219d"}, "tags": ["core", "ingest"], "refs": [], "sources": [["ingest", "src_old_ant_ingest"], ["ingest", "ant_ingest"]], "description": "This table is used to combined different ingests from different sources and format types correctly.\nThe data is used in the following tables...\n  - stg_delegators_counts\n  - stg_delegators\n  - stg_staked_one\n  - stg_total_supply\n  - stg_tranquil_tvl\n  - stg_validators", "columns": {"ingest_timestamp": {"name": "ingest_timestamp", "description": "Timestamp that the data was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parsed_data": {"name": "parsed_data", "description": "Data that is expected to be in a json format.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/staging/stg_ant_ingest.yml", "compiled_path": "target/compiled/harmony/models/staging/stg_ant_ingest.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_js_onetohex() }}", "materialized": "incremental", "unique_key": "ingest_timestamp", "incremental_strategy": "delete+insert", "tags": ["core", "ingest"], "cluster_by": ["ingest_timestamp"]}, "created_at": 1652754672.3404968, "compiled_sql": "\n\nwith\nold_source_table as (\n\n    select\n        ingest_timestamp::timestamp as ingest_timestamp,\n        try_parse_json(ingest_data) as parsed_data\n    from ingest.public.src_old_ant_ingest\n    where     \n        \n            ingest_timestamp::timestamp > (select max(ingest_timestamp) from HARMONY.DEV.stg_ant_ingest)\n        and ingest_timestamp < '2022-03-07 15:00:00.000'\n\n),\ncurrent_source_table as (\n\n    select\n        ingest_timestamp::timestamp as ingest_timestamp,\n        try_parse_json(ingest_data) as parsed_data\n    from ingest.public.ant_ingest\n    where         \n        \n            ingest_timestamp::timestamp > (select max(ingest_timestamp) from HARMONY.DEV.stg_ant_ingest)\n        and ingest_timestamp > '2022-03-07 15:00:00.000'\n\n),\nsource_table as (\n\n    select * from old_source_table\n    union all \n    select * from current_source_table\n\n)\n\nselect * from source_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.stg_ant_ingest"}, "model.harmony.sushiswap_lp_actions": {"raw_sql": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='log_id',\r\n        tags=['core', 'sushiswap_lp_actions'],\r\n        cluster_by=['log_id']\r\n        )\r\n}}\r\n\r\n\r\nwith \r\n\r\nlogs as (\r\n    select * from {{ ref('logs') }}\r\n    where {{ incremental_load_filter(\"block_timestamp\") }}\r\n),\r\n\r\nevents as (\r\n    select \r\n        log_id,\r\n        block_timestamp,\r\n        date_trunc('day', block_timestamp) as block_date,\r\n        tx_hash,\r\n        event_index,\r\n        native_contract_address,\r\n        evm_contract_address,\r\n\r\n        case \r\n            when event_name='Mint' \r\n                then 'ADD_LIQUIDITY'\r\n            else 'REMOVE_LIQUIDITY'\r\n        end as action,\r\n    \r\n        event_inputs:amount0::int as amount0_raw,\r\n        event_inputs:amount1::int as amount1_raw\r\n    from logs\r\n    where (event_name='Mint' or \r\n           event_name='Burn') \r\n        and event_inputs:sender = '0x1b02da8cb0d097eb8d57a175b88c7d8b47997506'\r\n),\r\n\r\ntxs as (\r\n    select\r\n        tx_hash,\r\n        from_address\r\n    from {{ ref('txs') }}\r\n    where {{ incremental_load_filter(\"block_timestamp\") }}\r\n),\r\n\r\nliquidity_pools as (\r\n    select *\r\n    from {{ ref('liquidity_pools') }}\r\n),\r\n\r\ntokenprices as (\r\n    select * \r\n    from {{ ref('tokenprices') }}\r\n),\r\n\r\ntokens as (\r\n    select *\r\n    from {{ ref('tokens') }}\r\n),\r\n\r\nevents_liquidity_pools as (\r\n    select \r\n        events.log_id,\r\n        events.block_timestamp,\r\n        events.block_date,\r\n        events.tx_hash,\r\n        liquidity_pools.*,\r\n        events.action,\r\n        events.amount0_raw,\r\n        events.amount1_raw\r\n    from events\r\n    join liquidity_pools \r\n        on events.evm_contract_address=liquidity_pools.pool_address\r\n),\r\n\r\ntoken_prices_usd as (\r\n    select \r\n        tokenprices.block_date,\r\n        tokenprices.token_address,\r\n        tokenprices.token_symbol,\r\n        tokens.decimals,\r\n        tokenprices.usd_price\r\n    from tokenprices\r\n    join tokens \r\n        on tokenprices.token_address=tokens.token_address\r\n),\r\n\r\nfinal_table as (\r\n    select\r\n        events_liquidity_pools.log_id,\r\n        events_liquidity_pools.block_timestamp,\r\n        events_liquidity_pools.tx_hash,\r\n        txs.from_address as liquidity_provider,\r\n        events_liquidity_pools.pool_address,\r\n        events_liquidity_pools.pool_name,\r\n        events_liquidity_pools.token0,\r\n        token0_prices_usd.token_symbol as token0_name,\r\n        events_liquidity_pools.token1,\r\n        token1_prices_usd.token_symbol as token1_name,\r\n        events_liquidity_pools.action,\r\n        events_liquidity_pools.amount0_raw/pow(10, token0_prices_usd.decimals) \r\n            as amount0_adjusted,\r\n        events_liquidity_pools.amount1_raw/pow(10, token1_prices_usd.decimals) \r\n            as amount1_adjusted,\r\n        events_liquidity_pools.amount0_raw/pow(10, token0_prices_usd.decimals)*token0_prices_usd.usd_price\r\n            as amount0_usd,\r\n        events_liquidity_pools.amount1_raw/pow(10, token1_prices_usd.decimals)*token1_prices_usd.usd_price \r\n            as amount1_usd\r\n    from events_liquidity_pools\r\n        join txs \r\n            on events_liquidity_pools.tx_hash=txs.tx_hash\r\n        left join token_prices_usd as token0_prices_usd\r\n            on events_liquidity_pools.token0=token0_prices_usd.token_address \r\n                and events_liquidity_pools.block_date=token0_prices_usd.block_date\r\n        left join token_prices_usd as token1_prices_usd\r\n            on events_liquidity_pools.token1=token1_prices_usd.token_address \r\n                and events_liquidity_pools.block_date=token1_prices_usd.block_date\r\n    order by events_liquidity_pools.block_timestamp desc\r\n)\r\n\r\nselect * from final_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.logs", "model.harmony.txs", "model.harmony.liquidity_pools", "model.harmony.tokenprices", "model.harmony.tokens"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "sushiswap_lp_actions"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["log_id"], "unique_key": "log_id", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "core", "sushiswap_lp_actions"], "unique_id": "model.harmony.sushiswap_lp_actions", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "core/sushiswap_lp_actions.sql", "original_file_path": "models/core/sushiswap_lp_actions.sql", "name": "sushiswap_lp_actions", "alias": "sushiswap_lp_actions", "checksum": {"name": "sha256", "checksum": "fde3d76fd08b48e0a110d3e023b54c729d4a5a0f41cb0e1cb285de6873e8b30f"}, "tags": ["core", "sushiswap_lp_actions"], "refs": [["logs"], ["txs"], ["liquidity_pools"], ["tokenprices"], ["tokens"]], "sources": [], "description": "Harmony Sushiswap LP Actions", "columns": {"log_id": {"name": "log_id", "description": "Log identifier composed of tx_hash-event_index", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp for when the block was collated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "Hash of the transaction (32 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "liquidity_provider": {"name": "liquidity_provider", "description": "EVM address of the liquidity provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_address": {"name": "pool_address", "description": "EVM address of the liquidity pool involved in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_name": {"name": "pool_name", "description": "The name of the liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0": {"name": "token0", "description": "EVM address of the first token in the token pair.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0_name": {"name": "token0_name", "description": "Name of the first token in the token pair.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1": {"name": "token1", "description": "EVM address of the second token in the token pair.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1_name": {"name": "token1_name", "description": "Name of the second token in the token pair.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action": {"name": "action", "description": "The action executed to the liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount0_adjusted": {"name": "amount0_adjusted", "description": "The quantity of the first token being added or removed from the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount1_adjusted": {"name": "amount1_adjusted", "description": "The quantity of the second token being added or removed from the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount0_usd": {"name": "amount0_usd", "description": "The USD value of the first token being added or removed from the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount1_usd": {"name": "amount1_usd", "description": "The USD value of the second token being added or removed from the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/core/sushiswap_lp_actions.yml", "compiled_path": "target/compiled/harmony/models/core/sushiswap_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "incremental", "unique_key": "log_id", "tags": ["core", "sushiswap_lp_actions"], "cluster_by": ["log_id"]}, "created_at": 1652754672.343798, "compiled_sql": "\n\n\nwith \n\nlogs as (\n    select * from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.sushiswap_lp_actions\" variable.\n    \n      block_timestamp > (select max(block_timestamp) from HARMONY.DEV.sushiswap_lp_actions)\n),\n\nevents as (\n    select \n        log_id,\n        block_timestamp,\n        date_trunc('day', block_timestamp) as block_date,\n        tx_hash,\n        event_index,\n        native_contract_address,\n        evm_contract_address,\n\n        case \n            when event_name='Mint' \n                then 'ADD_LIQUIDITY'\n            else 'REMOVE_LIQUIDITY'\n        end as action,\n    \n        event_inputs:amount0::int as amount0_raw,\n        event_inputs:amount1::int as amount1_raw\n    from logs\n    where (event_name='Mint' or \n           event_name='Burn') \n        and event_inputs:sender = '0x1b02da8cb0d097eb8d57a175b88c7d8b47997506'\n),\n\ntxs as (\n    select\n        tx_hash,\n        from_address\n    from HARMONY.DEV.txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.sushiswap_lp_actions\" variable.\n    \n      block_timestamp > (select max(block_timestamp) from HARMONY.DEV.sushiswap_lp_actions)\n),\n\nliquidity_pools as (\n    select *\n    from HARMONY.DEV.liquidity_pools\n),\n\ntokenprices as (\n    select * \n    from HARMONY.DEV.tokenprices\n),\n\ntokens as (\n    select *\n    from HARMONY.DEV.tokens\n),\n\nevents_liquidity_pools as (\n    select \n        events.log_id,\n        events.block_timestamp,\n        events.block_date,\n        events.tx_hash,\n        liquidity_pools.*,\n        events.action,\n        events.amount0_raw,\n        events.amount1_raw\n    from events\n    join liquidity_pools \n        on events.evm_contract_address=liquidity_pools.pool_address\n),\n\ntoken_prices_usd as (\n    select \n        tokenprices.block_date,\n        tokenprices.token_address,\n        tokenprices.token_symbol,\n        tokens.decimals,\n        tokenprices.usd_price\n    from tokenprices\n    join tokens \n        on tokenprices.token_address=tokens.token_address\n),\n\nfinal_table as (\n    select\n        events_liquidity_pools.log_id,\n        events_liquidity_pools.block_timestamp,\n        events_liquidity_pools.tx_hash,\n        txs.from_address as liquidity_provider,\n        events_liquidity_pools.pool_address,\n        events_liquidity_pools.pool_name,\n        events_liquidity_pools.token0,\n        token0_prices_usd.token_symbol as token0_name,\n        events_liquidity_pools.token1,\n        token1_prices_usd.token_symbol as token1_name,\n        events_liquidity_pools.action,\n        events_liquidity_pools.amount0_raw/pow(10, token0_prices_usd.decimals) \n            as amount0_adjusted,\n        events_liquidity_pools.amount1_raw/pow(10, token1_prices_usd.decimals) \n            as amount1_adjusted,\n        events_liquidity_pools.amount0_raw/pow(10, token0_prices_usd.decimals)*token0_prices_usd.usd_price\n            as amount0_usd,\n        events_liquidity_pools.amount1_raw/pow(10, token1_prices_usd.decimals)*token1_prices_usd.usd_price \n            as amount1_usd\n    from events_liquidity_pools\n        join txs \n            on events_liquidity_pools.tx_hash=txs.tx_hash\n        left join token_prices_usd as token0_prices_usd\n            on events_liquidity_pools.token0=token0_prices_usd.token_address \n                and events_liquidity_pools.block_date=token0_prices_usd.block_date\n        left join token_prices_usd as token1_prices_usd\n            on events_liquidity_pools.token1=token1_prices_usd.token_address \n                and events_liquidity_pools.block_date=token1_prices_usd.block_date\n    order by events_liquidity_pools.block_timestamp desc\n)\n\nselect * from final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.sushiswap_lp_actions"}, "model.harmony.swaps": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='log_id',\n        incremental_strategy = 'delete+insert',\n        tags=['core', 'swaps'],\n        cluster_by=['block_timestamp']\n        )\n}}\n\nwith\n\nlogs as (\n    select \n        *\n    from {{ ref('logs') }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nfinal as (\n    select \n        l.block_timestamp,\n        l.ingested_at,\n        l.log_id,\n        l.tx_hash,\n        l.evm_contract_address as pool_address,\n        p.token0 as token0_address,\n        t0.token_name as token0_name,\n        t0.token_symbol as token0_symbol,\n        l.event_inputs:amount0In::integer as amount0In,\n        l.event_inputs:amount0Out::integer as amount0Out,\n        p.token1 as token1_address,\n        t1.token_name as token1_name,\n        t1.token_symbol as token1_symbol,\n        l.event_inputs:amount1In::integer as amount1In,\n        l.event_inputs:amount1Out::integer as amount1Out,\n        l.event_inputs:sender::string as from_address,\n        l.event_inputs:to as to_address\n    from logs as l\n    join {{ ref('liquidity_pools') }} as p on p.pool_address = l.evm_contract_address\n    left join {{ ref('tokens') }} as t0 on t0.token_address = p.token0\n    left join {{ ref('tokens') }} as t1 on t1.token_address = p.token1\n    where l.event_name = 'Swap'\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.logs", "model.harmony.liquidity_pools", "model.harmony.tokens", "model.harmony.tokens"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "swaps"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "log_id", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "core", "swaps"], "unique_id": "model.harmony.swaps", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "core/swaps.sql", "original_file_path": "models/core/swaps.sql", "name": "swaps", "alias": "swaps", "checksum": {"name": "sha256", "checksum": "18f911528c5398811091d0c3340baff242d46702f58d22cc1b67890f8d156a94"}, "tags": ["core", "swaps"], "refs": [["logs"], ["liquidity_pools"], ["tokens"], ["tokens"]], "sources": [], "description": "Harmony Swaps", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "When the trade was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "log_id": {"name": "log_id", "description": "The unique id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "The transaction hash.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_address": {"name": "pool_address", "description": "The pool address that the swap was conducted in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0_address": {"name": "token0_address", "description": "The `token0` address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0_name": {"name": "token0_name", "description": "The `token0` name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0_symbol": {"name": "token0_symbol", "description": "The `token0` symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount0In": {"name": "amount0In", "description": "The amount of `token0` that went into the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount0Out": {"name": "amount0Out", "description": "The amount of `token0` that came out from the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1_address": {"name": "token1_address", "description": "The `token1` address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1_name": {"name": "token1_name", "description": "The `token1` name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1_symbol": {"name": "token1_symbol", "description": "The `token1` symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount1In": {"name": "amount1In", "description": "The amount of `token1` that went into the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount1Out": {"name": "amount1Out", "description": "The amount of `token` that came out from the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_address": {"name": "from_address", "description": "The address that triggered the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_address": {"name": "to_address", "description": "The address that the out tokens go to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/core/swaps.yml", "compiled_path": "target/compiled/harmony/models/core/swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "incremental", "unique_key": "log_id", "incremental_strategy": "delete+insert", "tags": ["core", "swaps"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.364068, "compiled_sql": "\n\nwith\n\nlogs as (\n    select \n        *\n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.swaps\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.swaps)\n),\n\nfinal as (\n    select \n        l.block_timestamp,\n        l.ingested_at,\n        l.log_id,\n        l.tx_hash,\n        l.evm_contract_address as pool_address,\n        p.token0 as token0_address,\n        t0.token_name as token0_name,\n        t0.token_symbol as token0_symbol,\n        l.event_inputs:amount0In::integer as amount0In,\n        l.event_inputs:amount0Out::integer as amount0Out,\n        p.token1 as token1_address,\n        t1.token_name as token1_name,\n        t1.token_symbol as token1_symbol,\n        l.event_inputs:amount1In::integer as amount1In,\n        l.event_inputs:amount1Out::integer as amount1Out,\n        l.event_inputs:sender::string as from_address,\n        l.event_inputs:to as to_address\n    from logs as l\n    join HARMONY.DEV.liquidity_pools as p on p.pool_address = l.evm_contract_address\n    left join HARMONY.DEV.tokens as t0 on t0.token_address = p.token0\n    left join HARMONY.DEV.tokens as t1 on t1.token_address = p.token1\n    where l.event_name = 'Swap'\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.swaps"}, "model.harmony.validators": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='u_key',\n        tags=['core'],\n        cluster_by=['day_date']\n    )\n}}\n\nwith delegators_incremental as (\n    select\n        *\n    from {{ ref('stg_delegators') }}\n    where {{ incremental_load_filter_2('ingest_timestamp', 'day_date') }}\n    \n),\n\nlatest_day_timestamps as (\n    select\n        day_date,\n        validator_address,\n        max(ingest_timestamp) as ingest_timestamp\n    from delegators_incremental\n    group by 1, 2\n),\n\nlatest_day_flat_delegations as (\n    select\n        value,\n        ingest_timestamp,\n        validator_address\n    from delegators_incremental\n    natural join latest_day_timestamps\n    inner join lateral flatten(input => delegations)\n),\n\nrewards as (\n    select\n        ingest_timestamp,\n        validator_address,\n        sum(value:reward) as amount\n    from latest_day_flat_delegations\n    group by 1, 2\n),\n\nundelegations as (\n    select\n        ingest_timestamp,\n        validator_address,\n        sum(ifnull(flat_undelegations.value:amount, 0)) as amount\n    from latest_day_flat_delegations\n    inner join lateral flatten(input => value:undelegations, outer => true) flat_undelegations\n    group by 1, 2\n),\n\ntotals as (\n    select\n        rewards.ingest_timestamp as ingest_timestamp,\n        rewards.validator_address as validator_address,\n        rewards.amount as total_one_rewarded,\n        undelegations.amount as total_one_undelegated\n    from rewards\n    join undelegations\n        on rewards.ingest_timestamp = undelegations.ingest_timestamp\n        and rewards.validator_address = undelegations.validator_address\n),\n\nvalidators as (\n    select\n        day_date,\n        delegators_incremental.validator_address as validator_address,\n        js_onetohex(delegators_incremental.validator_address) as validator_hex_address,\n        validator_identity,\n        active_status,\n        booted_status,\n        total_delegation as total_one_delegated,\n        ifnull(total_one_rewarded, 0) as total_one_rewarded,\n        ifnull(total_one_undelegated, 0) as total_one_undelegated\n    from delegators_incremental\n    join totals \n        on delegators_incremental.ingest_timestamp = totals.ingest_timestamp\n        and delegators_incremental.validator_address = totals.validator_address\n),\n\nfinal as (\n    select\n        concat_ws('-', to_char(day_date, '%Y%m%d'), validator_address) as u_key,\n        *\n    from validators\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter_2", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.stg_delegators"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["day_date"], "unique_key": "u_key", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "core", "validators"], "unique_id": "model.harmony.validators", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "core/validators.sql", "original_file_path": "models/core/validators.sql", "name": "validators", "alias": "validators", "checksum": {"name": "sha256", "checksum": "7091fef12cbbecc608269264b6c979d9781f17d18cef9dd316d30765e38a39ef"}, "tags": ["core"], "refs": [["stg_delegators"]], "sources": [], "description": "This table records various daily statistics of Harmony validators.", "columns": {"u_key": {"name": "u_key", "description": "The daily update key composed of the date and validator address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day_date": {"name": "day_date", "description": "The date of this log.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "validator_address": {"name": "validator_address", "description": "The validator's native Harmony address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "validator_hex_address": {"name": "validator_hex_address", "description": "The validator's address in hex format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "validator_identity": {"name": "validator_identity", "description": "The validator's provided identity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_status": {"name": "active_status", "description": "The validator's active status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "booted_status": {"name": "booted_status", "description": "The reason for booting this validator off the network.\nNULL if validator is active and not booted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_one_delegated": {"name": "total_one_delegated", "description": "The total amount of ONE delegated to this validator in ATTO format (a factor of 10^18).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_one_rewarded": {"name": "total_one_rewarded", "description": "The total amount of ONE rewarded by this validator to delegators in ATTO format (a factor of 10^18).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_one_undelegated": {"name": "total_one_undelegated", "description": "The total amount of ONE undelegated from this validator in ATTO format (a factor of 10^18).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/core/validators.yml", "compiled_path": "target/compiled/harmony/models/core/validators.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "incremental", "unique_key": "u_key", "tags": ["core"], "cluster_by": ["day_date"]}, "created_at": 1652754672.3534021, "compiled_sql": "\n\nwith delegators_incremental as (\n    select\n        *\n    from HARMONY.DEV.stg_delegators\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.validators\" variable.\n    \n      ingest_timestamp > (select max(day_date) from HARMONY.DEV.validators)\n    \n),\n\nlatest_day_timestamps as (\n    select\n        day_date,\n        validator_address,\n        max(ingest_timestamp) as ingest_timestamp\n    from delegators_incremental\n    group by 1, 2\n),\n\nlatest_day_flat_delegations as (\n    select\n        value,\n        ingest_timestamp,\n        validator_address\n    from delegators_incremental\n    natural join latest_day_timestamps\n    inner join lateral flatten(input => delegations)\n),\n\nrewards as (\n    select\n        ingest_timestamp,\n        validator_address,\n        sum(value:reward) as amount\n    from latest_day_flat_delegations\n    group by 1, 2\n),\n\nundelegations as (\n    select\n        ingest_timestamp,\n        validator_address,\n        sum(ifnull(flat_undelegations.value:amount, 0)) as amount\n    from latest_day_flat_delegations\n    inner join lateral flatten(input => value:undelegations, outer => true) flat_undelegations\n    group by 1, 2\n),\n\ntotals as (\n    select\n        rewards.ingest_timestamp as ingest_timestamp,\n        rewards.validator_address as validator_address,\n        rewards.amount as total_one_rewarded,\n        undelegations.amount as total_one_undelegated\n    from rewards\n    join undelegations\n        on rewards.ingest_timestamp = undelegations.ingest_timestamp\n        and rewards.validator_address = undelegations.validator_address\n),\n\nvalidators as (\n    select\n        day_date,\n        delegators_incremental.validator_address as validator_address,\n        js_onetohex(delegators_incremental.validator_address) as validator_hex_address,\n        validator_identity,\n        active_status,\n        booted_status,\n        total_delegation as total_one_delegated,\n        ifnull(total_one_rewarded, 0) as total_one_rewarded,\n        ifnull(total_one_undelegated, 0) as total_one_undelegated\n    from delegators_incremental\n    join totals \n        on delegators_incremental.ingest_timestamp = totals.ingest_timestamp\n        and delegators_incremental.validator_address = totals.validator_address\n),\n\nfinal as (\n    select\n        concat_ws('-', to_char(day_date, '%Y%m%d'), validator_address) as u_key,\n        *\n    from validators\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.validators"}, "model.harmony.blocks": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='block_id',\n        tags=['core'],\n        cluster_by=['block_timestamp']\n    )\n}}\n\nwith base_blocks as (\n\n    select * from {{ ref(\"stg_blocks\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nfinal as (\n\n    select\n        block_id,\n        block_timestamp,\n        ingested_at,\n        header:hash::string as block_hash,\n        header:parent_hash::string as block_parent_hash,\n        header:gas_limit as gas_limit,\n        header:gas_used as gas_used,\n        header:miner::string as miner,\n        header:nonce::string as nonce,\n        header:size as size,\n        tx_count,\n        header:state_root::string as state_root,\n        header:receipts_root::string as receipts_root\n\n    from base_blocks\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.stg_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "block_id", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "core", "blocks"], "unique_id": "model.harmony.blocks", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "core/blocks.sql", "original_file_path": "models/core/blocks.sql", "name": "blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "708ee6bd83bb2202ce5c91288086a90a6bc21e2fc84d2d3253479739dae7df98"}, "tags": ["core"], "refs": [["stg_blocks"]], "sources": [], "description": "This table records all the blocks of Harmony blockchain.", "columns": {"block_id": {"name": "block_id", "description": "The block number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp for when the block was collated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_hash": {"name": "block_hash", "description": "Hash of the block (32 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_parent_hash": {"name": "block_parent_hash", "description": "Hash of the parent block (32 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_limit": {"name": "gas_limit", "description": "The maximum gas allowed in this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_used": {"name": "gas_used", "description": "The total used gas by all transactions in this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "miner": {"name": "miner", "description": "The address of the beneficiary to whom the mining rewards were given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nonce": {"name": "nonce", "description": "Hash of the generated proof-of-work (8 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "size": {"name": "size", "description": "Integer the size of this block in bytes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state_root": {"name": "state_root", "description": "The root hash that stores the entire state of the system - account balances, contract storage, contract code and account nonces are inside", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipts_root": {"name": "receipts_root", "description": "The root hash that stores receipts of all transactions included in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/core/blocks.yml", "compiled_path": "target/compiled/harmony/models/core/blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "incremental", "unique_key": "block_id", "tags": ["core"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.4273431, "compiled_sql": "\n\nwith base_blocks as (\n\n    select * from HARMONY.DEV.stg_blocks\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.blocks\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.blocks)\n),\n\nfinal as (\n\n    select\n        block_id,\n        block_timestamp,\n        ingested_at,\n        header:hash::string as block_hash,\n        header:parent_hash::string as block_parent_hash,\n        header:gas_limit as gas_limit,\n        header:gas_used as gas_used,\n        header:miner::string as miner,\n        header:nonce::string as nonce,\n        header:size as size,\n        tx_count,\n        header:state_root::string as state_root,\n        header:receipts_root::string as receipts_root\n\n    from base_blocks\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.blocks"}, "model.harmony.liquidity_pools": {"raw_sql": "{{\n    config(\n        materialized='table',\n        unique_key='pool_address',\n        tags=['core', 'liquidity_pools'],\n        cluster_by=['pool_address']\n        )\n}}\n\nwith\n\ndfk_lp as (\n    select\n        *\n    from {{ ref('dfk_dex_lp_labels') }}\n),\n\nsrc_logs_lp as (\n    select \n        event_inputs:pair::string as pool_address,\n        '' as pool_name,\n        event_inputs:token0::string as token0,\n        event_inputs:token1::string as token1\n    from {{ ref('logs') }} \n    where event_name = 'PairCreated'\n),\n\nlogs_lp as (\n    select\n        pool_address,\n        t0.token_symbol || '-' || t1.token_symbol || ' LP' as pool_name, -- \"TOKEN0-TOKEN1 LP\"\n        token0,\n        token1\n    from src_logs_lp p\n    inner join {{ ref('tokens') }} as t0\n        on p.token0 = t0.token_address\n    inner join {{ ref('tokens') }} as t1\n        on p.token1 = t1.token_address\n    where p.pool_address not in (select pool_address from dfk_lp)\n),\n\nbackfill_from_swaps as (\n    select\n        *\n    from {{ ref('backfill_pools_data') }}\n    where pool_address not in (select pool_address from logs_lp)\n        and pool_address not in (select pool_address from dfk_lp)\n),\n\n-- this is an example of adding new protocols\ntranq_lp as (\n    -- this is an example of renaming columns, make sure the columns are in the right order\n    select\n        POOL_ADDRESS as pool_address,\n        POOL_NAME as pool_name,\n        TOKEN0 as token0,\n        TOKEN1 as token1\n    from {{ ref('dfk_dex_lp_labels') }}\n    where 1=0 -- to select nothing for now\n),\n\nfinal as (\n\n    select\n        * \n    from dfk_lp\n\n    union\n\n    select\n        *\n    from logs_lp\n\n    union\n\n    select\n        *\n    from backfill_from_swaps\n\n    union\n\n    select\n        * \n    from tranq_lp\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.grant_data_share_statements"], "nodes": ["seed.harmony.dfk_dex_lp_labels", "model.harmony.logs", "model.harmony.tokens", "model.harmony.tokens", "seed.harmony.backfill_pools_data", "seed.harmony.dfk_dex_lp_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "liquidity_pools"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["pool_address"], "unique_key": "pool_address", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "core", "liquidity_pools"], "unique_id": "model.harmony.liquidity_pools", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "core/liquidity_pools.sql", "original_file_path": "models/core/liquidity_pools.sql", "name": "liquidity_pools", "alias": "liquidity_pools", "checksum": {"name": "sha256", "checksum": "f4bc4fc4ca9529358850af2117705c4d2f6f940bac2b8e69b0e83ab1b151039e"}, "tags": ["core", "liquidity_pools"], "refs": [["dfk_dex_lp_labels"], ["logs"], ["tokens"], ["tokens"], ["backfill_pools_data"], ["dfk_dex_lp_labels"]], "sources": [], "description": "Harmony Liquidity Pools", "columns": {"pool_address": {"name": "pool_address", "description": "The pool's `contract_address`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_name": {"name": "pool_name", "description": "The internally generated name generated by `token0`'s symbol and `token1`'s symbol (e.g JEWEL-WONE LP).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0": {"name": "token0", "description": "The `token0`'s `contract_address`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1": {"name": "token1", "description": "The `token1`'s `contract_address`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/core/liquidity_pools.yml", "compiled_path": "target/compiled/harmony/models/core/liquidity_pools.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "table", "unique_key": "pool_address", "tags": ["core", "liquidity_pools"], "cluster_by": ["pool_address"]}, "created_at": 1652754672.44068, "compiled_sql": "\n\nwith\n\ndfk_lp as (\n    select\n        *\n    from HARMONY.DEV.dfk_dex_lp_labels\n),\n\nsrc_logs_lp as (\n    select \n        event_inputs:pair::string as pool_address,\n        '' as pool_name,\n        event_inputs:token0::string as token0,\n        event_inputs:token1::string as token1\n    from HARMONY.DEV.logs \n    where event_name = 'PairCreated'\n),\n\nlogs_lp as (\n    select\n        pool_address,\n        t0.token_symbol || '-' || t1.token_symbol || ' LP' as pool_name, -- \"TOKEN0-TOKEN1 LP\"\n        token0,\n        token1\n    from src_logs_lp p\n    inner join HARMONY.DEV.tokens as t0\n        on p.token0 = t0.token_address\n    inner join HARMONY.DEV.tokens as t1\n        on p.token1 = t1.token_address\n    where p.pool_address not in (select pool_address from dfk_lp)\n),\n\nbackfill_from_swaps as (\n    select\n        *\n    from HARMONY.DEV.backfill_pools_data\n    where pool_address not in (select pool_address from logs_lp)\n        and pool_address not in (select pool_address from dfk_lp)\n),\n\n-- this is an example of adding new protocols\ntranq_lp as (\n    -- this is an example of renaming columns, make sure the columns are in the right order\n    select\n        POOL_ADDRESS as pool_address,\n        POOL_NAME as pool_name,\n        TOKEN0 as token0,\n        TOKEN1 as token1\n    from HARMONY.DEV.dfk_dex_lp_labels\n    where 1=0 -- to select nothing for now\n),\n\nfinal as (\n\n    select\n        * \n    from dfk_lp\n\n    union\n\n    select\n        *\n    from logs_lp\n\n    union\n\n    select\n        *\n    from backfill_from_swaps\n\n    union\n\n    select\n        * \n    from tranq_lp\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.liquidity_pools"}, "model.harmony.tokens": {"raw_sql": "{{\n    config(\n        materialized='table',\n        unique_key='token_address',\n        tags=['core', 'tokens'],\n        cluster_by=['token_address']\n        )\n}}\n\nwith\n\ndfk_tokens as (\n    select\n        *\n    from {{ ref('dfk_tokens') }}\n),\n\nharmony_explorer_tokens as (\n    select\n        *\n    from {{ ref('harmony_explorer_tokens') }}\n),\n\nbackfill_tokens as (\n    select\n        *\n    from {{ ref('backfill_tokens_data') }}\n    where token_address not in \n        (select token_address from dfk_tokens)\n    and token_address not in \n        (select token_address from harmony_explorer_tokens)\n),\n\n-- this is an example of adding new protocols\ntranq_tokens as (\n    -- this is an example of renaming columns, make sure the columns are in the right order\n    select\n        TOKEN_ADDRESS as token_address,\n        TOKEN_NAME as token_name,\n        TOKEN_SYMBOL as token_symbol,\n        DECIMALS as decimals\n    from {{ ref('dfk_tokens') }}\n    where 1=0 -- to select nothing for now\n),\n\nfinal as (\n\n    select\n        * \n    from dfk_tokens\n    -- this is used to filter duplicate / problematic tokens from the dfk list.\n    where token_address not in (select token_address from harmony_explorer_tokens)\n\n    union\n\n    select\n        * \n    from harmony_explorer_tokens\n\n    union\n\n    select\n        * \n    from backfill_tokens\n\n    union\n\n    select\n        * \n    from tranq_tokens\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.grant_data_share_statements"], "nodes": ["seed.harmony.dfk_tokens", "seed.harmony.harmony_explorer_tokens", "seed.harmony.backfill_tokens_data", "seed.harmony.dfk_tokens"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "tokens"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["token_address"], "unique_key": "token_address", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "core", "tokens"], "unique_id": "model.harmony.tokens", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "core/tokens.sql", "original_file_path": "models/core/tokens.sql", "name": "tokens", "alias": "tokens", "checksum": {"name": "sha256", "checksum": "252410473add9a323c39472a866573ac75d69972abdfb6249f4a368f2ab1785e"}, "tags": ["core", "tokens"], "refs": [["dfk_tokens"], ["harmony_explorer_tokens"], ["backfill_tokens_data"], ["dfk_tokens"]], "sources": [], "description": "Harmony Tokens", "columns": {"token_address": {"name": "token_address", "description": "The token's `contract_address`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_name": {"name": "token_name", "description": "The token's name as read from the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_symbol": {"name": "token_symbol", "description": "The token's symbol (e.g WONE) as read from the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "decimals": {"name": "decimals", "description": "The token's decimals as read from the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/core/tokens.yml", "compiled_path": "target/compiled/harmony/models/core/tokens.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "table", "unique_key": "token_address", "tags": ["core", "tokens"], "cluster_by": ["token_address"]}, "created_at": 1652754672.4455738, "compiled_sql": "\n\nwith\n\ndfk_tokens as (\n    select\n        *\n    from HARMONY.DEV.dfk_tokens\n),\n\nharmony_explorer_tokens as (\n    select\n        *\n    from HARMONY.DEV.harmony_explorer_tokens\n),\n\nbackfill_tokens as (\n    select\n        *\n    from HARMONY.DEV.backfill_tokens_data\n    where token_address not in \n        (select token_address from dfk_tokens)\n    and token_address not in \n        (select token_address from harmony_explorer_tokens)\n),\n\n-- this is an example of adding new protocols\ntranq_tokens as (\n    -- this is an example of renaming columns, make sure the columns are in the right order\n    select\n        TOKEN_ADDRESS as token_address,\n        TOKEN_NAME as token_name,\n        TOKEN_SYMBOL as token_symbol,\n        DECIMALS as decimals\n    from HARMONY.DEV.dfk_tokens\n    where 1=0 -- to select nothing for now\n),\n\nfinal as (\n\n    select\n        * \n    from dfk_tokens\n    -- this is used to filter duplicate / problematic tokens from the dfk list.\n    where token_address not in (select token_address from harmony_explorer_tokens)\n\n    union\n\n    select\n        * \n    from harmony_explorer_tokens\n\n    union\n\n    select\n        * \n    from backfill_tokens\n\n    union\n\n    select\n        * \n    from tranq_tokens\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tokens"}, "model.harmony.logs": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key = 'log_id',\n        tags=['core', 'logs'],\n        cluster_by=['block_timestamp']\n    )\n}}\n\nwith\n\nbase_txs as (\n    select\n        *\n    from {{ ref(\"stg_txs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nlogs_raw as (\n    select\n        block_id,\n        block_timestamp,\n        ingested_at,\n        tx_id as tx_hash,\n        tx:receipt:logs as full_logs\n    from base_txs\n),\n\nlogs as (\n    select\n        block_id,\n        block_timestamp,\n        ingested_at,\n        tx_hash,\n        value:logIndex::string as event_index,\n        value:bech32_address::string as native_contract_address,\n        value:address::string as evm_contract_address,\n        value:decoded:contractName::string as contract_name,\n        value:decoded:eventName::string as event_name,\n        value:decoded:inputs as event_inputs,\n        value:topics as topics,\n        value:data::string as data,\n        value:removed as event_removed\n    from logs_raw,\n    lateral flatten ( input => full_logs )\n),\n\nfinal as (\n    select\n        concat_ws('-', tx_hash, event_index) as log_id,\n        *\n    from logs\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.stg_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "logs"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "log_id", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "core", "logs"], "unique_id": "model.harmony.logs", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "core/logs.sql", "original_file_path": "models/core/logs.sql", "name": "logs", "alias": "logs", "checksum": {"name": "sha256", "checksum": "8b621f93ba1befdec0f7381d6421b6e49673f240db81da3d1b2fde78e80b1b83"}, "tags": ["core", "logs"], "refs": [["stg_txs"]], "sources": [], "description": "Harmony Logs", "columns": {"log_id": {"name": "log_id", "description": "Log identifier composed of tx_hash-event_index", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The block number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp for when the block was collated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "Hash of the transaction (32 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_index": {"name": "event_index", "description": "Integer of of the log position in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "native_contract_address": {"name": "native_contract_address", "description": "Native Harmony address of the contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evm_contract_address": {"name": "evm_contract_address", "description": "EVM address of the contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_name": {"name": "contract_name", "description": "Name of the contract called.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "Name of the event executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_inputs": {"name": "event_inputs", "description": "Parameter inputs for the event called.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "topics": {"name": "topics", "description": "Array of 0 to 4 32 Bytes data of indexed log arguments.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data": {"name": "data", "description": "Contains the non-indexed arguments of the log.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_removed": {"name": "event_removed", "description": "True when the log was removed, due to a chain reorganization. false if its a valid log.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/core/logs.yml", "compiled_path": "target/compiled/harmony/models/core/logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "incremental", "unique_key": "log_id", "tags": ["core", "logs"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.375697, "compiled_sql": "\n\nwith\n\nbase_txs as (\n    select\n        *\n    from HARMONY.DEV.stg_txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.logs\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.logs)\n),\n\nlogs_raw as (\n    select\n        block_id,\n        block_timestamp,\n        ingested_at,\n        tx_id as tx_hash,\n        tx:receipt:logs as full_logs\n    from base_txs\n),\n\nlogs as (\n    select\n        block_id,\n        block_timestamp,\n        ingested_at,\n        tx_hash,\n        value:logIndex::string as event_index,\n        value:bech32_address::string as native_contract_address,\n        value:address::string as evm_contract_address,\n        value:decoded:contractName::string as contract_name,\n        value:decoded:eventName::string as event_name,\n        value:decoded:inputs as event_inputs,\n        value:topics as topics,\n        value:data::string as data,\n        value:removed as event_removed\n    from logs_raw,\n    lateral flatten ( input => full_logs )\n),\n\nfinal as (\n    select\n        concat_ws('-', tx_hash, event_index) as log_id,\n        *\n    from logs\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.logs"}, "model.harmony.transfers": {"raw_sql": "{{ \n    config(\n        materialized='incremental', \n        unique_key= 'log_id',\n        incremental_strategy = 'delete+insert',\n        tags=['core'],\n        cluster_by = ['block_timestamp']\n    ) \n}}\n\nwith logs as (\n    select \n        log_id,\n        block_id,\n        block_timestamp,\n        ingested_at,\n        tx_hash,\n        evm_contract_address, \n        event_name, \n        event_inputs\n    from {{ ref('logs') }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\ntransfers as (\n    select\n        log_id,\n        block_id,\n        tx_hash,\n        block_timestamp,\n        ingested_at,\n        evm_contract_address::string as contract_address,\n        event_inputs:from::string as from_address,\n        event_inputs:to::string as to_address,\n        event_inputs:value::float as raw_amount\n    from logs\n    where event_name = 'Transfer'\n    and raw_amount is not null\n)\n\nselect * from transfers", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "log_id", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "core", "transfers"], "unique_id": "model.harmony.transfers", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "core/transfers.sql", "original_file_path": "models/core/transfers.sql", "name": "transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "dc6f7c426dcc507710caeefb7a7a0707d2a637116368fca77be1616bce480f9a"}, "tags": ["core"], "refs": [["logs"]], "sources": [], "description": "Harmony transfer events.", "columns": {"log_id": {"name": "log_id", "description": "Log identifier composed of tx_hash-event_index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The block ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "The transaction hash.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "The address of the transferred token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_address": {"name": "from_address", "description": "The address sent the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_address": {"name": "to_address", "description": "The address received the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "raw_amount": {"name": "raw_amount", "description": "The token's raw amount.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/core/transfers.yml", "compiled_path": "target/compiled/harmony/models/core/transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "incremental", "unique_key": "log_id", "incremental_strategy": "delete+insert", "tags": ["core"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.386612, "compiled_sql": "\n\nwith logs as (\n    select \n        log_id,\n        block_id,\n        block_timestamp,\n        ingested_at,\n        tx_hash,\n        evm_contract_address, \n        event_name, \n        event_inputs\n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.transfers\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.transfers)\n),\n\ntransfers as (\n    select\n        log_id,\n        block_id,\n        tx_hash,\n        block_timestamp,\n        ingested_at,\n        evm_contract_address::string as contract_address,\n        event_inputs:from::string as from_address,\n        event_inputs:to::string as to_address,\n        event_inputs:value::float as raw_amount\n    from logs\n    where event_name = 'Transfer'\n    and raw_amount is not null\n)\n\nselect * from transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.transfers"}, "model.harmony.txs": {"raw_sql": "{{ \n     config(\n         materialized = 'incremental',\n         unique_key = 'tx_hash',\n         tags = ['core'],\n         cluster_by = ['block_timestamp']\n     ) \n}}\n\nwith base_txs as (\n    select\n        *\n    from {{ ref(\"stg_txs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nfinal as (\n    select\n        block_timestamp,\n        ingested_at,\n        tx:nonce::string as nonce,\n        tx_block_index as index,\n        tx:bech32_from::string as native_from_address,\n        tx:bech32_to::string as native_to_address,\n        tx:from::string as from_address,\n        tx:to::string as to_address,\n        tx:value as value,\n        tx:block_number as block_number,\n        tx:block_hash::string as block_hash,\n        tx:gas_price as gas_price,\n        tx:gas as gas,\n        tx_id as tx_hash,\n        tx:input::string as data,\n        tx:receipt:status::string = '0x1'  as status\n    from base_txs\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.stg_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "tx_hash", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "core", "txs"], "unique_id": "model.harmony.txs", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "core/txs.sql", "original_file_path": "models/core/txs.sql", "name": "txs", "alias": "txs", "checksum": {"name": "sha256", "checksum": "f9199064b0eecfbde1099ef48cef182e7bfe0e789c9a61bfd763bbb2558af306"}, "tags": ["core"], "refs": [["stg_txs"]], "sources": [], "description": "This table records all the transactions of the Harmony blockchain.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "The time when the block was mined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nonce": {"name": "nonce", "description": "The number of transactions made by the sender prior to this one.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Integer of the transactions index position in the block. `null` when its pending.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "native_from_address": {"name": "native_from_address", "description": "Native Harmony address of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "native_to_address": {"name": "native_to_address", "description": "Native Harmony address of the receiver.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_address": {"name": "from_address", "description": "The Ethereum address of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_address": {"name": "to_address", "description": "The Ethereum address of the receiver.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The value transfered in ATTO format (a factor of 10^18).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_number": {"name": "block_number", "description": "Block number where this transaction was in. `null` when it's pending.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_hash": {"name": "block_hash", "description": "Hash of the block where this transaction was in. `null` when it's pending.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_price": {"name": "gas_price", "description": "Gas price provided by the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas": {"name": "gas", "description": "Gas provided by the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "The Ethereum hash of the transaction which is the primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data": {"name": "data", "description": "Bytecode of the data sent along with the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Boolean representing whether the transaction is successful or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/core/txs.yml", "compiled_path": "target/compiled/harmony/models/core/txs.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "incremental", "unique_key": "tx_hash", "tags": ["core"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.3970828, "compiled_sql": "\n\nwith base_txs as (\n    select\n        *\n    from HARMONY.DEV.stg_txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.txs\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.txs)\n),\n\nfinal as (\n    select\n        block_timestamp,\n        ingested_at,\n        tx:nonce::string as nonce,\n        tx_block_index as index,\n        tx:bech32_from::string as native_from_address,\n        tx:bech32_to::string as native_to_address,\n        tx:from::string as from_address,\n        tx:to::string as to_address,\n        tx:value as value,\n        tx:block_number as block_number,\n        tx:block_hash::string as block_hash,\n        tx:gas_price as gas_price,\n        tx:gas as gas,\n        tx_id as tx_hash,\n        tx:input::string as data,\n        tx:receipt:status::string = '0x1'  as status\n    from base_txs\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.txs"}, "model.harmony.btc_bridge": {"raw_sql": "{{ \n    config(\n        materialized='incremental', \n        unique_key= 'log_id',\n        incremental_strategy = 'delete+insert',\n        tags=['core'],\n        cluster_by = ['block_timestamp']\n    ) \n}}\n\nwith logs as (\n    select\n        *\n    from {{ ref('logs') }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nvaults as (\n    select distinct \n        event_inputs:_to::string as vault_address\n    from logs\n    where evm_contract_address = '0xdc54046c0451f9269fee1840aec808d36015697d' -- HMY_ONE_BTC_CONTRACT\n        and event_name = 'IssueTokens'\n),\ntransfers as (\n    select\n        *\n    from  {{ ref('transfers') }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\nfinal as (\n  select \n    t.log_id,\n    t.block_id,\n    t.tx_hash,\n    t.block_timestamp,\n    t.ingested_at,\n    t.contract_address,\n    t.from_address,\n    t.to_address,\n    case \n      when t.from_address = '0x0000000000000000000000000000000000000000' then 'issue'\n      when t.to_address = '0x0000000000000000000000000000000000000000' then 'redeem'\n    end as tx_type,\n    v.vault_address is not null as is_vault,\n    t.raw_amount\n  from transfers as t \n  left join vaults as v \n    on t.to_address = v.vault_address\n  where \n    t.contract_address = '0xdc54046c0451f9269fee1840aec808d36015697d' -- HMY_ONE_BTC_CONTRACT\n    and (t.from_address = '0x0000000000000000000000000000000000000000'  -- issue\n        or t.to_address = '0x0000000000000000000000000000000000000000') -- redeem\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.logs", "model.harmony.transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "log_id", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "core", "btc_bridge"], "unique_id": "model.harmony.btc_bridge", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "core/btc_bridge.sql", "original_file_path": "models/core/btc_bridge.sql", "name": "btc_bridge", "alias": "btc_bridge", "checksum": {"name": "sha256", "checksum": "73644fa845f147e23ddf3460897acaef0db53e3d8de0a2734f140070c8477d95"}, "tags": ["core"], "refs": [["logs"], ["transfers"]], "sources": [], "description": "\"This table records BTC bridging activites to and out of Harmony.\"\n\n### Example Queries\n```sql\n-- To find out how much BTC bridged to Harmony in the last 7 days\nselect\n  sum(raw_amount)/1e8 as btc_amount\nfrom harmony.prod.btc_bridge\nwhere \n  block_timestamp > current_timestamp() - interval '7 days'\n  and tx_type = 'issue'\n```\n\n```sql\n-- To find out TVL of BTC on Harmony\nselect \n  sum(raw_amount)/1e8 as tvl\nfrom (\n    select\n      date_trunc('day', block_timestamp) as day,\n      tx_type,\n      case \n        when tx_type = 'redeem' then -1 * sum(raw_amount) \n        else sum(raw_amount) end as raw_amount\n    from harmony.dev.btc_bridge\n    group by 1, 2\n) as x \n```", "columns": {"log_id": {"name": "log_id", "description": "Log identifier composed of tx_hash-event_index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The block ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "The transaction hash.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "The address of the transferred token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_address": {"name": "from_address", "description": "The address sent the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_address": {"name": "to_address", "description": "The address received the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_type": {"name": "tx_type", "description": "The type of transaction, including `issue` or `redeem`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_vault": {"name": "is_vault", "description": "Whether the `to_address` that 1BTC token is issued to is a vault. This only applies to `issue` transaction type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "raw_amount": {"name": "raw_amount", "description": "The 1BTC token's raw amount.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/core/btc_bridge.yml", "compiled_path": "target/compiled/harmony/models/core/btc_bridge.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "incremental", "unique_key": "log_id", "incremental_strategy": "delete+insert", "tags": ["core"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.409873, "compiled_sql": "\n\nwith logs as (\n    select\n        *\n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.btc_bridge\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.btc_bridge)\n),\n\nvaults as (\n    select distinct \n        event_inputs:_to::string as vault_address\n    from logs\n    where evm_contract_address = '0xdc54046c0451f9269fee1840aec808d36015697d' -- HMY_ONE_BTC_CONTRACT\n        and event_name = 'IssueTokens'\n),\ntransfers as (\n    select\n        *\n    from  HARMONY.DEV.transfers\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.btc_bridge\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.btc_bridge)\n),\nfinal as (\n  select \n    t.log_id,\n    t.block_id,\n    t.tx_hash,\n    t.block_timestamp,\n    t.ingested_at,\n    t.contract_address,\n    t.from_address,\n    t.to_address,\n    case \n      when t.from_address = '0x0000000000000000000000000000000000000000' then 'issue'\n      when t.to_address = '0x0000000000000000000000000000000000000000' then 'redeem'\n    end as tx_type,\n    v.vault_address is not null as is_vault,\n    t.raw_amount\n  from transfers as t \n  left join vaults as v \n    on t.to_address = v.vault_address\n  where \n    t.contract_address = '0xdc54046c0451f9269fee1840aec808d36015697d' -- HMY_ONE_BTC_CONTRACT\n    and (t.from_address = '0x0000000000000000000000000000000000000000'  -- issue\n        or t.to_address = '0x0000000000000000000000000000000000000000') -- redeem\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.btc_bridge"}, "model.harmony.tranquil_daily_supply_borrow": {"raw_sql": "{{\n    config(\n        materialized='table',\n        unique_key=\"block_date||'-'||token_symbol\",\n        tags=['core', 'defi', 'amm', 'lending'],\n        cluster_by=['block_date', 'token_symbol']\n        )\n}}\n\nwith\n\ntranquil_markets_usd as (\n    select \n        token_symbol,\n        timestamp as block_date,\n        price\n    from {{ ref(\"tranquil_markets_tokenprice\") }}\n),\n\ntxns as (\n    select \n        date_trunc('day', block_timestamp) as block_date,\n        token_symbol,\n        tx_type,\n        sum(token_amount) as token_amount\n    from {{ ref(\"tranquil_txs\") }}\n    group by 1,2,3\n),\n\ntxns_typecols as (\n    select\n        m.*,\n        zeroifnull(t1.token_amount) as deposit_token_amt,\n        zeroifnull(t2.token_amount) as withdrawal_token_amt,\n        zeroifnull(t3.token_amount) as borrow_token_amt,\n        zeroifnull(t4.token_amount) as repayment_token_amt\n    from tranquil_markets_usd as m\n    left join txns t1 \n        on m.block_date = t1.block_date\n        and m.token_symbol = t1.token_symbol\n        and t1.tx_type = 'Deposit'\n    left join txns t2 \n        on m.block_date = t2.block_date\n        and m.token_symbol = t2.token_symbol\n        and t2.tx_type = 'Withdrawal'\n    left join txns t3\n        on m.block_date = t3.block_date\n        and m.token_symbol = t3.token_symbol\n        and t3.tx_type = 'Borrow'\n    left join txns t4\n        on m.block_date = t4.block_date\n        and m.token_symbol = t4.token_symbol\n        and t4.tx_type = 'Repayment'\n),\n\nbackfill_tvl as (\n\n    select \n        tml.token_symbol,\n        '2021-12-06 00:00:00.000' as block_date, -- Current HarmonyONE data begins 2021-12-07, so setting backfill date to the prior day\n        0 as price,\n        ( (l.event_inputs:cashPrior + l.event_inputs:totalBorrows) / pow(10,tml.decimals) ) as net_supplied_token_chg,\n        (l.event_inputs:totalBorrows / pow(10,tml.decimals) ) as net_borrowed_token_chg\n    from {{ ref(\"tranquil_market_labels\") }} as tml\n    left join {{ ref(\"logs\") }} as l \n        on tml.first_tx = l.tx_hash\n        and l.event_name = 'AccrueInterest'\n),\n\ndeltas as (\n    select \n        c.token_symbol,\n        c.block_date,\n        c.price,\n        (c.deposit_token_amt - c.withdrawal_token_amt) as net_supplied_token_chg,\n        (c.borrow_token_amt - c.repayment_token_amt) as net_borrowed_token_chg\n    from txns_typecols as c\n),\n\nadd_backfill as (\n    select * from deltas\n    union all\n    select * from backfill_tvl\n),\n\nrunning as (\n    select\n        c.*,\n        (\n            select sum(net_supplied_token_chg) \n                from add_backfill d\n                where c.token_symbol = d.token_symbol\n                    and c.block_date >= d.block_date\n        ) as running_total_supplied_token,\n        (\n            select sum(net_borrowed_token_chg) \n                from add_backfill d2\n                where c.token_symbol = d2.token_symbol\n                    and c.block_date >= d2.block_date\n        ) as running_total_borrowed_token\n    from add_backfill as c\n),\n\nfinal as (\n    select r.*,\n        (net_supplied_token_chg * price) as net_supplied_usd_chg,\n        (net_borrowed_token_chg * price) as net_borrowed_usd_chg,\n        (running_total_supplied_token * price) as running_total_supplied_usd,\n        (running_total_borrowed_token * price) as running_total_borrowed_usd\n    from running as r\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.tranquil_markets_tokenprice", "model.harmony.tranquil_txs", "seed.harmony.tranquil_market_labels", "model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "defi", "amm", "lending"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_date", "token_symbol"], "unique_key": "block_date||'-'||token_symbol", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tranquil", "tranquil_daily_supply_borrow"], "unique_id": "model.harmony.tranquil_daily_supply_borrow", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tranquil/tranquil_daily_supply_borrow.sql", "original_file_path": "models/tranquil/tranquil_daily_supply_borrow.sql", "name": "tranquil_daily_supply_borrow", "alias": "tranquil_daily_supply_borrow", "checksum": {"name": "sha256", "checksum": "06839e6b74fb17adad8c88c287942fe78c2fa066ebe12f23ce0e76371945f439"}, "tags": ["core", "defi", "amm", "lending"], "refs": [["tranquil_markets_tokenprice"], ["tranquil_txs"], ["tranquil_market_labels"], ["logs"]], "sources": [], "description": "Daily Supply and Borrow amounts and running totals in both token and USD denom for Tranquil Finance tokens", "columns": {"token_symbol": {"name": "token_symbol", "description": "Token Symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_date": {"name": "block_date", "description": "The price date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "The USD VWAP for the token derived from popular LPs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_supplied_token_chg": {"name": "net_supplied_token_chg", "description": "The total token deposits minus withdrawls for the day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_borrowed_token_chg": {"name": "net_borrowed_token_chg", "description": "The total token borrows minus repayments for the day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "running_total_supplied_token": {"name": "running_total_supplied_token", "description": "The historical running total of tokens supplied", "meta": {}, "data_type": null, "quote": null, "tags": []}, "running_total_borrowed_token": {"name": "running_total_borrowed_token", "description": "The historical running total of tokens borrowed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_supplied_usd_chg": {"name": "net_supplied_usd_chg", "description": "The total deposits minus withdrawls for the day in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_borrowed_usd_chg": {"name": "net_borrowed_usd_chg", "description": "The total borrows minus repayments for the day in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "running_total_supplied_usd": {"name": "running_total_supplied_usd", "description": "The historical running total of supplied in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "running_total_borrowed_usd": {"name": "running_total_borrowed_usd", "description": "The historical running total of borrowed in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tranquil/tranquil_daily_supply_borrow.yml", "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_daily_supply_borrow.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "table", "unique_key": "block_date||'-'||token_symbol", "tags": ["core", "defi", "amm", "lending"], "cluster_by": ["block_date", "token_symbol"]}, "created_at": 1652754672.45069, "compiled_sql": "\n\nwith\n\ntranquil_markets_usd as (\n    select \n        token_symbol,\n        timestamp as block_date,\n        price\n    from HARMONY.DEV.tranquil_markets_tokenprice\n),\n\ntxns as (\n    select \n        date_trunc('day', block_timestamp) as block_date,\n        token_symbol,\n        tx_type,\n        sum(token_amount) as token_amount\n    from HARMONY.DEV.tranquil_txs\n    group by 1,2,3\n),\n\ntxns_typecols as (\n    select\n        m.*,\n        zeroifnull(t1.token_amount) as deposit_token_amt,\n        zeroifnull(t2.token_amount) as withdrawal_token_amt,\n        zeroifnull(t3.token_amount) as borrow_token_amt,\n        zeroifnull(t4.token_amount) as repayment_token_amt\n    from tranquil_markets_usd as m\n    left join txns t1 \n        on m.block_date = t1.block_date\n        and m.token_symbol = t1.token_symbol\n        and t1.tx_type = 'Deposit'\n    left join txns t2 \n        on m.block_date = t2.block_date\n        and m.token_symbol = t2.token_symbol\n        and t2.tx_type = 'Withdrawal'\n    left join txns t3\n        on m.block_date = t3.block_date\n        and m.token_symbol = t3.token_symbol\n        and t3.tx_type = 'Borrow'\n    left join txns t4\n        on m.block_date = t4.block_date\n        and m.token_symbol = t4.token_symbol\n        and t4.tx_type = 'Repayment'\n),\n\nbackfill_tvl as (\n\n    select \n        tml.token_symbol,\n        '2021-12-06 00:00:00.000' as block_date, -- Current HarmonyONE data begins 2021-12-07, so setting backfill date to the prior day\n        0 as price,\n        ( (l.event_inputs:cashPrior + l.event_inputs:totalBorrows) / pow(10,tml.decimals) ) as net_supplied_token_chg,\n        (l.event_inputs:totalBorrows / pow(10,tml.decimals) ) as net_borrowed_token_chg\n    from HARMONY.DEV.tranquil_market_labels as tml\n    left join HARMONY.DEV.logs as l \n        on tml.first_tx = l.tx_hash\n        and l.event_name = 'AccrueInterest'\n),\n\ndeltas as (\n    select \n        c.token_symbol,\n        c.block_date,\n        c.price,\n        (c.deposit_token_amt - c.withdrawal_token_amt) as net_supplied_token_chg,\n        (c.borrow_token_amt - c.repayment_token_amt) as net_borrowed_token_chg\n    from txns_typecols as c\n),\n\nadd_backfill as (\n    select * from deltas\n    union all\n    select * from backfill_tvl\n),\n\nrunning as (\n    select\n        c.*,\n        (\n            select sum(net_supplied_token_chg) \n                from add_backfill d\n                where c.token_symbol = d.token_symbol\n                    and c.block_date >= d.block_date\n        ) as running_total_supplied_token,\n        (\n            select sum(net_borrowed_token_chg) \n                from add_backfill d2\n                where c.token_symbol = d2.token_symbol\n                    and c.block_date >= d2.block_date\n        ) as running_total_borrowed_token\n    from add_backfill as c\n),\n\nfinal as (\n    select r.*,\n        (net_supplied_token_chg * price) as net_supplied_usd_chg,\n        (net_borrowed_token_chg * price) as net_borrowed_usd_chg,\n        (running_total_supplied_token * price) as running_total_supplied_usd,\n        (running_total_borrowed_token * price) as running_total_borrowed_usd\n    from running as r\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tranquil_daily_supply_borrow"}, "model.harmony.tranquil_markets_tokenprice": {"raw_sql": "{{\n    config(\n        materialized='table',\n        unique_key=\"token_symbol||'-'||timestamp\",\n        tags=['core', 'defi', 'amm', 'lending']\n        )\n}}\n\n\nwith\nfinal as (  \n    select 'ONE' as token_symbol, * from {{ ref(\"tokenprice_one\") }}\n    union all\n    select 'stONE' as token_symbol, * from {{ ref(\"tokenprice_stone\") }}\n    union all\n    select '1WBTC' as token_symbol, * from {{ ref(\"tokenprice_btc\") }}\n    union all\n    select '1BTC' as token_symbol, * from {{ ref(\"tokenprice_btc\") }}\n    union all\n    select '1ETH' as token_symbol, * from {{ ref(\"tokenprice_eth\") }}\n    union all\n    select '1USDC' as token_symbol, * from {{ ref(\"tokenprice_usd\") }}\n    union all\n    select '1USDT' as token_symbol, * from {{ ref(\"tokenprice_usd\") }}\n    union all\n    select '1DAI' as token_symbol, * from {{ ref(\"tokenprice_usd\") }}\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.tokenprice_one", "model.harmony.tokenprice_stone", "model.harmony.tokenprice_btc", "model.harmony.tokenprice_btc", "model.harmony.tokenprice_eth", "model.harmony.tokenprice_usd", "model.harmony.tokenprice_usd", "model.harmony.tokenprice_usd"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "defi", "amm", "lending"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "unique_key": "token_symbol||'-'||timestamp", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tranquil", "tranquil_markets_tokenprice"], "unique_id": "model.harmony.tranquil_markets_tokenprice", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tranquil/tranquil_markets_tokenprice.sql", "original_file_path": "models/tranquil/tranquil_markets_tokenprice.sql", "name": "tranquil_markets_tokenprice", "alias": "tranquil_markets_tokenprice", "checksum": {"name": "sha256", "checksum": "4f992a9990fd1d64bc7524d8aee5281381cb036337d4df0cdf82e8015a6ba6f3"}, "tags": ["core", "defi", "amm", "lending"], "refs": [["tokenprice_one"], ["tokenprice_stone"], ["tokenprice_btc"], ["tokenprice_btc"], ["tokenprice_eth"], ["tokenprice_usd"], ["tokenprice_usd"], ["tokenprice_usd"]], "sources": [], "description": "Daily USD prices for Tranquil Finance tokens", "columns": {"token_symbol": {"name": "token_symbol", "description": "Token Symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The price date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "The USD VWAP for the token derived from popular LPs.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tranquil/tranquil_markets_tokenprice.yml", "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_markets_tokenprice.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "table", "unique_key": "token_symbol||'-'||timestamp", "tags": ["core", "defi", "amm", "lending"]}, "created_at": 1652754672.454216, "compiled_sql": "\n\n\nwith\nfinal as (  \n    select 'ONE' as token_symbol, * from HARMONY.DEV.tokenprice_one\n    union all\n    select 'stONE' as token_symbol, * from HARMONY.DEV.tokenprice_stone\n    union all\n    select '1WBTC' as token_symbol, * from HARMONY.DEV.tokenprice_btc\n    union all\n    select '1BTC' as token_symbol, * from HARMONY.DEV.tokenprice_btc\n    union all\n    select '1ETH' as token_symbol, * from HARMONY.DEV.tokenprice_eth\n    union all\n    select '1USDC' as token_symbol, * from HARMONY.DEV.tokenprice_usd\n    union all\n    select '1USDT' as token_symbol, * from HARMONY.DEV.tokenprice_usd\n    union all\n    select '1DAI' as token_symbol, * from HARMONY.DEV.tokenprice_usd\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tranquil_markets_tokenprice"}, "model.harmony.tranquil_txs": {"raw_sql": "{{\n    config(\n        materialized='table',\n        unique_key='log_id',\n        tags=['core', 'defi', 'amm', 'lending']\n        )\n}}\n\nwith\n\ntranquil_market_labels as (\n    select\n        *\n    from {{ ref('tranquil_market_labels') }}\n),\n\n-- Tranquil contracts all have the same \"Creator\" or admin address\ntranquil_contracts as (\n    select distinct\n        evm_contract_address\n    from logs \n    where event_inputs:admin::string = '0x15424ab0bbab79bad32ce779197748485b5ae456'\n), \n\ntranquil_markets_usd as (  \n    select\n        *\n    from {{ ref('tranquil_markets_tokenprice') }}\n),\n\ntranquil_deposits as (\n    select \n        logs.log_id,\n        logs.tx_hash,\n        block_timestamp,\n        block_id,\n        event_inputs:minter::string as user_address,\n        logs.evm_contract_address,\n        tml.token_symbol,\n        (event_inputs:mintAmount::number) as token_amount_raw,\n        (event_inputs:mintAmount::number / pow(10, tml.decimals)) as token_amount,\n        'Deposit' as tx_type\n    from logs \n    inner join tranquil_contracts as tc \n        on logs.evm_contract_address = tc.evm_contract_address\n    left join tranquil_market_labels as tml\n        on logs.evm_contract_address = tml.token_address\n    where logs.event_name = 'Mint'\n),\n\ntranquil_borrows as (\n    select \n        logs.log_id,\n        logs.tx_hash,\n        block_timestamp,\n        block_id,\n        event_inputs:borrower::string as user_address,\n        logs.evm_contract_address,\n        tml.token_symbol,\n        (event_inputs:borrowAmount::number) as token_amount_raw,\n        (event_inputs:borrowAmount::number / pow(10, tml.decimals)) as token_amount,\n        'Borrow' as tx_type\n    from logs \n    inner join tranquil_contracts as tc \n        on logs.evm_contract_address = tc.evm_contract_address\n    left join tranquil_market_labels as tml\n        on logs.evm_contract_address = tml.token_address\n    where logs.event_name = 'Borrow'\n),\n\ntranquil_repayments as (\n    select \n        logs.log_id,\n        logs.tx_hash,\n        block_timestamp,\n        block_id,\n        event_inputs:borrower::string as user_address,\n        logs.evm_contract_address,\n        tml.token_symbol,\n        (event_inputs:repayAmount::number) as token_amount_raw,\n        (event_inputs:repayAmount::number / pow(10, tml.decimals)) as token_amount,\n        'Repayment' as tx_type\n    from logs \n    inner join tranquil_contracts as tc \n        on logs.evm_contract_address = tc.evm_contract_address\n    left join tranquil_market_labels as tml\n        on logs.evm_contract_address = tml.token_address\n    where logs.event_name = 'RepayBorrow'\n),\n\ntranquil_withdrawals as (\n    select \n        logs.log_id,\n        logs.tx_hash,\n        block_timestamp,\n        block_id,\n        event_inputs:redeemer::string as user_address,\n        logs.evm_contract_address,\n        tml.token_symbol,\n        (event_inputs:redeemAmount::number) as token_amount_raw,\n        (event_inputs:redeemAmount::number / pow(10, tml.decimals)) as token_amount,\n        'Withdrawal' as tx_type\n    from logs \n    inner join tranquil_contracts as tc \n        on logs.evm_contract_address = tc.evm_contract_address\n    left join tranquil_market_labels as tml\n        on logs.evm_contract_address = tml.token_address\n    where logs.event_name = 'Redeem'\n),\n\ncombined as (\n    select * from tranquil_deposits\n    union all\n    select * from tranquil_borrows\n    union all\n    select * from tranquil_repayments\n    union all\n    select * from tranquil_withdrawals\n),\n\nfinal as (\n    select \n        c.*,\n        (usd.price * c.token_amount) as amount_usd\n    from combined as c\n    left join tranquil_markets_usd usd \n        on date_trunc('day', c.block_timestamp) = usd.timestamp\n        and c.token_symbol = usd.token_symbol\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.grant_data_share_statements"], "nodes": ["seed.harmony.tranquil_market_labels", "model.harmony.tranquil_markets_tokenprice"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "defi", "amm", "lending"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "unique_key": "log_id", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tranquil", "tranquil_txs"], "unique_id": "model.harmony.tranquil_txs", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tranquil/tranquil_txs.sql", "original_file_path": "models/tranquil/tranquil_txs.sql", "name": "tranquil_txs", "alias": "tranquil_txs", "checksum": {"name": "sha256", "checksum": "47b1d986dbae90a63af85120a28a093caf6e64ad33ae1e58a6315f62ad03c973"}, "tags": ["core", "defi", "amm", "lending"], "refs": [["tranquil_market_labels"], ["tranquil_markets_tokenprice"]], "sources": [], "description": "Tranquil Finance Transactions", "columns": {"log_id": {"name": "log_id", "description": "The Harmony log ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "The Harmony transaction hash.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp for when the block was collated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The block number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_address": {"name": "user_address", "description": "The account which deposited to Tranquil.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evm_contract_address": {"name": "evm_contract_address", "description": "The contract that handles the token on Tranquil.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_symbol": {"name": "token_symbol", "description": "The token's symbol (e.g stONE).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_amount_raw": {"name": "token_amount_raw", "description": "The raw (integer) amount of tokens transacted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_amount": {"name": "token_amount", "description": "The amount of tokens transacted, adjusted for the specific token's decimals.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_usd": {"name": "amount_usd", "description": "The transaction value converted to usd (approx)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_type": {"name": "tx_type", "description": "The Tranquil transaction type (Deposit, Withdraw, Borrow, Repay)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tranquil/tranquil_txs.yml", "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_txs.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "table", "unique_key": "log_id", "tags": ["core", "defi", "amm", "lending"]}, "created_at": 1652754672.4587572, "compiled_sql": "\n\nwith\n\ntranquil_market_labels as (\n    select\n        *\n    from HARMONY.DEV.tranquil_market_labels\n),\n\n-- Tranquil contracts all have the same \"Creator\" or admin address\ntranquil_contracts as (\n    select distinct\n        evm_contract_address\n    from logs \n    where event_inputs:admin::string = '0x15424ab0bbab79bad32ce779197748485b5ae456'\n), \n\ntranquil_markets_usd as (  \n    select\n        *\n    from HARMONY.DEV.tranquil_markets_tokenprice\n),\n\ntranquil_deposits as (\n    select \n        logs.log_id,\n        logs.tx_hash,\n        block_timestamp,\n        block_id,\n        event_inputs:minter::string as user_address,\n        logs.evm_contract_address,\n        tml.token_symbol,\n        (event_inputs:mintAmount::number) as token_amount_raw,\n        (event_inputs:mintAmount::number / pow(10, tml.decimals)) as token_amount,\n        'Deposit' as tx_type\n    from logs \n    inner join tranquil_contracts as tc \n        on logs.evm_contract_address = tc.evm_contract_address\n    left join tranquil_market_labels as tml\n        on logs.evm_contract_address = tml.token_address\n    where logs.event_name = 'Mint'\n),\n\ntranquil_borrows as (\n    select \n        logs.log_id,\n        logs.tx_hash,\n        block_timestamp,\n        block_id,\n        event_inputs:borrower::string as user_address,\n        logs.evm_contract_address,\n        tml.token_symbol,\n        (event_inputs:borrowAmount::number) as token_amount_raw,\n        (event_inputs:borrowAmount::number / pow(10, tml.decimals)) as token_amount,\n        'Borrow' as tx_type\n    from logs \n    inner join tranquil_contracts as tc \n        on logs.evm_contract_address = tc.evm_contract_address\n    left join tranquil_market_labels as tml\n        on logs.evm_contract_address = tml.token_address\n    where logs.event_name = 'Borrow'\n),\n\ntranquil_repayments as (\n    select \n        logs.log_id,\n        logs.tx_hash,\n        block_timestamp,\n        block_id,\n        event_inputs:borrower::string as user_address,\n        logs.evm_contract_address,\n        tml.token_symbol,\n        (event_inputs:repayAmount::number) as token_amount_raw,\n        (event_inputs:repayAmount::number / pow(10, tml.decimals)) as token_amount,\n        'Repayment' as tx_type\n    from logs \n    inner join tranquil_contracts as tc \n        on logs.evm_contract_address = tc.evm_contract_address\n    left join tranquil_market_labels as tml\n        on logs.evm_contract_address = tml.token_address\n    where logs.event_name = 'RepayBorrow'\n),\n\ntranquil_withdrawals as (\n    select \n        logs.log_id,\n        logs.tx_hash,\n        block_timestamp,\n        block_id,\n        event_inputs:redeemer::string as user_address,\n        logs.evm_contract_address,\n        tml.token_symbol,\n        (event_inputs:redeemAmount::number) as token_amount_raw,\n        (event_inputs:redeemAmount::number / pow(10, tml.decimals)) as token_amount,\n        'Withdrawal' as tx_type\n    from logs \n    inner join tranquil_contracts as tc \n        on logs.evm_contract_address = tc.evm_contract_address\n    left join tranquil_market_labels as tml\n        on logs.evm_contract_address = tml.token_address\n    where logs.event_name = 'Redeem'\n),\n\ncombined as (\n    select * from tranquil_deposits\n    union all\n    select * from tranquil_borrows\n    union all\n    select * from tranquil_repayments\n    union all\n    select * from tranquil_withdrawals\n),\n\nfinal as (\n    select \n        c.*,\n        (usd.price * c.token_amount) as amount_usd\n    from combined as c\n    left join tranquil_markets_usd usd \n        on date_trunc('day', c.block_timestamp) = usd.timestamp\n        and c.token_symbol = usd.token_symbol\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tranquil_txs"}, "model.harmony.tokenprice_gaiatear": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key = 'timestamp',\n        incremental_strategy = 'delete+insert',\n        tags=['tokenprice'],\n        cluster_by=['timestamp']\n    )\n}}\n\nwith\n\njewel_price as (\n    select\n        *\n    from {{ ref(\"tokenprice_jewel\") }}\n    where {{ incremental_last_x_days(\"timestamp\", 3) }}\n),\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from {{ ref('logs') }}\n    where topics[0] = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' -- Swap\n        and evm_contract_address = '0xc79245ba0248abe8a385d588c0a9d3db261b453c' -- DFKTEARS-JEWEL Pool\n        and {{ incremental_last_x_days(\"block_timestamp\", 3) }}\n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token denom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        ( ( sum1in + sum1out ) / (sum0in + sum0out) ) * pow(10,-18) * jewel_price.price as price\n    from daily_trades\n    left join jewel_price\n        on date(jewel_price.timestamp) = (daily_trades.day_date)\n),\n\ncombine as (\n\n    select \n        *\n    from daily_trades_prices\n\n),\n\nfinal as (\n\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_last_x_days", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.tokenprice_jewel", "model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["tokenprice"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["timestamp"], "unique_key": "timestamp", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tokenprice", "tokenprice_gaiatear"], "unique_id": "model.harmony.tokenprice_gaiatear", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tokenprice/tokenprice_gaiatear.sql", "original_file_path": "models/tokenprice/tokenprice_gaiatear.sql", "name": "tokenprice_gaiatear", "alias": "tokenprice_gaiatear", "checksum": {"name": "sha256", "checksum": "24f7f4e5a676adb3f3b249df6b4b0d7d3c7d76e0eef7d4d58a772c94103b220a"}, "tags": ["tokenprice"], "refs": [["tokenprice_jewel"], ["logs"]], "sources": [], "description": "GAIATEAR price in USD", "columns": {"timestamp": {"name": "timestamp", "description": "daily timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "price in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tokenprice/tokenprice_gaiatear.yml", "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_gaiatear.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "timestamp", "incremental_strategy": "delete+insert", "tags": ["tokenprice"], "cluster_by": ["timestamp"]}, "created_at": 1652754672.480382, "compiled_sql": "\n\nwith\n\njewel_price as (\n    select\n        *\n    from HARMONY.DEV.tokenprice_jewel\n    where \n        timestamp >= current_date() - interval '3 day'\n    \n),\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from HARMONY.DEV.logs\n    where topics[0] = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' -- Swap\n        and evm_contract_address = '0xc79245ba0248abe8a385d588c0a9d3db261b453c' -- DFKTEARS-JEWEL Pool\n        and \n        block_timestamp >= current_date() - interval '3 day'\n    \n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token denom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        ( ( sum1in + sum1out ) / (sum0in + sum0out) ) * pow(10,-18) * jewel_price.price as price\n    from daily_trades\n    left join jewel_price\n        on date(jewel_price.timestamp) = (daily_trades.day_date)\n),\n\ncombine as (\n\n    select \n        *\n    from daily_trades_prices\n\n),\n\nfinal as (\n\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tokenprice_gaiatear"}, "model.harmony.tokenprice_shvasrune": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key = 'timestamp',\n        incremental_strategy = 'delete+insert',\n        tags=['tokenprice'],\n        cluster_by=['timestamp']\n    )\n}}\n\nwith\n\njewel_price as (\n    select\n        *\n    from {{ ref(\"tokenprice_jewel\") }}\n    where {{ incremental_last_x_days(\"timestamp\", 3) }}\n),\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from {{ ref('logs') }}\n    where topics[0] = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' -- Swap\n        and evm_contract_address = '0xb270556714136049b27485f1aa8089b10f6f7f57' -- SHVARUNE-JEWEL Pool\n        and {{ incremental_last_x_days(\"block_timestamp\", 3) }}\n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        ( (sum1in + sum1out) / (sum0in + sum0out) ) * pow(10,-18) * jewel_price.price as price\n    from daily_trades\n    left join jewel_price \n        on date(jewel_price.timestamp) = date(daily_trades.day_date)\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_last_x_days", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.tokenprice_jewel", "model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["tokenprice"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["timestamp"], "unique_key": "timestamp", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tokenprice", "tokenprice_shvasrune"], "unique_id": "model.harmony.tokenprice_shvasrune", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tokenprice/tokenprice_shvasrune.sql", "original_file_path": "models/tokenprice/tokenprice_shvasrune.sql", "name": "tokenprice_shvasrune", "alias": "tokenprice_shvasrune", "checksum": {"name": "sha256", "checksum": "36c23a7b5ae5497d88bfb319ef7995788ed411100d2ee461f66b00ea34e4b70a"}, "tags": ["tokenprice"], "refs": [["tokenprice_jewel"], ["logs"]], "sources": [], "description": "SHVASRUNE price in USD", "columns": {"timestamp": {"name": "timestamp", "description": "daily timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "price in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tokenprice/tokenprice_shvasrune.yml", "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_shvasrune.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "timestamp", "incremental_strategy": "delete+insert", "tags": ["tokenprice"], "cluster_by": ["timestamp"]}, "created_at": 1652754672.4833732, "compiled_sql": "\n\nwith\n\njewel_price as (\n    select\n        *\n    from HARMONY.DEV.tokenprice_jewel\n    where \n        timestamp >= current_date() - interval '3 day'\n    \n),\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from HARMONY.DEV.logs\n    where topics[0] = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' -- Swap\n        and evm_contract_address = '0xb270556714136049b27485f1aa8089b10f6f7f57' -- SHVARUNE-JEWEL Pool\n        and \n        block_timestamp >= current_date() - interval '3 day'\n    \n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        ( (sum1in + sum1out) / (sum0in + sum0out) ) * pow(10,-18) * jewel_price.price as price\n    from daily_trades\n    left join jewel_price \n        on date(jewel_price.timestamp) = date(daily_trades.day_date)\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tokenprice_shvasrune"}, "model.harmony.tokenprice_eth": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key = 'timestamp',\n        incremental_strategy = 'delete+insert',\n        tags=['tokenprice'],\n        cluster_by=['timestamp']\n    )\n}}\n\nwith\n\njewel_price as (\n    select\n        *\n    from {{ ref(\"tokenprice_jewel\") }}\n    where {{ incremental_last_x_days(\"timestamp\", 3) }}\n),\n\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from {{ ref('logs') }}\n    where event_name = 'Swap' -- Swap\n        and evm_contract_address = '0xeab84868f6c8569e14263a5326ecd62f5328a70f' -- 1ETH/JEWEL DfK Pool\n        and {{ incremental_last_x_days(\"block_timestamp\", 3) }}\n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        (  (sum1in + sum1out) / (sum0in + sum0out) ) * jewel_price.price as price\n    from daily_trades\n    left join jewel_price\n        on jewel_price.timestamp = daily_trades.day_date\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_last_x_days", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.tokenprice_jewel", "model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["tokenprice"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["timestamp"], "unique_key": "timestamp", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tokenprice", "tokenprice_eth"], "unique_id": "model.harmony.tokenprice_eth", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tokenprice/tokenprice_eth.sql", "original_file_path": "models/tokenprice/tokenprice_eth.sql", "name": "tokenprice_eth", "alias": "tokenprice_eth", "checksum": {"name": "sha256", "checksum": "534f0a72195360c1cb53405e10c6b740fe43308dcbcb5cbe24e2de182fdb1387"}, "tags": ["tokenprice"], "refs": [["tokenprice_jewel"], ["logs"]], "sources": [], "description": "1ETH price in USD", "columns": {"timestamp": {"name": "timestamp", "description": "daily timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "price in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tokenprice/tokenprice_eth.yml", "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_eth.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "timestamp", "incremental_strategy": "delete+insert", "tags": ["tokenprice"], "cluster_by": ["timestamp"]}, "created_at": 1652754672.4681332, "compiled_sql": "\n\nwith\n\njewel_price as (\n    select\n        *\n    from HARMONY.DEV.tokenprice_jewel\n    where \n        timestamp >= current_date() - interval '3 day'\n    \n),\n\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from HARMONY.DEV.logs\n    where event_name = 'Swap' -- Swap\n        and evm_contract_address = '0xeab84868f6c8569e14263a5326ecd62f5328a70f' -- 1ETH/JEWEL DfK Pool\n        and \n        block_timestamp >= current_date() - interval '3 day'\n    \n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        (  (sum1in + sum1out) / (sum0in + sum0out) ) * jewel_price.price as price\n    from daily_trades\n    left join jewel_price\n        on jewel_price.timestamp = daily_trades.day_date\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tokenprice_eth"}, "model.harmony.tokenprice_stone": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key = 'timestamp',\n        incremental_strategy = 'delete+insert',\n        tags=['tokenprice'],\n        cluster_by=['timestamp']\n    )\n}}\n\nwith\n\none_price as (\n    select\n        *\n    from {{ ref(\"tokenprice_one\") }}\n    where {{ incremental_last_x_days(\"timestamp\", 3) }}\n),\n\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from {{ ref('logs') }}\n    where event_name = 'Swap' -- Swap\n        and evm_contract_address = '0x6b53ca1ed597ed7ccd5664ec9e03329992c2ba87' -- stONE/WONE SushiSwap Pool\n        and {{ incremental_last_x_days(\"block_timestamp\", 3) }}\n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        ( (sum0in + sum0out) / (sum1in + sum1out) ) * one_price.price as price\n    from daily_trades\n    left join one_price\n        on one_price.timestamp = daily_trades.day_date\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_last_x_days", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.tokenprice_one", "model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["tokenprice"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["timestamp"], "unique_key": "timestamp", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tokenprice", "tokenprice_stone"], "unique_id": "model.harmony.tokenprice_stone", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tokenprice/tokenprice_stone.sql", "original_file_path": "models/tokenprice/tokenprice_stone.sql", "name": "tokenprice_stone", "alias": "tokenprice_stone", "checksum": {"name": "sha256", "checksum": "be43e3192f4fdaa06ca00fdaf508181ab4d9145f9654614bf227da73f6459dfc"}, "tags": ["tokenprice"], "refs": [["tokenprice_one"], ["logs"]], "sources": [], "description": "stONE price in USD", "columns": {"timestamp": {"name": "timestamp", "description": "daily timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "price in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tokenprice/tokenprice_stone.yml", "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_stone.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "timestamp", "incremental_strategy": "delete+insert", "tags": ["tokenprice"], "cluster_by": ["timestamp"]}, "created_at": 1652754672.471196, "compiled_sql": "\n\nwith\n\none_price as (\n    select\n        *\n    from HARMONY.DEV.tokenprice_one\n    where \n        timestamp >= current_date() - interval '3 day'\n    \n),\n\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from HARMONY.DEV.logs\n    where event_name = 'Swap' -- Swap\n        and evm_contract_address = '0x6b53ca1ed597ed7ccd5664ec9e03329992c2ba87' -- stONE/WONE SushiSwap Pool\n        and \n        block_timestamp >= current_date() - interval '3 day'\n    \n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        ( (sum0in + sum0out) / (sum1in + sum1out) ) * one_price.price as price\n    from daily_trades\n    left join one_price\n        on one_price.timestamp = daily_trades.day_date\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tokenprice_stone"}, "model.harmony.tokenprice_usd": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key = 'timestamp',\n        incremental_strategy = 'delete+insert',\n        tags=['tokenprice'],\n        cluster_by=['timestamp']\n    )\n}}\n\nwith\n\n-- faux table to match other market pricing lookups\nfinal as (\n    select \n        timestamp,\n        1 as price\n    from tokenprice_one\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["tokenprice"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["timestamp"], "unique_key": "timestamp", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tokenprice", "tokenprice_usd"], "unique_id": "model.harmony.tokenprice_usd", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tokenprice/tokenprice_usd.sql", "original_file_path": "models/tokenprice/tokenprice_usd.sql", "name": "tokenprice_usd", "alias": "tokenprice_usd", "checksum": {"name": "sha256", "checksum": "636c3034e46bb579fd8455bdf69d86eda70f5432e7911f64f0f81cae13c6652c"}, "tags": ["tokenprice"], "refs": [], "sources": [], "description": "Faux Pricing - always 1 USD", "columns": {"timestamp": {"name": "timestamp", "description": "daily timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "price in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tokenprice/tokenprice_usd.yml", "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "timestamp", "incremental_strategy": "delete+insert", "tags": ["tokenprice"], "cluster_by": ["timestamp"]}, "created_at": 1652754672.474237, "compiled_sql": "\n\nwith\n\n-- faux table to match other market pricing lookups\nfinal as (\n    select \n        timestamp,\n        1 as price\n    from tokenprice_one\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tokenprice_usd"}, "model.harmony.tokenprice_dfkgold": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key = 'timestamp',\n        incremental_strategy = 'delete+insert',\n        tags=['tokenprice'],\n        cluster_by=['timestamp']\n    )\n}}\n\nwith\n\njewel_price as (\n    select\n        *\n    from {{ ref(\"tokenprice_jewel\") }}\n    where {{ incremental_last_x_days(\"timestamp\", 3) }}\n),\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from {{ ref('logs') }}\n    where topics[0] = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' -- Swap\n        and evm_contract_address = '0x321eafb0aed358966a90513290de99763946a54b' -- gold/jewel Pool\n        and {{ incremental_last_x_days(\"block_timestamp\", 3) }}\n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        ( (sum1in + sum1out) / (sum0in + sum0out) ) * pow(10,-15) * jewel_price.price as price\n    from daily_trades\n    left join jewel_price\n        on date(jewel_price.timestamp) = date(daily_trades.day_date)\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_last_x_days", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.tokenprice_jewel", "model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["tokenprice"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["timestamp"], "unique_key": "timestamp", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tokenprice", "tokenprice_dfkgold"], "unique_id": "model.harmony.tokenprice_dfkgold", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tokenprice/tokenprice_dfkgold.sql", "original_file_path": "models/tokenprice/tokenprice_dfkgold.sql", "name": "tokenprice_dfkgold", "alias": "tokenprice_dfkgold", "checksum": {"name": "sha256", "checksum": "9266ec1a4bd7691dc0ea3117504421fd40862084f1a9782a7896cf292cc155bd"}, "tags": ["tokenprice"], "refs": [["tokenprice_jewel"], ["logs"]], "sources": [], "description": "DFKGOLD price in USD", "columns": {"timestamp": {"name": "timestamp", "description": "daily timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "price in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tokenprice/tokenprice_dfkgold.yml", "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_dfkgold.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "timestamp", "incremental_strategy": "delete+insert", "tags": ["tokenprice"], "cluster_by": ["timestamp"]}, "created_at": 1652754672.477249, "compiled_sql": "\n\nwith\n\njewel_price as (\n    select\n        *\n    from HARMONY.DEV.tokenprice_jewel\n    where \n        timestamp >= current_date() - interval '3 day'\n    \n),\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from HARMONY.DEV.logs\n    where topics[0] = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' -- Swap\n        and evm_contract_address = '0x321eafb0aed358966a90513290de99763946a54b' -- gold/jewel Pool\n        and \n        block_timestamp >= current_date() - interval '3 day'\n    \n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        ( (sum1in + sum1out) / (sum0in + sum0out) ) * pow(10,-15) * jewel_price.price as price\n    from daily_trades\n    left join jewel_price\n        on date(jewel_price.timestamp) = date(daily_trades.day_date)\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tokenprice_dfkgold"}, "model.harmony.tokenprice_one": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key = 'timestamp',\n        incremental_strategy = 'delete+insert',\n        tags=['tokenprice'],\n        cluster_by=['timestamp']\n    )\n}}\n\nwith\n\njewel_price as (\n    select\n        *\n    from {{ ref(\"tokenprice_jewel\") }}\n    where {{ incremental_last_x_days(\"timestamp\", 3) }}\n),\n\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from {{ ref('logs') }}\n    where topics[0] = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' -- Swap\n        and evm_contract_address = '0xeb579ddcd49a7beb3f205c9ff6006bb6390f138f' -- JEWEL/WONE Pool\n        and {{ incremental_last_x_days(\"block_timestamp\", 3) }}\n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        ( (sum0in + sum0out) / (sum1in + sum1out) ) * jewel_price.price as price\n    from daily_trades\n    left join jewel_price\n        on jewel_price.timestamp = daily_trades.day_date\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_last_x_days", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.tokenprice_jewel", "model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["tokenprice"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["timestamp"], "unique_key": "timestamp", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tokenprice", "tokenprice_one"], "unique_id": "model.harmony.tokenprice_one", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tokenprice/tokenprice_one.sql", "original_file_path": "models/tokenprice/tokenprice_one.sql", "name": "tokenprice_one", "alias": "tokenprice_one", "checksum": {"name": "sha256", "checksum": "1ac408dd88546eecc9eb5f2c68836a7d1bb61118b2a3657559464f40a45f6738"}, "tags": ["tokenprice"], "refs": [["tokenprice_jewel"], ["logs"]], "sources": [], "description": "ONE price in USD", "columns": {"timestamp": {"name": "timestamp", "description": "daily timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "price in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tokenprice/tokenprice_one.yml", "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_one.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "timestamp", "incremental_strategy": "delete+insert", "tags": ["tokenprice"], "cluster_by": ["timestamp"]}, "created_at": 1652754672.489377, "compiled_sql": "\n\nwith\n\njewel_price as (\n    select\n        *\n    from HARMONY.DEV.tokenprice_jewel\n    where \n        timestamp >= current_date() - interval '3 day'\n    \n),\n\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from HARMONY.DEV.logs\n    where topics[0] = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' -- Swap\n        and evm_contract_address = '0xeb579ddcd49a7beb3f205c9ff6006bb6390f138f' -- JEWEL/WONE Pool\n        and \n        block_timestamp >= current_date() - interval '3 day'\n    \n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        ( (sum0in + sum0out) / (sum1in + sum1out) ) * jewel_price.price as price\n    from daily_trades\n    left join jewel_price\n        on jewel_price.timestamp = daily_trades.day_date\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tokenprice_one"}, "model.harmony.tokenprice_jewel": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key = 'timestamp',\n        incremental_strategy = 'delete+insert',\n        tags=['tokenprice'],\n        cluster_by=['timestamp']\n    )\n}}\n\nwith\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from {{ ref('logs') }}\n    where topics[0] = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' -- Swap\n        and evm_contract_address = '0xa1221a5bbea699f507cc00bdedea05b5d2e32eba' -- JEWEL / 1USDC Pool\n        and {{ incremental_last_x_days(\"block_timestamp\", 3) }}\n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        1 / ( (sum0in + sum0out) / (sum1in + sum1out) ) * pow(10,12) as price\n    from daily_trades d\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_last_x_days", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["tokenprice"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["timestamp"], "unique_key": "timestamp", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tokenprice", "tokenprice_jewel"], "unique_id": "model.harmony.tokenprice_jewel", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tokenprice/tokenprice_jewel.sql", "original_file_path": "models/tokenprice/tokenprice_jewel.sql", "name": "tokenprice_jewel", "alias": "tokenprice_jewel", "checksum": {"name": "sha256", "checksum": "ada5486efc0d75853ea756d15d358625f0b292efd592d5d37f933d63a082b5b8"}, "tags": ["tokenprice"], "refs": [["logs"]], "sources": [], "description": "JEWEL price in USD", "columns": {"timestamp": {"name": "timestamp", "description": "daily timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "price in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tokenprice/tokenprice_jewel.yml", "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_jewel.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "timestamp", "incremental_strategy": "delete+insert", "tags": ["tokenprice"], "cluster_by": ["timestamp"]}, "created_at": 1652754672.492388, "compiled_sql": "\n\nwith\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from HARMONY.DEV.logs\n    where topics[0] = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822' -- Swap\n        and evm_contract_address = '0xa1221a5bbea699f507cc00bdedea05b5d2e32eba' -- JEWEL / 1USDC Pool\n        and \n        block_timestamp >= current_date() - interval '3 day'\n    \n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        1 / ( (sum0in + sum0out) / (sum1in + sum1out) ) * pow(10,12) as price\n    from daily_trades d\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tokenprice_jewel"}, "model.harmony.tokenprices": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key=\"key\",\n        incremental_strategy = 'delete+insert',\n        tags=['core', 'defi', 'tokenprice'],\n        cluster_by=['block_date', 'token_address']\n        )\n}}\n\nwith \nstage as (\n  select * from {{ ref('stg_tokenprice_from_swaps')}}\n  where {{ incremental_last_x_days(\"block_date\", 3) }}\n),\n\nfinal as (\n  select\n    key,\n    block_date,\n    token_address,\n    token_symbol,\n    usd_price,\n    usd_volume,\n    token_volume\n  from stage\n  where usd_volume >= 100\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_last_x_days", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "defi", "tokenprice"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_date", "token_address"], "unique_key": "key", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tokenprice", "tokenprices"], "unique_id": "model.harmony.tokenprices", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tokenprice/tokenprices.sql", "original_file_path": "models/tokenprice/tokenprices.sql", "name": "tokenprices", "alias": "tokenprices", "checksum": {"name": "sha256", "checksum": "bb1965eb5b2a85d60eb59eb6e1b107a15d9872df285ae450545a3894fc0418aa"}, "tags": ["core", "defi", "tokenprice"], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "Volume-weighted average daily prices based on swap data, assuming curated stables = 1 USD, and preferring the most liquid pair.  Token prices will show up if they have at least USD100 of daily volume.", "columns": {"key": {"name": "key", "description": "The unique key for the block_date and token_address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_date": {"name": "block_date", "description": "The date of the token price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_address": {"name": "token_address", "description": "Address of the Token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_symbol": {"name": "token_symbol", "description": "HRC token symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_price": {"name": "usd_price", "description": "Volume-weighted average price calculated on the `block_date`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_volume": {"name": "usd_volume", "description": "The USD-equivalent amount swapped on the `block_date` based on curated liquidity pool list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_volume": {"name": "token_volume", "description": "The amount of tokens swapped on this date based on the curated liquidity pool list.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tokenprice/tokenprices.yml", "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprices.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "key", "incremental_strategy": "delete+insert", "tags": ["core", "defi", "tokenprice"], "cluster_by": ["block_date", "token_address"]}, "created_at": 1652754672.496213, "compiled_sql": "\n\nwith \nstage as (\n  select * from HARMONY.DEV.stg_tokenprice_from_swaps\n  where \n        block_date >= current_date() - interval '3 day'\n    \n),\n\nfinal as (\n  select\n    key,\n    block_date,\n    token_address,\n    token_symbol,\n    usd_price,\n    usd_volume,\n    token_volume\n  from stage\n  where usd_volume >= 100\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tokenprices"}, "model.harmony.tokenprice_btc": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key = 'timestamp',\n        incremental_strategy = 'delete+insert',\n        tags=['tokenprice'],\n        cluster_by=['timestamp']\n    )\n}}\n\nwith\n\njewel_price as (\n    select\n        *\n    from {{ ref(\"tokenprice_jewel\") }}\n    where {{ incremental_last_x_days(\"timestamp\", 3) }}\n),\n\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from {{ ref('logs') }}\n    where event_name = 'Swap' -- Swap\n        and evm_contract_address = '0x0acce15d05b4ba4dbedfd7afd51ea4fa1592f75e' -- 1WBTC/JEWEL DfK Pool\n        and {{ incremental_last_x_days(\"block_timestamp\", 3) }}\n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        (  (sum1in + sum1out) / ((sum0in + sum0out) * pow(10, 10)) ) * jewel_price.price  as price\n    from daily_trades\n    left join jewel_price\n        on jewel_price.timestamp = daily_trades.day_date\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_last_x_days", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.tokenprice_jewel", "model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["tokenprice"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["timestamp"], "unique_key": "timestamp", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tokenprice", "tokenprice_btc"], "unique_id": "model.harmony.tokenprice_btc", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tokenprice/tokenprice_btc.sql", "original_file_path": "models/tokenprice/tokenprice_btc.sql", "name": "tokenprice_btc", "alias": "tokenprice_btc", "checksum": {"name": "sha256", "checksum": "6390ac701476facec76ba7cf1e5487eeca25ac0236fb071404965748109bf744"}, "tags": ["tokenprice"], "refs": [["tokenprice_jewel"], ["logs"]], "sources": [], "description": "1WBTC price in USD", "columns": {"timestamp": {"name": "timestamp", "description": "daily timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "price in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/tokenprice/tokenprice_btc.yml", "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_btc.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "timestamp", "incremental_strategy": "delete+insert", "tags": ["tokenprice"], "cluster_by": ["timestamp"]}, "created_at": 1652754672.486392, "compiled_sql": "\n\nwith\n\njewel_price as (\n    select\n        *\n    from HARMONY.DEV.tokenprice_jewel\n    where \n        timestamp >= current_date() - interval '3 day'\n    \n),\n\n\nraw_logs as (\n    select \n        block_timestamp,\n        java_hextoint(substr(data,3+64*0,64)) as amount0In,\n        java_hextoint(substr(data,3+64*1,64)) as amount1In,\n        java_hextoint(substr(data,3+64*2,64)) as amount0Out,\n        java_hextoint(substr(data,3+64*3,64)) as amount1Out\n    from HARMONY.DEV.logs\n    where event_name = 'Swap' -- Swap\n        and evm_contract_address = '0x0acce15d05b4ba4dbedfd7afd51ea4fa1592f75e' -- 1WBTC/JEWEL DfK Pool\n        and \n        block_timestamp >= current_date() - interval '3 day'\n    \n),\n\ndaily_trades as (\n    select \n        date_trunc('day', block_timestamp) as day_date,\n        sum(amount0In) as sum0in,\n        sum(amount1In) as sum1in,\n        sum(amount0Out) as sum0out,\n        sum(amount1Out) as sum1out\n    from raw_logs\n    group by 1\n),\n\ndaily_trades_prices as (\n    select\n        -- column is set to timestamp for future purposes (once we get matt's hourly data)\n        day_date as timestamp,\n        /* \n            Calculation is done by\n            1. ((bigger token deom) / (smaller token denom)) [because these are integers and not floats]\n            2. converted to correct decimal place (e.g [multiplied] * pow(10,-8))\n            3. converted to USD Price (using 1/result && [multiplied] * jewel.price)\n        */\n        (  (sum1in + sum1out) / ((sum0in + sum0out) * pow(10, 10)) ) * jewel_price.price  as price\n    from daily_trades\n    left join jewel_price\n        on jewel_price.timestamp = daily_trades.day_date\n),\n\ncombine as (\n    select \n        *\n    from daily_trades_prices\n),\n\nfinal as (\n    select \n        timestamp,\n        avg(price) as price\n    from combine\n    group by 1\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tokenprice_btc"}, "model.harmony.dfk_seed_harvests": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='tx_hash',\n        tags=['dfk'],\n        cluster_by=['block_timestamp']\n    )\n}}\n\nwith incremental_txs as (\n    select *\n    from {{ ref(\"txs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nincremental_logs as (\n    select *\n    from {{ ref(\"logs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nharvest_txs as (\n    select\n        *\n    from incremental_txs\n    where to_address = '0xdb30643c71ac9e2122ca0341ed77d09d5f99f924'\n      and data like '0x5eac6239%'\n      and status = true\n),\n\nharvest_events as (\n    select\n        incremental_logs.tx_hash as tx_hash,\n        event_inputs,\n        event_name,\n        from_address\n    from incremental_logs\n    join harvest_txs\n      on incremental_logs.tx_hash = harvest_txs.tx_hash\n),\n\njewel_amounts as (\n    select\n        tx_hash,\n        sum(event_inputs:LockAmount) as jewel_locked,\n        sum(event_inputs:value) as jewel_reward\n    from harvest_events\n    where (event_name = 'Lock' and event_inputs:LockedAddress = from_address)\n       or (event_name = 'Transfer' and event_inputs:to = from_address)\n    group by 1\n),\n\nfinal as (\n    select\n        block_timestamp,\n        ingested_at,\n        block_number,\n        floor((block_number - 16350367) / 302400) + 1 as garden_epoch,\n        native_from_address,\n        from_address,\n        harvest_txs.tx_hash as tx_hash,\n        jewel_locked / pow(10, 18) as jewel_locked,\n        (jewel_reward - jewel_locked) / pow(10, 18) as jewel_unlocked\n    from harvest_txs\n    join jewel_amounts\n      on harvest_txs.tx_hash = jewel_amounts.tx_hash\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.txs", "model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dfk"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "tx_hash", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "dfk", "dfk_seed_harvests"], "unique_id": "model.harmony.dfk_seed_harvests", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "dfk/dfk_seed_harvests.sql", "original_file_path": "models/dfk/dfk_seed_harvests.sql", "name": "dfk_seed_harvests", "alias": "dfk_seed_harvests", "checksum": {"name": "sha256", "checksum": "ca238062870cdf7844ddb4cb6835e944d78ed092846e400b1830761d809881ff"}, "tags": ["dfk"], "refs": [["txs"], ["logs"]], "sources": [], "description": "Defi Kingdoms Jewel Garden Harvests", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "The timestamp of when the block that this transaction was in was mined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_number": {"name": "block_number", "description": "The block number of the block this transaction is in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "garden_epoch": {"name": "garden_epoch", "description": "The epoch of the garden for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "native_from_address": {"name": "native_from_address", "description": "The native Harmony address of the account that performed this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_address": {"name": "from_address", "description": "The hex format address of the account that performed this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "The hash of this Harmony transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "jewel_locked": {"name": "jewel_locked", "description": "The amount of JEWEL locked away in this transaction until after epoch 51 or unlocked with Heroes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "jewel_unlocked": {"name": "jewel_unlocked", "description": "The amount of JEWEL unlocked and received from this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/dfk/dfk_seed_harvests.yml", "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_harvests.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "tx_hash", "tags": ["dfk"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.540543, "compiled_sql": "\n\nwith incremental_txs as (\n    select *\n    from HARMONY.DEV.txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_seed_harvests\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_seed_harvests)\n),\n\nincremental_logs as (\n    select *\n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_seed_harvests\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_seed_harvests)\n),\n\nharvest_txs as (\n    select\n        *\n    from incremental_txs\n    where to_address = '0xdb30643c71ac9e2122ca0341ed77d09d5f99f924'\n      and data like '0x5eac6239%'\n      and status = true\n),\n\nharvest_events as (\n    select\n        incremental_logs.tx_hash as tx_hash,\n        event_inputs,\n        event_name,\n        from_address\n    from incremental_logs\n    join harvest_txs\n      on incremental_logs.tx_hash = harvest_txs.tx_hash\n),\n\njewel_amounts as (\n    select\n        tx_hash,\n        sum(event_inputs:LockAmount) as jewel_locked,\n        sum(event_inputs:value) as jewel_reward\n    from harvest_events\n    where (event_name = 'Lock' and event_inputs:LockedAddress = from_address)\n       or (event_name = 'Transfer' and event_inputs:to = from_address)\n    group by 1\n),\n\nfinal as (\n    select\n        block_timestamp,\n        ingested_at,\n        block_number,\n        floor((block_number - 16350367) / 302400) + 1 as garden_epoch,\n        native_from_address,\n        from_address,\n        harvest_txs.tx_hash as tx_hash,\n        jewel_locked / pow(10, 18) as jewel_locked,\n        (jewel_reward - jewel_locked) / pow(10, 18) as jewel_unlocked\n    from harvest_txs\n    join jewel_amounts\n      on harvest_txs.tx_hash = jewel_amounts.tx_hash\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_seed_harvests"}, "model.harmony.dfk_potions_crafted": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key='tx_hash',\n        incremental_strategy = 'delete+insert',\n        tags=['dfk'],\n        cluster_by=['block_timestamp']\n        ) \n}}\n\nwith\ntxs as (\n    select\n        *\n    from {{ ref('txs') }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\ncreate_potions as (\n    select\n        tx_hash,\n        block_timestamp,\n        ingested_at,\n        from_address as crafter,\n        concat('0x',substr(data,11+24,40)) as potion_type,\n        java_hextoint(substr(data,11+64,64)) as potions_crafted\n    from txs\n    where to_address = '0x87cba8f998f902f2fff990effa1e261f35932e57' -- alchemist address\n        and substr(data,0,10) = '0xa28beda3' -- create potion\n)\n\nselect * from create_potions", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dfk"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "tx_hash", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "dfk", "dfk_potions_crafted"], "unique_id": "model.harmony.dfk_potions_crafted", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "dfk/dfk_potions_crafted.sql", "original_file_path": "models/dfk/dfk_potions_crafted.sql", "name": "dfk_potions_crafted", "alias": "dfk_potions_crafted", "checksum": {"name": "sha256", "checksum": "1fd5de7dd6379dca1558e0983902057667e12a2dc142bdeca8106b2152f1d8a8"}, "tags": ["dfk"], "refs": [["txs"]], "sources": [], "description": "Defi Kingdoms Potions Crafted", "columns": {"tx_hash": {"name": "tx_hash", "description": "The hash of the transaction, this is the primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time when the block was mined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crafter": {"name": "crafter", "description": "The Wallet address of the crafter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "potion_type": {"name": "potion_type", "description": "Potion Contract Address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "potions_crafted": {"name": "potions_crafted", "description": "The total amount potions crafted", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/dfk/dfk_potions_crafted.yml", "compiled_path": "target/compiled/harmony/models/dfk/dfk_potions_crafted.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "tx_hash", "incremental_strategy": "delete+insert", "tags": ["dfk"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.549471, "compiled_sql": "\n\nwith\ntxs as (\n    select\n        *\n    from HARMONY.DEV.txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_potions_crafted\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_potions_crafted)\n),\ncreate_potions as (\n    select\n        tx_hash,\n        block_timestamp,\n        ingested_at,\n        from_address as crafter,\n        concat('0x',substr(data,11+24,40)) as potion_type,\n        java_hextoint(substr(data,11+64,64)) as potions_crafted\n    from txs\n    where to_address = '0x87cba8f998f902f2fff990effa1e261f35932e57' -- alchemist address\n        and substr(data,0,10) = '0xa28beda3' -- create potion\n)\n\nselect * from create_potions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_potions_crafted"}, "model.harmony.dfk_bank_transactions": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='tx_hash',\n        tags=['dfk'],\n        cluster_by=['block_timestamp']\n    )\n}}\n\nwith\n\nincremental_txs as (\n    select *\n    from {{ ref(\"txs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nincremental_logs as (\n    select *\n    from {{ ref(\"logs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nbanking_txs as (\n    select\n        tx_hash,\n        block_timestamp,\n        ingested_at,\n        native_from_address,\n        from_address,\n        case\n            when data like '0xa59f3e0c%' then 'Deposit'\n            when data like '0x67dfd4c9%' then 'Withdraw'\n        end as type\n    from incremental_txs\n    where to_address = '0xa9ce83507d872c5e1273e745abcfda849daa654f'\n        and (data like '0xa59f3e0c%' or data like '0x67dfd4c9%')\n        and status = true\n),\n\ntoken_amounts as (\n    select\n        banking_txs.tx_hash as tx_hash,\n        sum(case evm_contract_address when '0x72cb10c6bfa5624dd07ef608027e366bd690048f' then event_inputs:value end) as jewel_amount,\n        sum(case evm_contract_address when '0xa9ce83507d872c5e1273e745abcfda849daa654f' then event_inputs:value end) as xjewel_amount\n    from banking_txs\n    join incremental_logs as logs\n        on banking_txs.tx_hash = logs.tx_hash\n    where event_name = 'Transfer'\n    group by 1\n),\n\nfinal as (\n    select\n        banking_txs.tx_hash as tx_hash,\n        block_timestamp,\n        ingested_at,\n        native_from_address,\n        from_address,\n        type,\n        jewel_amount / pow(10,18) as jewel_amount,\n        xjewel_amount / pow(10,18) as xjewel_amount\n    from banking_txs\n    join token_amounts\n        on banking_txs.tx_hash = token_amounts.tx_hash\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.txs", "model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dfk"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "tx_hash", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "dfk", "dfk_bank_transactions"], "unique_id": "model.harmony.dfk_bank_transactions", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "dfk/dfk_bank_transactions.sql", "original_file_path": "models/dfk/dfk_bank_transactions.sql", "name": "dfk_bank_transactions", "alias": "dfk_bank_transactions", "checksum": {"name": "sha256", "checksum": "8edcd30ca736812419ffe90dc6403bbb8c2b73e3a37b08e7348fa986a487b8a2"}, "tags": ["dfk"], "refs": [["txs"], ["logs"]], "sources": [], "description": "Defi Kingdoms Jeweler transactions", "columns": {"tx_hash": {"name": "tx_hash", "description": "The hash of this Harmony transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp of when the block that this transaction was in was mined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "native_from_address": {"name": "native_from_address", "description": "The native Harmony address of the account that performed this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_address": {"name": "from_address", "description": "The hex format address of the account that performed this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of this bank transaction. Either 'Deposit' or 'Withdraw'. Deposits stores JEWEL in the bank, withdrawals removes JEWEL from the bank.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "jewel_amount": {"name": "jewel_amount", "description": "The amount of JEWEL this transaction involves. When `type` is 'Deposit', the amount JEWEL deposited into the bank. When `type` is 'Withdraw', the amount of JEWEL received from the bank.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "xjewel_amount": {"name": "xjewel_amount", "description": "The amount of xJEWEL this transaction involves. When `type` is 'Deposit', the amount of xJEWEL added to the bank. When `type` is 'Withdraw', the amount of xJEWEL removed from the bank.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/dfk/dfk_bank_transactions.yml", "compiled_path": "target/compiled/harmony/models/dfk/dfk_bank_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "tx_hash", "tags": ["dfk"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.503955, "compiled_sql": "\n\nwith\n\nincremental_txs as (\n    select *\n    from HARMONY.DEV.txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_bank_transactions\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_bank_transactions)\n),\n\nincremental_logs as (\n    select *\n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_bank_transactions\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_bank_transactions)\n),\n\nbanking_txs as (\n    select\n        tx_hash,\n        block_timestamp,\n        ingested_at,\n        native_from_address,\n        from_address,\n        case\n            when data like '0xa59f3e0c%' then 'Deposit'\n            when data like '0x67dfd4c9%' then 'Withdraw'\n        end as type\n    from incremental_txs\n    where to_address = '0xa9ce83507d872c5e1273e745abcfda849daa654f'\n        and (data like '0xa59f3e0c%' or data like '0x67dfd4c9%')\n        and status = true\n),\n\ntoken_amounts as (\n    select\n        banking_txs.tx_hash as tx_hash,\n        sum(case evm_contract_address when '0x72cb10c6bfa5624dd07ef608027e366bd690048f' then event_inputs:value end) as jewel_amount,\n        sum(case evm_contract_address when '0xa9ce83507d872c5e1273e745abcfda849daa654f' then event_inputs:value end) as xjewel_amount\n    from banking_txs\n    join incremental_logs as logs\n        on banking_txs.tx_hash = logs.tx_hash\n    where event_name = 'Transfer'\n    group by 1\n),\n\nfinal as (\n    select\n        banking_txs.tx_hash as tx_hash,\n        block_timestamp,\n        ingested_at,\n        native_from_address,\n        from_address,\n        type,\n        jewel_amount / pow(10,18) as jewel_amount,\n        xjewel_amount / pow(10,18) as xjewel_amount\n    from banking_txs\n    join token_amounts\n        on banking_txs.tx_hash = token_amounts.tx_hash\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_bank_transactions"}, "model.harmony.dfk_quest_rewards": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key='log_id',\n        incremental_strategy = 'delete+insert',\n        tags=['dfk', 'dfk_quest_rewards'],\n        cluster_by=['block_timestamp']\n        ) \n}}\n\nwith\n\njewel_price as (\n    select \n        *\n    from {{ ref(\"tokenprice_jewel\") }}\n),\n\ntear_price as (\n    select\n        *\n    from {{ ref(\"tokenprice_gaiatear\") }}\n),\n\nshva_price as (\n    select\n        *\n    from {{ ref(\"tokenprice_shvasrune\") }}\n),\n\ngold_price as (\n    select\n        *\n    from {{ ref(\"tokenprice_dfkgold\") }}\n),\n\nlogs as (\n    select\n        *\n    from {{ ref('logs') }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nitem2gold as (\n    select\n        *\n    from {{ ref('dfk_item_to_gold') }}\n),\n\ntokens as (\n    select\n        *\n    from {{ ref('tokens') }}\n),\n\nall_quest_rewards as (\n    select\n        tx_hash as quest_tx\n    from {{ ref('txs') }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n        and (   to_address = '0x5100bd31b822371108a0f63dcfb6594b9919eaf4' -- quest_contract\n                or to_address = '0xaa9a289ce0565e4d6548e63a441e7c084e6b52f6' -- quest_contract_new\n            )\n        and substr(data,0,10) = '0x528be0a9' -- collect quest rewards\n),\n\nfinal as (\n    select\n        logs.log_id,\n        logs.block_timestamp,\n        logs.ingested_at,\n        logs.evm_contract_address,\n        tokens.token_name,\n        logs.event_inputs:from as from_address,\n        logs.event_inputs:to as to_address,\n        logs.event_inputs:value / pow(10, tokens.decimals) as calculated_value,\n        logs.tx_hash,\n        case \n            when logs.evm_contract_address::string = '0x72cb10c6bfa5624dd07ef608027e366bd690048f' then nvl(calculated_value * jewel_price.price, 0) \n            when logs.evm_contract_address::string = '0x24ea0d436d3c2602fbfefbe6a16bbc304c963d04' then nvl(calculated_value * tear_price.price, 0)\n            when logs.evm_contract_address::string = '0x66f5bfd910cd83d3766c4b39d13730c911b2d286' then nvl(calculated_value * shva_price.price, 0)\n            when logs.evm_contract_address::string = '0x3a4edcf3312f44ef027acfd8c21382a5259936e7' then nvl(calculated_value * gold_price.price, 0)\n            else nvl( calculated_value * item2gold.gold * gold_price.price, 0 )\n        end as amount_usd\n    from logs\n    left join tokens\n        on logs.evm_contract_address = tokens.token_address\n    left join jewel_price\n        on date(logs.block_timestamp) = date(jewel_price.timestamp)\n    left join tear_price\n        on date(logs.block_timestamp) = date(tear_price.timestamp)\n    left join gold_price\n        on date(logs.block_timestamp) = date(gold_price.timestamp)\n    left join shva_price\n        on date(logs.block_timestamp) = date(shva_price.timestamp)\n    left join item2gold\n        on logs.evm_contract_address = item2gold.contract_address\n    where event_name = 'Transfer'\n        and logs.tx_hash in ( select quest_tx from all_quest_rewards )\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.tokenprice_jewel", "model.harmony.tokenprice_gaiatear", "model.harmony.tokenprice_shvasrune", "model.harmony.tokenprice_dfkgold", "model.harmony.logs", "seed.harmony.dfk_item_to_gold", "model.harmony.tokens", "model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dfk", "dfk_quest_rewards"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "log_id", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "dfk", "dfk_quest_rewards"], "unique_id": "model.harmony.dfk_quest_rewards", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "dfk/dfk_quest_rewards.sql", "original_file_path": "models/dfk/dfk_quest_rewards.sql", "name": "dfk_quest_rewards", "alias": "dfk_quest_rewards", "checksum": {"name": "sha256", "checksum": "f58aa3fd2c2574bbd9152ecb1c3cc469f7662f3ba63ebe243f2c790414adeba1"}, "tags": ["dfk", "dfk_quest_rewards"], "refs": [["tokenprice_jewel"], ["tokenprice_gaiatear"], ["tokenprice_shvasrune"], ["tokenprice_dfkgold"], ["logs"], ["dfk_item_to_gold"], ["tokens"], ["txs"]], "sources": [], "description": "Defi-Kingdoms Quest Rewards", "columns": {"log_id": {"name": "log_id", "description": "Unique ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "Block Timestamp.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evm_contract_address": {"name": "evm_contract_address", "description": "Contract address of the Rewards.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_name": {"name": "token_name", "description": "Name of the Reward.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_address": {"name": "from_address", "description": "Where the reward came from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_address": {"name": "to_address", "description": "Who the reward is going to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calculated_value": {"name": "calculated_value", "description": "raw_amount / token.decimals.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "Transaction hash.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_usd": {"name": "amount_usd", "description": "Value in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/dfk/dfk_quest_rewards.yml", "compiled_path": "target/compiled/harmony/models/dfk/dfk_quest_rewards.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "log_id", "incremental_strategy": "delete+insert", "tags": ["dfk", "dfk_quest_rewards"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.512838, "compiled_sql": "\n\nwith\n\njewel_price as (\n    select \n        *\n    from HARMONY.DEV.tokenprice_jewel\n),\n\ntear_price as (\n    select\n        *\n    from HARMONY.DEV.tokenprice_gaiatear\n),\n\nshva_price as (\n    select\n        *\n    from HARMONY.DEV.tokenprice_shvasrune\n),\n\ngold_price as (\n    select\n        *\n    from HARMONY.DEV.tokenprice_dfkgold\n),\n\nlogs as (\n    select\n        *\n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_quest_rewards\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_quest_rewards)\n),\n\nitem2gold as (\n    select\n        *\n    from HARMONY.DEV.dfk_item_to_gold\n),\n\ntokens as (\n    select\n        *\n    from HARMONY.DEV.tokens\n),\n\nall_quest_rewards as (\n    select\n        tx_hash as quest_tx\n    from HARMONY.DEV.txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_quest_rewards\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_quest_rewards)\n        and (   to_address = '0x5100bd31b822371108a0f63dcfb6594b9919eaf4' -- quest_contract\n                or to_address = '0xaa9a289ce0565e4d6548e63a441e7c084e6b52f6' -- quest_contract_new\n            )\n        and substr(data,0,10) = '0x528be0a9' -- collect quest rewards\n),\n\nfinal as (\n    select\n        logs.log_id,\n        logs.block_timestamp,\n        logs.ingested_at,\n        logs.evm_contract_address,\n        tokens.token_name,\n        logs.event_inputs:from as from_address,\n        logs.event_inputs:to as to_address,\n        logs.event_inputs:value / pow(10, tokens.decimals) as calculated_value,\n        logs.tx_hash,\n        case \n            when logs.evm_contract_address::string = '0x72cb10c6bfa5624dd07ef608027e366bd690048f' then nvl(calculated_value * jewel_price.price, 0) \n            when logs.evm_contract_address::string = '0x24ea0d436d3c2602fbfefbe6a16bbc304c963d04' then nvl(calculated_value * tear_price.price, 0)\n            when logs.evm_contract_address::string = '0x66f5bfd910cd83d3766c4b39d13730c911b2d286' then nvl(calculated_value * shva_price.price, 0)\n            when logs.evm_contract_address::string = '0x3a4edcf3312f44ef027acfd8c21382a5259936e7' then nvl(calculated_value * gold_price.price, 0)\n            else nvl( calculated_value * item2gold.gold * gold_price.price, 0 )\n        end as amount_usd\n    from logs\n    left join tokens\n        on logs.evm_contract_address = tokens.token_address\n    left join jewel_price\n        on date(logs.block_timestamp) = date(jewel_price.timestamp)\n    left join tear_price\n        on date(logs.block_timestamp) = date(tear_price.timestamp)\n    left join gold_price\n        on date(logs.block_timestamp) = date(gold_price.timestamp)\n    left join shva_price\n        on date(logs.block_timestamp) = date(shva_price.timestamp)\n    left join item2gold\n        on logs.evm_contract_address = item2gold.contract_address\n    where event_name = 'Transfer'\n        and logs.tx_hash in ( select quest_tx from all_quest_rewards )\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_quest_rewards"}, "model.harmony.dfk_hero_summons": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key='tx_hash',\n        incremental_strategy = 'delete+insert',\n        tags=['dfk'],\n        cluster_by=['block_timestamp']\n        ) \n}}\n\nwith\n\nlogs as (\n    select\n        *\n    from {{ ref(\"logs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\ntxs as (\n    select\n        *\n    from {{ ref(\"txs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\ncrystal_to_hero_summons as (\n    select  \n        txs.block_timestamp,\n        txs.ingested_at,\n        txs.tx_hash,\n        substr(txs.data,11) as crystal_id,\n        txs.from_address as summoneer,\n        logs.event_inputs:tokenId as hero_id\n    from txs\n    left join logs\n        on txs.tx_hash = logs.tx_hash\n        and logs.event_name = 'Transfer'\n    where substr(txs.data,0,10) = '0x690e7c09' -- open\n        and status\n        and (\n                txs.to_address = '0x65dea93f7b886c33a78c10343267dd39727778c2' -- Summoning Contract\n                or txs.to_address = '0xf4d3ae202c9ae516f7eb1db5aff19bf699a5e355' -- Summoning Contract 2\n            )\n),\nfinal as (\n    select \n        tx_hash,\n        hero_id,\n        concat('0x',crystal_id) as crystal_id,\n        block_timestamp,\n        ingested_at,\n        summoneer\n    from crystal_to_hero_summons\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.logs", "model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dfk"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "tx_hash", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "dfk", "dfk_hero_summons"], "unique_id": "model.harmony.dfk_hero_summons", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "dfk/dfk_hero_summons.sql", "original_file_path": "models/dfk/dfk_hero_summons.sql", "name": "dfk_hero_summons", "alias": "dfk_hero_summons", "checksum": {"name": "sha256", "checksum": "7233cb7a51265cb84b064f96cdb4d703fef1bf36920c488ca5834db61b364034"}, "tags": ["dfk"], "refs": [["logs"], ["txs"]], "sources": [], "description": "Defi Kingdom Hero Summons", "columns": {"tx_hash": {"name": "tx_hash", "description": "The hash of the transaction, this is the primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time when the block was mined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_id": {"name": "hero_id", "description": "Token ID of the DFK Hero summoned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crystal_id": {"name": "crystal_id", "description": "Crystal ID used to summon the hero", "meta": {}, "data_type": null, "quote": null, "tags": []}, "summoneer": {"name": "summoneer", "description": "Wallet Address that summoned the hero", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/dfk/dfk_hero_summons.yml", "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_summons.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "tx_hash", "incremental_strategy": "delete+insert", "tags": ["dfk"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.52265, "compiled_sql": "\n\nwith\n\nlogs as (\n    select\n        *\n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_hero_summons\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_hero_summons)\n),\n\ntxs as (\n    select\n        *\n    from HARMONY.DEV.txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_hero_summons\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_hero_summons)\n),\n\ncrystal_to_hero_summons as (\n    select  \n        txs.block_timestamp,\n        txs.ingested_at,\n        txs.tx_hash,\n        substr(txs.data,11) as crystal_id,\n        txs.from_address as summoneer,\n        logs.event_inputs:tokenId as hero_id\n    from txs\n    left join logs\n        on txs.tx_hash = logs.tx_hash\n        and logs.event_name = 'Transfer'\n    where substr(txs.data,0,10) = '0x690e7c09' -- open\n        and status\n        and (\n                txs.to_address = '0x65dea93f7b886c33a78c10343267dd39727778c2' -- Summoning Contract\n                or txs.to_address = '0xf4d3ae202c9ae516f7eb1db5aff19bf699a5e355' -- Summoning Contract 2\n            )\n),\nfinal as (\n    select \n        tx_hash,\n        hero_id,\n        concat('0x',crystal_id) as crystal_id,\n        block_timestamp,\n        ingested_at,\n        summoneer\n    from crystal_to_hero_summons\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_hero_summons"}, "model.harmony.dfk_hero_sales": {"raw_sql": "{{ \n     config(\n         materialized = 'incremental',\n         unique_key = 'tx_hash',\n         incremental_strategy = 'delete+insert',\n         tags = ['dfk'],\n         cluster_by = ['block_timestamp']\n     ) \n}}\n\nwith\njewel_price as (\n    select \n        *\n    from {{ ref('tokenprice_jewel') }}\n),\nlogs as (\n    select \n        *\n    from {{ ref('logs') }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\nauction_created as (\n    select\n        tx_hash,\n        block_timestamp,\n        ingested_at,\n        concat('0x',LTRIM(substr(topics[1], 3, 64),'0')) as seller_address,\n        java_hextoint(substr(data,3,64))::number as auction_id\n    from {{ ref('logs') }} -- reverse lookup, need to look at all the data\n    where topics[0]::string = '0x9a33d4a1b0a13cd8ff614a080df31b4b20c845e5cde181e3ae6f818f62b6ddde' -- auction created event\n),\nhero_auction_txns as (\n    select \n        tx_hash,\n        block_timestamp,\n        ingested_at,\n        java_hextoint(replace(topics[1]::string, '0x','' )) as hero_token_id,\n        java_hextoint(substr(data, 3, 64)) as auction_id,\n        java_hextoint(substr(data, 3+64, 64))::number / 1e18  as total_jewels,\n        java_hextoint(substr(data, 3+64, 64))::number / 1e18 * 0.0375 as tax_jewels,\n        concat('0x',LTRIM(substr(data, 3+128, 64),'0')) as buyer_address,\n        total_jewels * jewel_price.price  as total_usd,\n        tax_jewels * jewel_price.price as tax_usd\n    from logs\n    left join jewel_price\n        on date_trunc('day', block_timestamp) = jewel_price.timestamp\n    where not event_removed\n        and evm_contract_address = '0x13a65b9f8039e2c032bc022171dc05b30c3f2892' -- Serendale_AuctionHouse\n        and topics[0]::string ='0xe40da2ed231723b222a7ba7da994c3afc3f83a51da76262083e38841e2da0982' -- AuctionSuccessful event\n),\nfinal as (\n    select\n        hero_auction_txns.*,\n        auction_created.seller_address\n    from hero_auction_txns\n    left join auction_created\n        on hero_auction_txns.auction_id = auction_created.auction_id\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.tokenprice_jewel", "model.harmony.logs", "model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dfk"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "tx_hash", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "dfk", "dfk_hero_sales"], "unique_id": "model.harmony.dfk_hero_sales", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "dfk/dfk_hero_sales.sql", "original_file_path": "models/dfk/dfk_hero_sales.sql", "name": "dfk_hero_sales", "alias": "dfk_hero_sales", "checksum": {"name": "sha256", "checksum": "c1d10347ae5a102b74847b1c9ad4f15a35ffcca5c50db656dace9a0dffb700b1"}, "tags": ["dfk"], "refs": [["tokenprice_jewel"], ["logs"], ["logs"]], "sources": [], "description": "Defi Kingdom Hero Sales", "columns": {"tx_hash": {"name": "tx_hash", "description": "The hash of the transaction, this is the primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time when the block was mined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_token_id": {"name": "hero_token_id", "description": "Token id of the DFK Hero sold", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auction_id": {"name": "auction_id", "description": "Auction ID of the Sale", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_jewels": {"name": "total_jewels", "description": "The total amount of JEWEL tokens paid including tax to purchase DFK Hero", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_jewels": {"name": "tax_jewels", "description": "The amount of JEWEL tokens paid as tax to purchase the DKF Hero", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_usd": {"name": "total_usd", "description": "The total amount of USD paid including tax to purchase the DFK Hero", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_usd": {"name": "tax_usd", "description": "The amount of USD paid  as tax to purchase the DFK Hero", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seller_address": {"name": "seller_address", "description": "Address of the wallet that sold DFK Hero -- maybe null because of incomplete data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "buyer_address": {"name": "buyer_address", "description": "Address of the wallet that purchased DFK Hero", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/dfk/dfk_hero_sales.yml", "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "tx_hash", "incremental_strategy": "delete+insert", "tags": ["dfk"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.530241, "compiled_sql": "\n\nwith\njewel_price as (\n    select \n        *\n    from HARMONY.DEV.tokenprice_jewel\n),\nlogs as (\n    select \n        *\n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_hero_sales\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_hero_sales)\n),\nauction_created as (\n    select\n        tx_hash,\n        block_timestamp,\n        ingested_at,\n        concat('0x',LTRIM(substr(topics[1], 3, 64),'0')) as seller_address,\n        java_hextoint(substr(data,3,64))::number as auction_id\n    from HARMONY.DEV.logs -- reverse lookup, need to look at all the data\n    where topics[0]::string = '0x9a33d4a1b0a13cd8ff614a080df31b4b20c845e5cde181e3ae6f818f62b6ddde' -- auction created event\n),\nhero_auction_txns as (\n    select \n        tx_hash,\n        block_timestamp,\n        ingested_at,\n        java_hextoint(replace(topics[1]::string, '0x','' )) as hero_token_id,\n        java_hextoint(substr(data, 3, 64)) as auction_id,\n        java_hextoint(substr(data, 3+64, 64))::number / 1e18  as total_jewels,\n        java_hextoint(substr(data, 3+64, 64))::number / 1e18 * 0.0375 as tax_jewels,\n        concat('0x',LTRIM(substr(data, 3+128, 64),'0')) as buyer_address,\n        total_jewels * jewel_price.price  as total_usd,\n        tax_jewels * jewel_price.price as tax_usd\n    from logs\n    left join jewel_price\n        on date_trunc('day', block_timestamp) = jewel_price.timestamp\n    where not event_removed\n        and evm_contract_address = '0x13a65b9f8039e2c032bc022171dc05b30c3f2892' -- Serendale_AuctionHouse\n        and topics[0]::string ='0xe40da2ed231723b222a7ba7da994c3afc3f83a51da76262083e38841e2da0982' -- AuctionSuccessful event\n),\nfinal as (\n    select\n        hero_auction_txns.*,\n        auction_created.seller_address\n    from hero_auction_txns\n    left join auction_created\n        on hero_auction_txns.auction_id = auction_created.auction_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_hero_sales"}, "model.harmony.dfk_hero_rental": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        unique_key='tx_hash',\n        incremental_strategy = 'delete+insert',\n        tags=['dfk'],\n        cluster_by=['block_timestamp']\n        ) \n}}\n\nwith\nlogs as (\n    select\n        *\n    from {{ ref(\"logs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\njewel_price as (\n    select \n        *\n    from {{ ref(\"tokenprice_jewel\") }}\n),\nsummon_tx as (\n    select\n        tx_hash,\n        from_address\n    from {{ ref(\"txs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n        and (\n                to_address = '0x65dea93f7b886c33a78c10343267dd39727778c2' -- old summoning contract\n                or to_address = '0xf4d3ae202c9ae516f7eb1db5aff19bf699a5e355' -- new summoning contract\n            )\n        and (\n                substr(data,0,10) = '0x4ea8a311' -- summonCrystal\n                or substr(data,0,10) = '0xc2b40631' -- summonCrystalWithAuctionOld\n        )\n),\ncosts_to_summon_new AS (\n    select\n        logs.block_timestamp,\n        logs.ingested_at,\n        tx.tx_hash,\n        tx.from_address,\n        logs.evm_contract_address,\n        logs.event_inputs:value/pow(10,18)::number as amount,\n        logs.event_inputs:to::string as who,\n        logs.event_inputs:from::string as renter\n    from summon_tx as tx\n    join logs on logs.tx_hash = tx.tx_hash\n    where evm_contract_address = '0x72cb10c6bfa5624dd07ef608027e366bd690048f' -- jewel address\n        and event_name = 'Transfer'\n        and who != '0xa9ce83507d872c5e1273e745abcfda849daa654f' -- xJewel\n        and who != '0xa4b9a93013a5590db92062cf58d4b0ab4f35dbfb' -- Dev Fund\n        and who != '0x3875e5398766a29c1b28cc2068a0396cba36ef99' -- Market Fund\n        and who != '0x79f0d0670d17a89f509ad1c16bb6021187964a29' -- Founder Wallet\n        and who != '0x000000000000000000000000000000000000dead' -- burn address\n        and who != '0x0000000000000000000000000000000000000000' -- burn address\n        and who != '0x5ca5bcd91929c7152ca577e8c001c9b5a185f568' -- quest reward pool\n        and who != '0xf4d3ae202c9ae516f7eb1db5aff19bf699a5e355' -- summoning contract 2\n        and who != '0x65dea93f7b886c33a78c10343267dd39727778c2' -- summoning contract 1\n),\nfinal as (\n    select \n        m.block_timestamp,\n        m.ingested_at,\n        m.amount as jewel_amount,\n        m.who as user_address,\n        m.from_address as renter_address,\n        m.tx_hash,\n        m.amount * j.price as amount_usd\n    from costs_to_summon_new as m\n    join jewel_price as j\n        on date(j.timestamp) = date(m.block_timestamp)\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.logs", "model.harmony.tokenprice_jewel", "model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dfk"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "tx_hash", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "dfk", "dfk_hero_rental"], "unique_id": "model.harmony.dfk_hero_rental", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "dfk/dfk_hero_rental.sql", "original_file_path": "models/dfk/dfk_hero_rental.sql", "name": "dfk_hero_rental", "alias": "dfk_hero_rental", "checksum": {"name": "sha256", "checksum": "82670102d5ad5828027787091e9e2227d78a73a0ad6520490ed28ad9676e784c"}, "tags": ["dfk"], "refs": [["logs"], ["tokenprice_jewel"], ["txs"]], "sources": [], "description": "Defi Kingdom Hero Rentals", "columns": {"tx_hash": {"name": "tx_hash", "description": "The hash of the transaction, this is the primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time when the block was mined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "jewel_amount": {"name": "jewel_amount", "description": "Amount of Jewels the owner gained after tax", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_address": {"name": "user_address", "description": "The owner of the hero's address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renter_address": {"name": "renter_address", "description": "The wallet that rented the hero", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_usd": {"name": "amount_usd", "description": "The amount of JEWEL * average price of jewel on that day itself", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/dfk/dfk_hero_rental.yml", "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_rental.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "tx_hash", "incremental_strategy": "delete+insert", "tags": ["dfk"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.579107, "compiled_sql": "\n\nwith\nlogs as (\n    select\n        *\n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_hero_rental\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_hero_rental)\n),\njewel_price as (\n    select \n        *\n    from HARMONY.DEV.tokenprice_jewel\n),\nsummon_tx as (\n    select\n        tx_hash,\n        from_address\n    from HARMONY.DEV.txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_hero_rental\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_hero_rental)\n        and (\n                to_address = '0x65dea93f7b886c33a78c10343267dd39727778c2' -- old summoning contract\n                or to_address = '0xf4d3ae202c9ae516f7eb1db5aff19bf699a5e355' -- new summoning contract\n            )\n        and (\n                substr(data,0,10) = '0x4ea8a311' -- summonCrystal\n                or substr(data,0,10) = '0xc2b40631' -- summonCrystalWithAuctionOld\n        )\n),\ncosts_to_summon_new AS (\n    select\n        logs.block_timestamp,\n        logs.ingested_at,\n        tx.tx_hash,\n        tx.from_address,\n        logs.evm_contract_address,\n        logs.event_inputs:value/pow(10,18)::number as amount,\n        logs.event_inputs:to::string as who,\n        logs.event_inputs:from::string as renter\n    from summon_tx as tx\n    join logs on logs.tx_hash = tx.tx_hash\n    where evm_contract_address = '0x72cb10c6bfa5624dd07ef608027e366bd690048f' -- jewel address\n        and event_name = 'Transfer'\n        and who != '0xa9ce83507d872c5e1273e745abcfda849daa654f' -- xJewel\n        and who != '0xa4b9a93013a5590db92062cf58d4b0ab4f35dbfb' -- Dev Fund\n        and who != '0x3875e5398766a29c1b28cc2068a0396cba36ef99' -- Market Fund\n        and who != '0x79f0d0670d17a89f509ad1c16bb6021187964a29' -- Founder Wallet\n        and who != '0x000000000000000000000000000000000000dead' -- burn address\n        and who != '0x0000000000000000000000000000000000000000' -- burn address\n        and who != '0x5ca5bcd91929c7152ca577e8c001c9b5a185f568' -- quest reward pool\n        and who != '0xf4d3ae202c9ae516f7eb1db5aff19bf699a5e355' -- summoning contract 2\n        and who != '0x65dea93f7b886c33a78c10343267dd39727778c2' -- summoning contract 1\n),\nfinal as (\n    select \n        m.block_timestamp,\n        m.ingested_at,\n        m.amount as jewel_amount,\n        m.who as user_address,\n        m.from_address as renter_address,\n        m.tx_hash,\n        m.amount * j.price as amount_usd\n    from costs_to_summon_new as m\n    join jewel_price as j\n        on date(j.timestamp) = date(m.block_timestamp)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_hero_rental"}, "model.harmony.dfk_item_transactions": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='tx_hash',\n        tags=['dfk'],\n        cluster_by=['block_timestamp']\n    )\n}}\n\nwith incremental_txs as (\n    select *\n    from {{ ref(\"txs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nincremental_logs as (\n    select *\n    from {{ ref(\"logs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nmarket_txs as (\n    select *\n    from incremental_txs\n    where to_address = '0xe53bf78f8b99b6d356f93f41afb9951168cca2c6'\n      and (\n          data like '0x9f37092a%' or -- sell\n          data like '0x096c5e1a%' -- buy\n      )\n      and status = true\n),\n\nmarket_events as (\n    select\n        market_txs.block_timestamp as block_timestamp,\n        market_txs.ingested_at as ingested_at,\n        market_txs.native_from_address as native_from_address,\n        market_txs.from_address as from_address,\n        market_txs.tx_hash as tx_hash,\n        market_txs.data as data,\n        incremental_logs.event_inputs as event_inputs,\n        incremental_logs.evm_contract_address as evm_contract_address\n    from market_txs\n    inner join incremental_logs\n        on market_txs.tx_hash = incremental_logs.tx_hash\n    where event_name = 'Transfer'\n),\n\ngives as (\n    select\n        tx_hash,\n        event_inputs:value as amount,\n        evm_contract_address as token\n    from market_events\n    where event_inputs:to = '0x0000000000000000000000000000000000000000'\n),\n\ntakes as (\n    select\n        tx_hash,\n        event_inputs:value as amount,\n        evm_contract_address as token\n    from market_events\n    where event_inputs:from = '0x0000000000000000000000000000000000000000'\n),\n\nfinal as (\n    select\n        market_txs.tx_hash as tx_hash,\n        block_timestamp,\n        ingested_at,\n        native_from_address,\n        from_address,\n        case substring(market_txs.data, 1, 10)\n            when '0x9f37092a' then 'Buy'\n            when '0x096c5e1a' then 'Sell'\n        end as market_action,\n        to_number(gives.amount)/pow(10, IFNULL(token_give.decimals, 0)) as amount_give,\n        gives.token as token_give_address,\n        token_give.token_symbol as token_give_symbol,\n        token_give.token_name as token_give_name,\n        to_number(takes.amount)/pow(10, IFNULL(token_take.decimals, 0)) as amount_take,\n        takes.token as token_take_address,\n        token_take.token_symbol as token_take_symbol,\n        token_take.token_name as token_take_name\n    from market_txs\n    inner join gives\n        on market_txs.tx_hash = gives.tx_hash\n    inner join takes\n        on market_txs.tx_hash = takes.tx_hash\n    left join tokens token_give\n        on gives.token = token_give.token_address\n    left join tokens token_take\n        on takes.token = token_take.token_address\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.txs", "model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dfk"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "tx_hash", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "dfk", "dfk_item_transactions"], "unique_id": "model.harmony.dfk_item_transactions", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "dfk/dfk_item_transactions.sql", "original_file_path": "models/dfk/dfk_item_transactions.sql", "name": "dfk_item_transactions", "alias": "dfk_item_transactions", "checksum": {"name": "sha256", "checksum": "14c78d990825af8e4956016d9166c62cb38357f41861b4a18b8e2ac2de7b0498"}, "tags": ["dfk"], "refs": [["txs"], ["logs"]], "sources": [], "description": "Defi Kingdoms item transactions", "columns": {"tx_hash": {"name": "tx_hash", "description": "The hash of this Harmony transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp of when the block that this transaction was in was mined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp of when this transaction was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "native_from_address": {"name": "native_from_address", "description": "The native Harmony address of the account that performed this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_address": {"name": "from_address", "description": "The hex format address of the account that performed this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "market_action": {"name": "market_action", "description": "The action of this transaction, either `'Buy'` or `'Sell'`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_give": {"name": "amount_give", "description": "The amount of the token given by `from_address`. In the context of a buy transaction, the amount spent to buy. In the context of a sell transaction, the amount of token sold.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_give_address": {"name": "token_give_address", "description": "The contract address of the token given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_give_symbol": {"name": "token_give_symbol", "description": "The symbol of the token given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_give_name": {"name": "token_give_name", "description": "The name of the token given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_take": {"name": "amount_take", "description": "The amount of the token taken by `from_address`. In the context of a buy transaction, the amount of token purchased. In the context of a sell transaction, the amount received.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_take_address": {"name": "token_take_address", "description": "The contract address of the token taken.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_take_symbol": {"name": "token_take_symbol", "description": "The symbol of the token taken.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token_take_name": {"name": "token_take_name", "description": "The name of the token taken.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/dfk/dfk_item_transactions.yml", "compiled_path": "target/compiled/harmony/models/dfk/dfk_item_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "tx_hash", "tags": ["dfk"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.5573199, "compiled_sql": "\n\nwith incremental_txs as (\n    select *\n    from HARMONY.DEV.txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_item_transactions\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_item_transactions)\n),\n\nincremental_logs as (\n    select *\n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_item_transactions\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_item_transactions)\n),\n\nmarket_txs as (\n    select *\n    from incremental_txs\n    where to_address = '0xe53bf78f8b99b6d356f93f41afb9951168cca2c6'\n      and (\n          data like '0x9f37092a%' or -- sell\n          data like '0x096c5e1a%' -- buy\n      )\n      and status = true\n),\n\nmarket_events as (\n    select\n        market_txs.block_timestamp as block_timestamp,\n        market_txs.ingested_at as ingested_at,\n        market_txs.native_from_address as native_from_address,\n        market_txs.from_address as from_address,\n        market_txs.tx_hash as tx_hash,\n        market_txs.data as data,\n        incremental_logs.event_inputs as event_inputs,\n        incremental_logs.evm_contract_address as evm_contract_address\n    from market_txs\n    inner join incremental_logs\n        on market_txs.tx_hash = incremental_logs.tx_hash\n    where event_name = 'Transfer'\n),\n\ngives as (\n    select\n        tx_hash,\n        event_inputs:value as amount,\n        evm_contract_address as token\n    from market_events\n    where event_inputs:to = '0x0000000000000000000000000000000000000000'\n),\n\ntakes as (\n    select\n        tx_hash,\n        event_inputs:value as amount,\n        evm_contract_address as token\n    from market_events\n    where event_inputs:from = '0x0000000000000000000000000000000000000000'\n),\n\nfinal as (\n    select\n        market_txs.tx_hash as tx_hash,\n        block_timestamp,\n        ingested_at,\n        native_from_address,\n        from_address,\n        case substring(market_txs.data, 1, 10)\n            when '0x9f37092a' then 'Buy'\n            when '0x096c5e1a' then 'Sell'\n        end as market_action,\n        to_number(gives.amount)/pow(10, IFNULL(token_give.decimals, 0)) as amount_give,\n        gives.token as token_give_address,\n        token_give.token_symbol as token_give_symbol,\n        token_give.token_name as token_give_name,\n        to_number(takes.amount)/pow(10, IFNULL(token_take.decimals, 0)) as amount_take,\n        takes.token as token_take_address,\n        token_take.token_symbol as token_take_symbol,\n        token_take.token_name as token_take_name\n    from market_txs\n    inner join gives\n        on market_txs.tx_hash = gives.tx_hash\n    inner join takes\n        on market_txs.tx_hash = takes.tx_hash\n    left join tokens token_give\n        on gives.token = token_give.token_address\n    left join tokens token_take\n        on takes.token = token_take.token_address\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_item_transactions"}, "model.harmony.dfk_hero_updates": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='log_id',\n        incremental_strategy = 'delete+insert',\n        tags=['dfk'],\n        cluster_by=['block_timestamp']\n        ) \n}}\n\nwith\nevents as (\n    select\n        *\n    from {{ ref(\"logs\") }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n        and evm_contract_address = '0x5f753dcdf9b1ad9aabc1346614d1f4746fd6ce5c'\n        -- honestly not sure what event is this as its un-documented.\n        -- if you select distinct topics[0] from the above address, its the only topic that doesn't appear in 4byte.directory.\n        and topics[0] = '0x7be34da84992130f23438d167b22f7f7a246aaaf2d7e9dd3c988ee1672fe40fc'\n),\nfinal as (\n    select\n        block_timestamp,\n        ingested_at,\n        block_id,\n        log_id,\n        java_hextoint(substr(data,3+64+(0*64),64)) as hero_id,\n        java_hextoint(substr(data,3+64+(1*64),64)) as summoning_info_summonedtime,\n        java_hextoint(substr(data,3+64+(2*64),64)) as summoning_info_nextsummontime,\n        java_hextoint(substr(data,3+64+(3*64),64)) as summoning_info_summonerid,\n        java_hextoint(substr(data,3+64+(4*64),64)) as summoning_info_assistantid,\n        java_hextoint(substr(data,3+64+(5*64),64)) as summoning_info_summons,\n        java_hextoint(substr(data,3+64+(6*64),64)) as summoning_info_maxsummons,\n        substr(data,3+64+(7*64),64)::string as hero_info_statgenes,\n        substr(data,3+64+(8*64),64)::string as hero_info_visualgenes,\n        java_hextoint(substr(data,3+64+(9*64),64)) as hero_info_rarity,\n        java_hextoint(substr(data,3+64+(10*64),64)) as hero_info_shiny,\n        java_hextoint(substr(data,3+64+(11*64),64)) as hero_info_generation,\n        java_hextoint(substr(data,3+64+(12*64),64)) as hero_info_firstname,\n        java_hextoint(substr(data,3+64+(13*64),64)) as hero_info_lastname,\n        java_hextoint(substr(data,3+64+(14*64),64)) as hero_info_shinystyle,\n        java_hextoint(substr(data,3+64+(15*64),64)) as hero_info_class,\n        java_hextoint(substr(data,3+64+(16*64),64)) as hero_info_subclass,\n        java_hextoint(substr(data,3+64+(17*64),64)) as hero_state_staminafullat,\n        java_hextoint(substr(data,3+64+(18*64),64)) as hero_state_hpfullat,\n        java_hextoint(substr(data,3+64+(19*64),64)) as hero_state_mpfullat,\n        java_hextoint(substr(data,3+64+(20*64),64)) as hero_state_level,\n        java_hextoint(substr(data,3+64+(21*64),64)) as hero_state_xp,\n        java_hextoint(substr(data,3+64+(22*64),64)) as hero_state_currentquest,\n        java_hextoint(substr(data,3+64+(23*64),64)) as hero_state_sp,\n        java_hextoint(substr(data,3+64+(24*64),64)) as hero_state_status,\n        java_hextoint(substr(data,3+64+(25*64),64)) as hero_stats_strength,\n        java_hextoint(substr(data,3+64+(26*64),64)) as hero_stats_intelligence,\n        java_hextoint(substr(data,3+64+(27*64),64)) as hero_stats_wisdom,\n        java_hextoint(substr(data,3+64+(28*64),64)) as hero_stats_luck,\n        java_hextoint(substr(data,3+64+(29*64),64)) as hero_stats_agility,\n        java_hextoint(substr(data,3+64+(30*64),64)) as hero_stats_vitality,\n        java_hextoint(substr(data,3+64+(31*64),64)) as hero_stats_endurance,\n        java_hextoint(substr(data,3+64+(32*64),64)) as hero_stats_dexterity,\n        java_hextoint(substr(data,3+64+(33*64),64)) as hero_stats_hp,\n        java_hextoint(substr(data,3+64+(34*64),64)) as hero_stats_mp,\n        java_hextoint(substr(data,3+64+(35*64),64)) as hero_stats_stamina,\n        java_hextoint(substr(data,3+64+(36*64),64)) as hero_primary_stat_growth_strength,\n        java_hextoint(substr(data,3+64+(37*64),64)) as hero_primary_stat_growth_intelligence,\n        java_hextoint(substr(data,3+64+(38*64),64)) as hero_primary_stat_growth_wisdom,\n        java_hextoint(substr(data,3+64+(39*64),64)) as hero_primary_stat_growth_luck,\n        java_hextoint(substr(data,3+64+(40*64),64)) as hero_primary_stat_growth_agility,\n        java_hextoint(substr(data,3+64+(41*64),64)) as hero_primary_stat_growth_vitality,\n        java_hextoint(substr(data,3+64+(42*64),64)) as hero_primary_stat_growth_endurance,\n        java_hextoint(substr(data,3+64+(43*64),64)) as hero_primary_stat_growth_dexterity,\n        java_hextoint(substr(data,3+64+(44*64),64)) as hero_primary_stat_growth_hpsm,\n        java_hextoint(substr(data,3+64+(45*64),64)) as hero_primary_stat_growth_hprg,\n        java_hextoint(substr(data,3+64+(46*64),64)) as hero_primary_stat_growth_hplg,\n        java_hextoint(substr(data,3+64+(47*64),64)) as hero_primary_stat_growth_mpsm,\n        java_hextoint(substr(data,3+64+(48*64),64)) as hero_primary_stat_growth_mprg,\n        java_hextoint(substr(data,3+64+(49*64),64)) as hero_primary_stat_growth_mplg,\n        java_hextoint(substr(data,3+64+(50*64),64)) as hero_secondary_stat_growth_strength,\n        java_hextoint(substr(data,3+64+(51*64),64)) as hero_secondary_stat_growth_intelligence,\n        java_hextoint(substr(data,3+64+(52*64),64)) as hero_secondary_stat_growth_wisdom,\n        java_hextoint(substr(data,3+64+(53*64),64)) as hero_secondary_stat_growth_luck,\n        java_hextoint(substr(data,3+64+(54*64),64)) as hero_secondary_stat_growth_agility,\n        java_hextoint(substr(data,3+64+(55*64),64)) as hero_secondary_stat_growth_vitality,\n        java_hextoint(substr(data,3+64+(56*64),64)) as hero_secondary_stat_growth_endurance,\n        java_hextoint(substr(data,3+64+(57*64),64)) as hero_secondary_stat_growth_dexterity,\n        java_hextoint(substr(data,3+64+(58*64),64)) as hero_secondary_stat_growth_hpsm,\n        java_hextoint(substr(data,3+64+(59*64),64)) as hero_secondary_stat_growth_hprg,\n        java_hextoint(substr(data,3+64+(60*64),64)) as hero_secondary_stat_growth_hplg,\n        java_hextoint(substr(data,3+64+(61*64),64)) as hero_secondary_stat_growth_mpsm,\n        java_hextoint(substr(data,3+64+(62*64),64)) as hero_secondary_stat_growth_mprg,\n        java_hextoint(substr(data,3+64+(63*64),64)) as hero_secondary_stat_growth_mplg,\n        java_hextoint(substr(data,3+64+(64*64),64)) as hero_professions_mining,\n        java_hextoint(substr(data,3+64+(65*64),64)) as hero_professions_gardening,\n        java_hextoint(substr(data,3+64+(66*64),64)) as hero_professions_foraging,\n        java_hextoint(substr(data,3+64+(67*64),64)) as hero_professions_fishing\n    from events\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dfk"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "log_id", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "dfk", "dfk_hero_updates"], "unique_id": "model.harmony.dfk_hero_updates", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "dfk/dfk_hero_updates.sql", "original_file_path": "models/dfk/dfk_hero_updates.sql", "name": "dfk_hero_updates", "alias": "dfk_hero_updates", "checksum": {"name": "sha256", "checksum": "0a57a7564e12299488657874506db4c73d54393050ad8f51fda180752ce33936"}, "tags": ["dfk"], "refs": [["logs"]], "sources": [], "description": "Defi Kingdom Hero Updates - one row will be generated for each time a hero is updated", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "The time when the block was mined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The id of the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "log_id": {"name": "log_id", "description": "The id of the log.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_id": {"name": "hero_id", "description": "Token id of the DFK Hero.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "summoning_info_summonedtime": {"name": "summoning_info_summonedtime", "description": "The time the hero was summoned.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "summoning_info_nextsummontime": {"name": "summoning_info_nextsummontime", "description": "The next available time the hero can summon an additional hero.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "summoning_info_summonerid": {"name": "summoning_info_summonerid", "description": "The first parent of this hero.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "summoning_info_assistantid": {"name": "summoning_info_assistantid", "description": "The second parent of this hero.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "summoning_info_summons": {"name": "summoning_info_summons", "description": "The number of heroes this hero has already summoned.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "summoning_info_maxsummons": {"name": "summoning_info_maxsummons", "description": "The max number of heroes this hero can summon.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_info_statgenes": {"name": "hero_info_statgenes", "description": "The hero's genes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_info_visualgenes": {"name": "hero_info_visualgenes", "description": "The hero's visual genes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_info_rarity": {"name": "hero_info_rarity", "description": "The hero's rarity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_info_shiny": {"name": "hero_info_shiny", "description": "Whether or not the hero is a shiny.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_info_generation": {"name": "hero_info_generation", "description": "The Gen of the hero.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_info_firstname": {"name": "hero_info_firstname", "description": "the hero's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_info_lastname": {"name": "hero_info_lastname", "description": "the hero's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_info_shinystyle": {"name": "hero_info_shinystyle", "description": "If the hero is shiny.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_info_class": {"name": "hero_info_class", "description": "The class of the hero.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_info_subclass": {"name": "hero_info_subclass", "description": "The subclass of the hero.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_state_staminafullat": {"name": "hero_state_staminafullat", "description": "The hero's current max stamina.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_state_hpfullat": {"name": "hero_state_hpfullat", "description": "The hero's current max hit points.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_state_mpfullat": {"name": "hero_state_mpfullat", "description": "The hero's current max mana points.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_state_level": {"name": "hero_state_level", "description": "The hero's current level.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_state_xp": {"name": "hero_state_xp", "description": "The hero's current xp.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_state_currentquest": {"name": "hero_state_currentquest", "description": "The current quest.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_state_sp": {"name": "hero_state_sp", "description": "The hero's current SP.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_state_status": {"name": "hero_state_status", "description": "The hero's current status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_stats_strength": {"name": "hero_stats_strength", "description": "The hero's current strength stat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_stats_intelligence": {"name": "hero_stats_intelligence", "description": "The hero's current intelligence stat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_stats_wisdom": {"name": "hero_stats_wisdom", "description": "The hero's current wisdom stat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_stats_luck": {"name": "hero_stats_luck", "description": "The hero's current luck stat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_stats_agility": {"name": "hero_stats_agility", "description": "The hero's current agility stat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_stats_vitality": {"name": "hero_stats_vitality", "description": "The hero's current vitality stat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_stats_endurance": {"name": "hero_stats_endurance", "description": "The hero's current endurance stat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_stats_dexterity": {"name": "hero_stats_dexterity", "description": "The hero's current dexterity stat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_stats_hp": {"name": "hero_stats_hp", "description": "The hero's current hit points.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_stats_mp": {"name": "hero_stats_mp", "description": "The hero's current mana points.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_stats_stamina": {"name": "hero_stats_stamina", "description": "The hero's current stamina.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_strength": {"name": "hero_primary_stat_growth_strength", "description": "The current growth in the hero's Strength based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_intelligence": {"name": "hero_primary_stat_growth_intelligence", "description": "The current growth in the hero's Intelligence based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_wisdom": {"name": "hero_primary_stat_growth_wisdom", "description": "The current growth in the hero's Wisdom based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_luck": {"name": "hero_primary_stat_growth_luck", "description": "The current growth in the hero's Luck based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_agility": {"name": "hero_primary_stat_growth_agility", "description": "The current growth in the hero's Agility based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_vitality": {"name": "hero_primary_stat_growth_vitality", "description": "The current growth in the hero's Vitality based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_endurance": {"name": "hero_primary_stat_growth_endurance", "description": "The current growth in the hero's Endurance based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_dexterity": {"name": "hero_primary_stat_growth_dexterity", "description": "The current growth in the hero's Dexterity based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_hpsm": {"name": "hero_primary_stat_growth_hpsm", "description": "The current growth in the hero's Health Points (Small) based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_hprg": {"name": "hero_primary_stat_growth_hprg", "description": "The current growth in the hero's Health Points (Regular) based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_hplg": {"name": "hero_primary_stat_growth_hplg", "description": "The current growth in the hero's Health Points (Large) based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_mpsm": {"name": "hero_primary_stat_growth_mpsm", "description": "The current growth in the hero's Mana Points (Small) based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_mprg": {"name": "hero_primary_stat_growth_mprg", "description": "The current growth in the hero's Mana Points (Regular) based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_primary_stat_growth_mplg": {"name": "hero_primary_stat_growth_mplg", "description": "The current growth in the hero's Mana Points (Large) based on it's main class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_strength": {"name": "hero_secondary_stat_growth_strength", "description": "The current growth in the hero's Strength based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_intelligence": {"name": "hero_secondary_stat_growth_intelligence", "description": "The current growth in the hero's Intelligence based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_wisdom": {"name": "hero_secondary_stat_growth_wisdom", "description": "The current growth in the hero's Wisdom based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_luck": {"name": "hero_secondary_stat_growth_luck", "description": "The current growth in the hero's Luck based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_agility": {"name": "hero_secondary_stat_growth_agility", "description": "The current growth in the hero's Agility based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_vitality": {"name": "hero_secondary_stat_growth_vitality", "description": "The current growth in the hero's Vitality based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_endurance": {"name": "hero_secondary_stat_growth_endurance", "description": "The current growth in the hero's Endurance based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_dexterity": {"name": "hero_secondary_stat_growth_dexterity", "description": "The current growth in the hero's Dexterity based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_hpsm": {"name": "hero_secondary_stat_growth_hpsm", "description": "The current growth in the hero's Health Points (Small) based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_hprg": {"name": "hero_secondary_stat_growth_hprg", "description": "The current growth in the hero's Health Points (Regular) based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_hplg": {"name": "hero_secondary_stat_growth_hplg", "description": "The current growth in the hero's Health Points (Large) based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_mpsm": {"name": "hero_secondary_stat_growth_mpsm", "description": "The current growth in the hero's Mana Points (Small) based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_mprg": {"name": "hero_secondary_stat_growth_mprg", "description": "The current growth in the hero's Mana Points (Regular) based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_secondary_stat_growth_mplg": {"name": "hero_secondary_stat_growth_mplg", "description": "The current growth in the hero's Mana Points (Large) based on it's subclass.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_professions_mining": {"name": "hero_professions_mining", "description": "The hero's current mining stat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_professions_gardening": {"name": "hero_professions_gardening", "description": "The hero's current gardening stat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_professions_foraging": {"name": "hero_professions_foraging", "description": "The hero's current foraging stat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hero_professions_fishing": {"name": "hero_professions_fishing", "description": "The hero's current fishing stat.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/dfk/dfk_hero_updates.yaml", "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "log_id", "incremental_strategy": "delete+insert", "tags": ["dfk"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.607915, "compiled_sql": "\n\nwith\nevents as (\n    select\n        *\n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_hero_updates\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_hero_updates)\n        and evm_contract_address = '0x5f753dcdf9b1ad9aabc1346614d1f4746fd6ce5c'\n        -- honestly not sure what event is this as its un-documented.\n        -- if you select distinct topics[0] from the above address, its the only topic that doesn't appear in 4byte.directory.\n        and topics[0] = '0x7be34da84992130f23438d167b22f7f7a246aaaf2d7e9dd3c988ee1672fe40fc'\n),\nfinal as (\n    select\n        block_timestamp,\n        ingested_at,\n        block_id,\n        log_id,\n        java_hextoint(substr(data,3+64+(0*64),64)) as hero_id,\n        java_hextoint(substr(data,3+64+(1*64),64)) as summoning_info_summonedtime,\n        java_hextoint(substr(data,3+64+(2*64),64)) as summoning_info_nextsummontime,\n        java_hextoint(substr(data,3+64+(3*64),64)) as summoning_info_summonerid,\n        java_hextoint(substr(data,3+64+(4*64),64)) as summoning_info_assistantid,\n        java_hextoint(substr(data,3+64+(5*64),64)) as summoning_info_summons,\n        java_hextoint(substr(data,3+64+(6*64),64)) as summoning_info_maxsummons,\n        substr(data,3+64+(7*64),64)::string as hero_info_statgenes,\n        substr(data,3+64+(8*64),64)::string as hero_info_visualgenes,\n        java_hextoint(substr(data,3+64+(9*64),64)) as hero_info_rarity,\n        java_hextoint(substr(data,3+64+(10*64),64)) as hero_info_shiny,\n        java_hextoint(substr(data,3+64+(11*64),64)) as hero_info_generation,\n        java_hextoint(substr(data,3+64+(12*64),64)) as hero_info_firstname,\n        java_hextoint(substr(data,3+64+(13*64),64)) as hero_info_lastname,\n        java_hextoint(substr(data,3+64+(14*64),64)) as hero_info_shinystyle,\n        java_hextoint(substr(data,3+64+(15*64),64)) as hero_info_class,\n        java_hextoint(substr(data,3+64+(16*64),64)) as hero_info_subclass,\n        java_hextoint(substr(data,3+64+(17*64),64)) as hero_state_staminafullat,\n        java_hextoint(substr(data,3+64+(18*64),64)) as hero_state_hpfullat,\n        java_hextoint(substr(data,3+64+(19*64),64)) as hero_state_mpfullat,\n        java_hextoint(substr(data,3+64+(20*64),64)) as hero_state_level,\n        java_hextoint(substr(data,3+64+(21*64),64)) as hero_state_xp,\n        java_hextoint(substr(data,3+64+(22*64),64)) as hero_state_currentquest,\n        java_hextoint(substr(data,3+64+(23*64),64)) as hero_state_sp,\n        java_hextoint(substr(data,3+64+(24*64),64)) as hero_state_status,\n        java_hextoint(substr(data,3+64+(25*64),64)) as hero_stats_strength,\n        java_hextoint(substr(data,3+64+(26*64),64)) as hero_stats_intelligence,\n        java_hextoint(substr(data,3+64+(27*64),64)) as hero_stats_wisdom,\n        java_hextoint(substr(data,3+64+(28*64),64)) as hero_stats_luck,\n        java_hextoint(substr(data,3+64+(29*64),64)) as hero_stats_agility,\n        java_hextoint(substr(data,3+64+(30*64),64)) as hero_stats_vitality,\n        java_hextoint(substr(data,3+64+(31*64),64)) as hero_stats_endurance,\n        java_hextoint(substr(data,3+64+(32*64),64)) as hero_stats_dexterity,\n        java_hextoint(substr(data,3+64+(33*64),64)) as hero_stats_hp,\n        java_hextoint(substr(data,3+64+(34*64),64)) as hero_stats_mp,\n        java_hextoint(substr(data,3+64+(35*64),64)) as hero_stats_stamina,\n        java_hextoint(substr(data,3+64+(36*64),64)) as hero_primary_stat_growth_strength,\n        java_hextoint(substr(data,3+64+(37*64),64)) as hero_primary_stat_growth_intelligence,\n        java_hextoint(substr(data,3+64+(38*64),64)) as hero_primary_stat_growth_wisdom,\n        java_hextoint(substr(data,3+64+(39*64),64)) as hero_primary_stat_growth_luck,\n        java_hextoint(substr(data,3+64+(40*64),64)) as hero_primary_stat_growth_agility,\n        java_hextoint(substr(data,3+64+(41*64),64)) as hero_primary_stat_growth_vitality,\n        java_hextoint(substr(data,3+64+(42*64),64)) as hero_primary_stat_growth_endurance,\n        java_hextoint(substr(data,3+64+(43*64),64)) as hero_primary_stat_growth_dexterity,\n        java_hextoint(substr(data,3+64+(44*64),64)) as hero_primary_stat_growth_hpsm,\n        java_hextoint(substr(data,3+64+(45*64),64)) as hero_primary_stat_growth_hprg,\n        java_hextoint(substr(data,3+64+(46*64),64)) as hero_primary_stat_growth_hplg,\n        java_hextoint(substr(data,3+64+(47*64),64)) as hero_primary_stat_growth_mpsm,\n        java_hextoint(substr(data,3+64+(48*64),64)) as hero_primary_stat_growth_mprg,\n        java_hextoint(substr(data,3+64+(49*64),64)) as hero_primary_stat_growth_mplg,\n        java_hextoint(substr(data,3+64+(50*64),64)) as hero_secondary_stat_growth_strength,\n        java_hextoint(substr(data,3+64+(51*64),64)) as hero_secondary_stat_growth_intelligence,\n        java_hextoint(substr(data,3+64+(52*64),64)) as hero_secondary_stat_growth_wisdom,\n        java_hextoint(substr(data,3+64+(53*64),64)) as hero_secondary_stat_growth_luck,\n        java_hextoint(substr(data,3+64+(54*64),64)) as hero_secondary_stat_growth_agility,\n        java_hextoint(substr(data,3+64+(55*64),64)) as hero_secondary_stat_growth_vitality,\n        java_hextoint(substr(data,3+64+(56*64),64)) as hero_secondary_stat_growth_endurance,\n        java_hextoint(substr(data,3+64+(57*64),64)) as hero_secondary_stat_growth_dexterity,\n        java_hextoint(substr(data,3+64+(58*64),64)) as hero_secondary_stat_growth_hpsm,\n        java_hextoint(substr(data,3+64+(59*64),64)) as hero_secondary_stat_growth_hprg,\n        java_hextoint(substr(data,3+64+(60*64),64)) as hero_secondary_stat_growth_hplg,\n        java_hextoint(substr(data,3+64+(61*64),64)) as hero_secondary_stat_growth_mpsm,\n        java_hextoint(substr(data,3+64+(62*64),64)) as hero_secondary_stat_growth_mprg,\n        java_hextoint(substr(data,3+64+(63*64),64)) as hero_secondary_stat_growth_mplg,\n        java_hextoint(substr(data,3+64+(64*64),64)) as hero_professions_mining,\n        java_hextoint(substr(data,3+64+(65*64),64)) as hero_professions_gardening,\n        java_hextoint(substr(data,3+64+(66*64),64)) as hero_professions_foraging,\n        java_hextoint(substr(data,3+64+(67*64),64)) as hero_professions_fishing\n    from events\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_hero_updates"}, "model.harmony.dfk_seed_liquidity_actions": {"raw_sql": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='log_id',\r\n        tags=['dfk', 'dfk_seed_liquidity_actions'],\r\n        cluster_by=['block_timestamp']\r\n        )\r\n}}\r\n\r\nwith \r\n\r\nlogs as (\r\n    select * \r\n    from {{ ref('logs') }}\r\n    where {{ incremental_load_filter(\"ingested_at\") }}\r\n),\r\n\r\ntxs_incremental as (\r\n    select * \r\n    from {{ ref('txs') }}\r\n    where {{ incremental_load_filter(\"ingested_at\") }}\r\n),\r\n\r\nliquidity_pools as (\r\n    select * \r\n    from {{ ref('liquidity_pools') }}\r\n),\r\n\r\ntokens as (\r\n    select * \r\n    from {{ ref('tokens') }}\r\n),\r\n\r\ntxs as (\r\n    select \r\n        tx_hash \r\n    from txs_incremental\r\n    where to_address = '0x24ad62502d1c652cc7684081169d04896ac20f30' -- UniswapV2Router address\r\n        and substr(data,0,10) \r\n            in ('0x02751cec', -- RemoveLiquidityETH\r\n                '0xf305d719', -- AddLiquidityETH\r\n                '0xbaa2abde', -- RemoveLiquidity\r\n                '0xe8e33700') -- AddLiquidity\r\n),\r\n\r\nfinal_table as (\r\n    select\r\n        logs.log_id,\r\n        logs.block_id,\r\n        logs.block_timestamp,\r\n        logs.ingested_at,\r\n        logs.tx_hash,\r\n        logs.event_inputs:amount0 / pow(10, t0.decimals) \r\n            as amount_0,\r\n        logs.event_inputs:amount1 / pow(10, t1.decimals)\r\n            as amount_1,\r\n        logs.native_contract_address \r\n            as one_lp_address,\r\n        logs.evm_contract_address \r\n            as eth_lp_address,\r\n        liquidity_pools.pool_name,\r\n        liquidity_pools.token0 \r\n            as token0_address,\r\n        liquidity_pools.token1 \r\n            as token1_address,\r\n        t0.token_name \r\n            as token0_name,\r\n        t1.token_name \r\n            as token1_name,\r\n        case\r\n            when event_name = 'Mint' \r\n                then 'ADD_LIQUIDITY' \r\n            when event_name = 'Burn' \r\n                then 'REMOVE_LIQUIDITY'\r\n        end as action\r\n\r\n    from logs\r\n        left join liquidity_pools \r\n            on logs.evm_contract_address = liquidity_pools.pool_address\r\n        left join tokens t0 \r\n            on liquidity_pools.token0 = t0.token_address\r\n        left join tokens t1 \r\n            on liquidity_pools.token1 = t1.token_address\r\n    where tx_hash in (select tx_hash from txs)\r\n        and (event_name = 'Mint' or \r\n             event_name = 'Burn')\r\n)\r\n\r\nselect * from final_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.create_java_hextoint", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.logs", "model.harmony.txs", "model.harmony.liquidity_pools", "model.harmony.tokens"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dfk", "dfk_seed_liquidity_actions"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "log_id", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ create_java_hextoint() }}", "transaction": true, "index": null}]}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "dfk", "dfk_seed_liquidity_actions"], "unique_id": "model.harmony.dfk_seed_liquidity_actions", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "dfk/dfk_seed_liquidity_actions.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.sql", "name": "dfk_seed_liquidity_actions", "alias": "dfk_seed_liquidity_actions", "checksum": {"name": "sha256", "checksum": "3bf0e9a3b5a83826df9438665469ff91ef9d7645ced28c96071094ff6980a168"}, "tags": ["dfk", "dfk_seed_liquidity_actions"], "refs": [["logs"], ["txs"], ["liquidity_pools"], ["tokens"]], "sources": [], "description": "DeFi Kingdom Seed Liquidity Actions", "columns": {"log_id": {"name": "log_id", "description": "Log identifier composed of tx_hash-event_index", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The block number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp for when the block was collated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the event was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "Hash of the transaction (32 Bytes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_0": {"name": "amount_0", "description": "The quantity of the first token being added or removed from the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_1": {"name": "amount_1", "description": "The quantity of the second token being added or removed from the pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "one_lp_address": {"name": "one_lp_address", "description": "ONE native address of the liquidity pool involved in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eth_lp_address": {"name": "eth_lp_address", "description": "EVM address of the liquidity pool involved in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_name": {"name": "pool_name", "description": "The name of the liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0_address": {"name": "token0_address", "description": "EVM address of the first token in the token pair.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1_address": {"name": "token1_address", "description": "EVM address of the second token in the token pair.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0_name": {"name": "token0_name", "description": "Name of the first token in the token pair.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1_name": {"name": "token1_name", "description": "Name of the second token in the token pair.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action": {"name": "action", "description": "The action executed to the liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/dfk/dfk_seed_liquidity_actions.yml", "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "pre-hook": "{{ create_java_hextoint() }}", "materialized": "incremental", "unique_key": "log_id", "tags": ["dfk", "dfk_seed_liquidity_actions"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.568398, "compiled_sql": "\n\nwith \n\nlogs as (\n    select * \n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_seed_liquidity_actions\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_seed_liquidity_actions)\n),\n\ntxs_incremental as (\n    select * \n    from HARMONY.DEV.txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.dfk_seed_liquidity_actions\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.dfk_seed_liquidity_actions)\n),\n\nliquidity_pools as (\n    select * \n    from HARMONY.DEV.liquidity_pools\n),\n\ntokens as (\n    select * \n    from HARMONY.DEV.tokens\n),\n\ntxs as (\n    select \n        tx_hash \n    from txs_incremental\n    where to_address = '0x24ad62502d1c652cc7684081169d04896ac20f30' -- UniswapV2Router address\n        and substr(data,0,10) \n            in ('0x02751cec', -- RemoveLiquidityETH\n                '0xf305d719', -- AddLiquidityETH\n                '0xbaa2abde', -- RemoveLiquidity\n                '0xe8e33700') -- AddLiquidity\n),\n\nfinal_table as (\n    select\n        logs.log_id,\n        logs.block_id,\n        logs.block_timestamp,\n        logs.ingested_at,\n        logs.tx_hash,\n        logs.event_inputs:amount0 / pow(10, t0.decimals) \n            as amount_0,\n        logs.event_inputs:amount1 / pow(10, t1.decimals)\n            as amount_1,\n        logs.native_contract_address \n            as one_lp_address,\n        logs.evm_contract_address \n            as eth_lp_address,\n        liquidity_pools.pool_name,\n        liquidity_pools.token0 \n            as token0_address,\n        liquidity_pools.token1 \n            as token1_address,\n        t0.token_name \n            as token0_name,\n        t1.token_name \n            as token1_name,\n        case\n            when event_name = 'Mint' \n                then 'ADD_LIQUIDITY' \n            when event_name = 'Burn' \n                then 'REMOVE_LIQUIDITY'\n        end as action\n\n    from logs\n        left join liquidity_pools \n            on logs.evm_contract_address = liquidity_pools.pool_address\n        left join tokens t0 \n            on liquidity_pools.token0 = t0.token_address\n        left join tokens t1 \n            on liquidity_pools.token1 = t1.token_address\n    where tx_hash in (select tx_hash from txs)\n        and (event_name = 'Mint' or \n             event_name = 'Burn')\n)\n\nselect * from final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_seed_liquidity_actions"}, "model.harmony.viperswap_lp_actions": {"raw_sql": "{{\n    config(\n        materialized = 'incremental',\n        unique_key = 'log_id',\n        tags = ['models', 'viperswap', 'viperswap_lp_actions'],\n        cluster_by = ['block_timestamp']\n    )\n}}\n\nwith\n\nlogs as (\n    select\n        *\n    from {{ ref('logs') }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\ntxs as (\n    select\n        *\n    from {{ ref('txs') }}\n    where {{ incremental_load_filter(\"ingested_at\") }}\n),\n\nliquidity_pools as (\n    select\n        *\n    from {{ ref('liquidity_pools') }}\n),\n\ntokens as (\n    select\n        token_address,\n        token_name,\n        decimals\n    from {{ ref('tokens') }}\n),\n\nprices as (\n    select\n        block_date,\n        token_address,\n        token_symbol,\n        usd_price\n    from {{ ref('tokenprices') }}\n),\n\nliquidity_events as (\n    select\n        log_id,\n        block_id,\n        block_timestamp,\n        ingested_at,\n        tx_hash,\n        evm_contract_address AS pool_address,\n\n        case\n            when event_name = 'Burn' then 'remove_liquidity'\n            when event_name = 'Mint' then 'add_liquidity'\n            else 'NA'\n        end as action,\n\n        event_inputs:amount0::INT AS amount0_raw,\n        event_inputs:amount1::INT AS amount1_raw\n    from logs\n    where (event_name = 'Burn'\n        OR event_name = 'Mint')\n        AND event_inputs:sender = '0xf012702a5f0e54015362cbca26a26fc90aa832a3' -- ViperSwap's UniswapV2Router02 forked contract\n),\n\nliquidity_tokens as (\n    select\n        tx_hash,\n        substring(data, 1, 10),\n        concat('0x', substring(data, 35, 40)) as token0,\n        --0xf305d719 - function signature for addLiquidityETH\n        --0x02751cec - function signature for removeLiquidityETH\n        --0xcf664087a5bb0237a0bad6742852ec6c8d69a27a - WONE token\n        case\n            when substring(data, 1, 10) = '0xf305d719' then '0xcf664087a5bb0237a0bad6742852ec6c8d69a27a'\n            when substring(data, 1, 10) = '0x02751cec' then '0xcf664087a5bb0237a0bad6742852ec6c8d69a27a'\n        else concat('0x', substring(data, 99, 40))\n        end as token1\n    from txs\n    where substring(data, 1, 10) in ('0xf305d719', -- function signature for addLiquidityETH; token1 is WONE\n                                 '0xe8e33700', -- function signature for addLiquidity\n                                 '0x02751cec', -- function signature for removeLiquidityETH; token1 is WONE\n                                 '0xbaa2abde') -- function signature for removeLiquidity\n),\n\nliquidity_providers as (\n    select\n        tx_hash,\n        from_address as liquidity_provider\n    from txs\n),\n\nliquidity_events_pools as (\n    select\n        events.log_id,\n        events.block_id,\n        events.block_timestamp,\n        events.ingested_at,\n        events.tx_hash,\n        events.action,\n        events.pool_address,\n        pools.pool_name,\n        liquidity_tokens.token0,\n        liquidity_tokens.token1,\n        events.amount0_raw,\n        events.amount1_raw\n    from liquidity_events as events\n    left join liquidity_tokens\n        on events.tx_hash = liquidity_tokens.tx_hash\n    left join liquidity_pools as pools\n        on events.pool_address = pools.pool_address\n),\n\ntoken_prices_usd as (\n    select\n        prices.block_date AS date,\n        prices.token_address,\n        prices.token_symbol,\n        tokens.token_name,\n        tokens.decimals,\n        prices.usd_price\n    from tokens \n    left join prices\n        on tokens.token_address = prices.token_address\n),\n\nfinal as (\n    select\n        events_pools.log_id,\n        events_pools.block_id,\n        events_pools.block_timestamp,\n        events_pools.ingested_at,\n        events_pools.tx_hash,\n        providers.liquidity_provider,\n        events_pools.action,\n        events_pools.pool_address,\n        events_pools.pool_name,\n        events_pools.token0,\n        prices_0.token_symbol as token0_symbol,\n        prices_0.token_name as token0_name,\n        events_pools.token1,\n        prices_1.token_symbol as token1_symbol,\n        prices_1.token_name as token1_name,\n        events_pools.amount0_raw,\n        events_pools.amount0_raw / pow(10, prices_0.decimals) as amount0_adjusted,\n        events_pools.amount1_raw,\n        events_pools.amount1_raw / pow(10, prices_1.decimals) as amount1_adjusted,\n        events_pools.amount0_raw / pow(10, prices_0.decimals) * prices_0.usd_price as amount0_usd,\n        events_pools.amount1_raw / pow(10, prices_1.decimals) * prices_1.usd_price as amount1_usd\n    from liquidity_events_pools as events_pools\n    left join liquidity_providers as providers\n        on events_pools.tx_hash = providers.tx_hash\n    left join token_prices_usd as prices_0\n        on events_pools.token0 = prices_0.token_address\n        and date_trunc('day', events_pools.block_timestamp) = prices_0.date\n    left join token_prices_usd AS prices_1\n        on events_pools.token1 = prices_1.token_address\n        and date_trunc('day', events_pools.block_timestamp) = prices_1.date\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.harmony.incremental_load_filter", "macro.harmony.grant_data_share_statements"], "nodes": ["model.harmony.logs", "model.harmony.txs", "model.harmony.liquidity_pools", "model.harmony.tokens", "model.harmony.tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["models", "viperswap", "viperswap_lp_actions"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "core": null, "cluster_by": ["block_timestamp"], "unique_key": "log_id", "post-hook": [{"sql": "{{ grant_data_share_statements() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "viperswap", "viperswap_lp_actions"], "unique_id": "model.harmony.viperswap_lp_actions", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "viperswap/viperswap_lp_actions.sql", "original_file_path": "models/viperswap/viperswap_lp_actions.sql", "name": "viperswap_lp_actions", "alias": "viperswap_lp_actions", "checksum": {"name": "sha256", "checksum": "45a563d5b3a7c3429d52ac58510add0331f58f52fb4825eb182b85248a1a8e49"}, "tags": ["models", "viperswap", "viperswap_lp_actions"], "refs": [["logs"], ["txs"], ["liquidity_pools"], ["tokens"], ["tokenprices"]], "sources": [], "description": "ViperSwap liquidity actions; add or remove liquidity", "columns": {"log_id": {"name": "log_id", "description": "Log identifier composed of tx_hash-event_index", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "Block number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp for when the block was collated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The timestamp for when the event was ingested into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_hash": {"name": "tx_hash", "description": "The hash of the transaction (32 Bytes)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "liquidity_provider": {"name": "liquidity_provider", "description": "EVM address of the liquidity provider", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action": {"name": "action", "description": "The type of action executed to the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_address": {"name": "pool_address", "description": "EVM address of the liquidity pool involved in the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_name": {"name": "pool_name", "description": "Name of liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0": {"name": "token0", "description": "EVM address of the first token in the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0_symbol": {"name": "token0_symbol", "description": "Symbol of the first token in the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token0_name": {"name": "token0_name", "description": "Name of the first token in the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1": {"name": "token1", "description": "EVM address of the second token in the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1_symbol": {"name": "token1_symbol", "description": "Symbol of the second token in the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token1_name": {"name": "token1_name", "description": "Name of the second token in the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount0_raw": {"name": "amount0_raw", "description": "The raw quantity of the first token being added or removed from the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount0_adjusted": {"name": "amount0_adjusted", "description": "The decimal-adjusted quantity of the first token being added or removed from the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount1_raw": {"name": "amount1_raw", "description": "The raw quantity of the second token being added or removed from the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount1_adjusted": {"name": "amount1_adjusted", "description": "The decimal-adjusted quantity of the first token being added or removed from the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount0_usd": {"name": "amount0_usd", "description": "The USD value of the first token being added or removed from the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount1_usd": {"name": "amount1_usd", "description": "The USD value of the first token being added or removed from the liquidity pool", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "harmony://models/viperswap/viperswap_lp_actions.yml", "compiled_path": "target/compiled/harmony/models/viperswap/viperswap_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ grant_data_share_statements() }}", "core": null, "materialized": "incremental", "unique_key": "log_id", "tags": ["models", "viperswap", "viperswap_lp_actions"], "cluster_by": ["block_timestamp"]}, "created_at": 1652754672.58868, "compiled_sql": "\n\nwith\n\nlogs as (\n    select\n        *\n    from HARMONY.DEV.logs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.viperswap_lp_actions\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.viperswap_lp_actions)\n),\n\ntxs as (\n    select\n        *\n    from HARMONY.DEV.txs\n    where -- dbt makes it easy to query your target table by using the \"HARMONY.DEV.viperswap_lp_actions\" variable.\n    \n      ingested_at > (select max(ingested_at) from HARMONY.DEV.viperswap_lp_actions)\n),\n\nliquidity_pools as (\n    select\n        *\n    from HARMONY.DEV.liquidity_pools\n),\n\ntokens as (\n    select\n        token_address,\n        token_name,\n        decimals\n    from HARMONY.DEV.tokens\n),\n\nprices as (\n    select\n        block_date,\n        token_address,\n        token_symbol,\n        usd_price\n    from HARMONY.DEV.tokenprices\n),\n\nliquidity_events as (\n    select\n        log_id,\n        block_id,\n        block_timestamp,\n        ingested_at,\n        tx_hash,\n        evm_contract_address AS pool_address,\n\n        case\n            when event_name = 'Burn' then 'remove_liquidity'\n            when event_name = 'Mint' then 'add_liquidity'\n            else 'NA'\n        end as action,\n\n        event_inputs:amount0::INT AS amount0_raw,\n        event_inputs:amount1::INT AS amount1_raw\n    from logs\n    where (event_name = 'Burn'\n        OR event_name = 'Mint')\n        AND event_inputs:sender = '0xf012702a5f0e54015362cbca26a26fc90aa832a3' -- ViperSwap's UniswapV2Router02 forked contract\n),\n\nliquidity_tokens as (\n    select\n        tx_hash,\n        substring(data, 1, 10),\n        concat('0x', substring(data, 35, 40)) as token0,\n        --0xf305d719 - function signature for addLiquidityETH\n        --0x02751cec - function signature for removeLiquidityETH\n        --0xcf664087a5bb0237a0bad6742852ec6c8d69a27a - WONE token\n        case\n            when substring(data, 1, 10) = '0xf305d719' then '0xcf664087a5bb0237a0bad6742852ec6c8d69a27a'\n            when substring(data, 1, 10) = '0x02751cec' then '0xcf664087a5bb0237a0bad6742852ec6c8d69a27a'\n        else concat('0x', substring(data, 99, 40))\n        end as token1\n    from txs\n    where substring(data, 1, 10) in ('0xf305d719', -- function signature for addLiquidityETH; token1 is WONE\n                                 '0xe8e33700', -- function signature for addLiquidity\n                                 '0x02751cec', -- function signature for removeLiquidityETH; token1 is WONE\n                                 '0xbaa2abde') -- function signature for removeLiquidity\n),\n\nliquidity_providers as (\n    select\n        tx_hash,\n        from_address as liquidity_provider\n    from txs\n),\n\nliquidity_events_pools as (\n    select\n        events.log_id,\n        events.block_id,\n        events.block_timestamp,\n        events.ingested_at,\n        events.tx_hash,\n        events.action,\n        events.pool_address,\n        pools.pool_name,\n        liquidity_tokens.token0,\n        liquidity_tokens.token1,\n        events.amount0_raw,\n        events.amount1_raw\n    from liquidity_events as events\n    left join liquidity_tokens\n        on events.tx_hash = liquidity_tokens.tx_hash\n    left join liquidity_pools as pools\n        on events.pool_address = pools.pool_address\n),\n\ntoken_prices_usd as (\n    select\n        prices.block_date AS date,\n        prices.token_address,\n        prices.token_symbol,\n        tokens.token_name,\n        tokens.decimals,\n        prices.usd_price\n    from tokens \n    left join prices\n        on tokens.token_address = prices.token_address\n),\n\nfinal as (\n    select\n        events_pools.log_id,\n        events_pools.block_id,\n        events_pools.block_timestamp,\n        events_pools.ingested_at,\n        events_pools.tx_hash,\n        providers.liquidity_provider,\n        events_pools.action,\n        events_pools.pool_address,\n        events_pools.pool_name,\n        events_pools.token0,\n        prices_0.token_symbol as token0_symbol,\n        prices_0.token_name as token0_name,\n        events_pools.token1,\n        prices_1.token_symbol as token1_symbol,\n        prices_1.token_name as token1_name,\n        events_pools.amount0_raw,\n        events_pools.amount0_raw / pow(10, prices_0.decimals) as amount0_adjusted,\n        events_pools.amount1_raw,\n        events_pools.amount1_raw / pow(10, prices_1.decimals) as amount1_adjusted,\n        events_pools.amount0_raw / pow(10, prices_0.decimals) * prices_0.usd_price as amount0_usd,\n        events_pools.amount1_raw / pow(10, prices_1.decimals) * prices_1.usd_price as amount1_usd\n    from liquidity_events_pools as events_pools\n    left join liquidity_providers as providers\n        on events_pools.tx_hash = providers.tx_hash\n    left join token_prices_usd as prices_0\n        on events_pools.token0 = prices_0.token_address\n        and date_trunc('day', events_pools.block_timestamp) = prices_0.date\n    left join token_prices_usd AS prices_1\n        on events_pools.token1 = prices_1.token_address\n        and date_trunc('day', events_pools.block_timestamp) = prices_1.date\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.viperswap_lp_actions"}, "seed.harmony.dfk_tokens": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "defikingdoms_dex", "dfk_tokens"], "unique_id": "seed.harmony.dfk_tokens", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "defikingdoms_dex/dfk_tokens.csv", "original_file_path": "data/defikingdoms_dex/dfk_tokens.csv", "name": "dfk_tokens", "alias": "dfk_tokens", "checksum": {"name": "sha256", "checksum": "2037dd7a01423afe8786b4ffab1bd6fd781ee28979708ba59d96523503de284f"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1652754672.24343, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_tokens"}, "seed.harmony.dfk_dex_lp_labels": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "defikingdoms_dex", "dfk_dex_lp_labels"], "unique_id": "seed.harmony.dfk_dex_lp_labels", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "defikingdoms_dex/dfk_dex_lp_labels.csv", "original_file_path": "data/defikingdoms_dex/dfk_dex_lp_labels.csv", "name": "dfk_dex_lp_labels", "alias": "dfk_dex_lp_labels", "checksum": {"name": "sha256", "checksum": "9214bc1104737b845ed968b11fe3ff3a91e3803d9ede0574834e26428bd73583"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1652754672.24415, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_dex_lp_labels"}, "seed.harmony.backfill_pools_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "harmony_tokens", "backfill_pools_data"], "unique_id": "seed.harmony.backfill_pools_data", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "harmony_tokens/backfill_pools_data.csv", "original_file_path": "data/harmony_tokens/backfill_pools_data.csv", "name": "backfill_pools_data", "alias": "backfill_pools_data", "checksum": {"name": "sha256", "checksum": "1ec361e38c92e74abcfc33845c1b0029d3ce8c4ae287d4d5506dc22e26064fb9"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1652754672.244892, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.backfill_pools_data"}, "seed.harmony.harmony_explorer_tokens": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "harmony_tokens", "harmony_explorer_tokens"], "unique_id": "seed.harmony.harmony_explorer_tokens", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "harmony_tokens/harmony_explorer_tokens.csv", "original_file_path": "data/harmony_tokens/harmony_explorer_tokens.csv", "name": "harmony_explorer_tokens", "alias": "harmony_explorer_tokens", "checksum": {"name": "sha256", "checksum": "ff0e764b942b09239c578eb658e931ba04d217e9e489689f991971216d91693e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1652754672.245557, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.harmony_explorer_tokens"}, "seed.harmony.harmony_stable_tokens": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "harmony_tokens", "harmony_stable_tokens"], "unique_id": "seed.harmony.harmony_stable_tokens", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "harmony_tokens/harmony_stable_tokens.csv", "original_file_path": "data/harmony_tokens/harmony_stable_tokens.csv", "name": "harmony_stable_tokens", "alias": "harmony_stable_tokens", "checksum": {"name": "sha256", "checksum": "a1eedd7fd2881c246ba1c321d62d20f3e55e985ca63417d755d31cab39b87c47"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1652754672.246219, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.harmony_stable_tokens"}, "seed.harmony.backfill_tokens_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "harmony_tokens", "backfill_tokens_data"], "unique_id": "seed.harmony.backfill_tokens_data", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "harmony_tokens/backfill_tokens_data.csv", "original_file_path": "data/harmony_tokens/backfill_tokens_data.csv", "name": "backfill_tokens_data", "alias": "backfill_tokens_data", "checksum": {"name": "sha256", "checksum": "7f7c2532e27c42b2efed77a74a820470cb81dadc96b8399605c958dab6366830"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1652754672.2468731, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.backfill_tokens_data"}, "seed.harmony.tranquil_market_labels": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "tranquil", "tranquil_market_labels"], "unique_id": "seed.harmony.tranquil_market_labels", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "tranquil/tranquil_market_labels.csv", "original_file_path": "data/tranquil/tranquil_market_labels.csv", "name": "tranquil_market_labels", "alias": "tranquil_market_labels", "checksum": {"name": "sha256", "checksum": "ef3b84c043ca3cae0bd1b587d96f64aeab527cecee4444a81d5eb1f32a363ec3"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1652754672.247631, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.tranquil_market_labels"}, "seed.harmony.dfk_item_to_gold": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "HARMONY", "schema": "DEV", "fqn": ["harmony", "defikingdoms_itemtogold", "dfk_item_to_gold"], "unique_id": "seed.harmony.dfk_item_to_gold", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "defikingdoms_itemtogold/dfk_item_to_gold.csv", "original_file_path": "data/defikingdoms_itemtogold/dfk_item_to_gold.csv", "name": "dfk_item_to_gold", "alias": "dfk_item_to_gold", "checksum": {"name": "sha256", "checksum": "18c598ba5cf0502048a9f904305da24a77385e0f59b84da75151ce11a9711904"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1652754672.248286, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HARMONY.DEV.dfk_item_to_gold"}, "test.harmony.not_null_metric_gas_used_count_metric_date.4a0eb3c505": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_date", "model": "{{ get_where_subquery(ref('metric_gas_used_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_gas_used_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_gas_used_count_metric_date"], "unique_id": "test.harmony.not_null_metric_gas_used_count_metric_date.4a0eb3c505", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_gas_used_count_metric_date.sql", "original_file_path": "models/metrics/metric_gas_used_count.yml", "name": "not_null_metric_gas_used_count_metric_date", "alias": "not_null_metric_gas_used_count_metric_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_gas_used_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_gas_used_count.yml/not_null_metric_gas_used_count_metric_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.2865422, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_gas_used_count\nwhere metric_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "metric_date", "file_key_name": "models.metric_gas_used_count"}, "test.harmony.not_null_metric_gas_used_count_metric_period.452eb8b3d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_period", "model": "{{ get_where_subquery(ref('metric_gas_used_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_gas_used_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_gas_used_count_metric_period"], "unique_id": "test.harmony.not_null_metric_gas_used_count_metric_period.452eb8b3d7", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_gas_used_count_metric_period.sql", "original_file_path": "models/metrics/metric_gas_used_count.yml", "name": "not_null_metric_gas_used_count_metric_period", "alias": "not_null_metric_gas_used_count_metric_period", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_gas_used_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_gas_used_count.yml/not_null_metric_gas_used_count_metric_period.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.288699, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_gas_used_count\nwhere metric_period is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "metric_period", "file_key_name": "models.metric_gas_used_count"}, "test.harmony.not_null_metric_gas_used_count_gas_total.ea230e6e01": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_total", "model": "{{ get_where_subquery(ref('metric_gas_used_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_gas_used_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_gas_used_count_gas_total"], "unique_id": "test.harmony.not_null_metric_gas_used_count_gas_total.ea230e6e01", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_gas_used_count_gas_total.sql", "original_file_path": "models/metrics/metric_gas_used_count.yml", "name": "not_null_metric_gas_used_count_gas_total", "alias": "not_null_metric_gas_used_count_gas_total", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_gas_used_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_gas_used_count.yml/not_null_metric_gas_used_count_gas_total.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.289496, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_gas_used_count\nwhere gas_total is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gas_total", "file_key_name": "models.metric_gas_used_count"}, "test.harmony.not_null_metric_transactions_count_metric_date.a0ba3ef0a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_date", "model": "{{ get_where_subquery(ref('metric_transactions_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_transactions_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_transactions_count_metric_date"], "unique_id": "test.harmony.not_null_metric_transactions_count_metric_date.a0ba3ef0a1", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_transactions_count_metric_date.sql", "original_file_path": "models/metrics/metric_transactions_count.yml", "name": "not_null_metric_transactions_count_metric_date", "alias": "not_null_metric_transactions_count_metric_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_transactions_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_transactions_count.yml/not_null_metric_transactions_count_metric_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.291201, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_transactions_count\nwhere metric_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "metric_date", "file_key_name": "models.metric_transactions_count"}, "test.harmony.not_null_metric_transactions_count_metric_period.5c51be1b98": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_period", "model": "{{ get_where_subquery(ref('metric_transactions_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_transactions_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_transactions_count_metric_period"], "unique_id": "test.harmony.not_null_metric_transactions_count_metric_period.5c51be1b98", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_transactions_count_metric_period.sql", "original_file_path": "models/metrics/metric_transactions_count.yml", "name": "not_null_metric_transactions_count_metric_period", "alias": "not_null_metric_transactions_count_metric_period", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_transactions_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_transactions_count.yml/not_null_metric_transactions_count_metric_period.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.291988, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_transactions_count\nwhere metric_period is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "metric_period", "file_key_name": "models.metric_transactions_count"}, "test.harmony.not_null_metric_transactions_count_txs_count.4e26fab0f3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "txs_count", "model": "{{ get_where_subquery(ref('metric_transactions_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_transactions_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_transactions_count_txs_count"], "unique_id": "test.harmony.not_null_metric_transactions_count_txs_count.4e26fab0f3", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_transactions_count_txs_count.sql", "original_file_path": "models/metrics/metric_transactions_count.yml", "name": "not_null_metric_transactions_count_txs_count", "alias": "not_null_metric_transactions_count_txs_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_transactions_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_transactions_count.yml/not_null_metric_transactions_count_txs_count.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.292751, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_transactions_count\nwhere txs_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "txs_count", "file_key_name": "models.metric_transactions_count"}, "test.harmony.not_null_metric_miner_count_metric_date.c62b8a3b14": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_date", "model": "{{ get_where_subquery(ref('metric_miner_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_miner_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_miner_count_metric_date"], "unique_id": "test.harmony.not_null_metric_miner_count_metric_date.c62b8a3b14", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_miner_count_metric_date.sql", "original_file_path": "models/metrics/metric_miner_count.yml", "name": "not_null_metric_miner_count_metric_date", "alias": "not_null_metric_miner_count_metric_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_miner_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_miner_count.yml/not_null_metric_miner_count_metric_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.2944021, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_miner_count\nwhere metric_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "metric_date", "file_key_name": "models.metric_miner_count"}, "test.harmony.not_null_metric_miner_count_metric_period.0c3abeb408": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_period", "model": "{{ get_where_subquery(ref('metric_miner_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_miner_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_miner_count_metric_period"], "unique_id": "test.harmony.not_null_metric_miner_count_metric_period.0c3abeb408", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_miner_count_metric_period.sql", "original_file_path": "models/metrics/metric_miner_count.yml", "name": "not_null_metric_miner_count_metric_period", "alias": "not_null_metric_miner_count_metric_period", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_miner_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_miner_count.yml/not_null_metric_miner_count_metric_period.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.295158, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_miner_count\nwhere metric_period is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "metric_period", "file_key_name": "models.metric_miner_count"}, "test.harmony.not_null_metric_miner_count_miner_count.9d6e2fb19b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "miner_count", "model": "{{ get_where_subquery(ref('metric_miner_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_miner_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_miner_count_miner_count"], "unique_id": "test.harmony.not_null_metric_miner_count_miner_count.9d6e2fb19b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_miner_count_miner_count.sql", "original_file_path": "models/metrics/metric_miner_count.yml", "name": "not_null_metric_miner_count_miner_count", "alias": "not_null_metric_miner_count_miner_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_miner_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_miner_count.yml/not_null_metric_miner_count_miner_count.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.296267, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_miner_count\nwhere miner_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "miner_count", "file_key_name": "models.metric_miner_count"}, "test.harmony.not_null_metric_unique_users_count_metric_date.8e870921c3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_date", "model": "{{ get_where_subquery(ref('metric_unique_users_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_unique_users_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_unique_users_count_metric_date"], "unique_id": "test.harmony.not_null_metric_unique_users_count_metric_date.8e870921c3", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_unique_users_count_metric_date.sql", "original_file_path": "models/metrics/metric_unique_users_count.yml", "name": "not_null_metric_unique_users_count_metric_date", "alias": "not_null_metric_unique_users_count_metric_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_unique_users_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_unique_users_count.yml/not_null_metric_unique_users_count_metric_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.2979488, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_unique_users_count\nwhere metric_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "metric_date", "file_key_name": "models.metric_unique_users_count"}, "test.harmony.not_null_metric_unique_users_count_metric_period.0420fc3861": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_period", "model": "{{ get_where_subquery(ref('metric_unique_users_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_unique_users_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_unique_users_count_metric_period"], "unique_id": "test.harmony.not_null_metric_unique_users_count_metric_period.0420fc3861", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_unique_users_count_metric_period.sql", "original_file_path": "models/metrics/metric_unique_users_count.yml", "name": "not_null_metric_unique_users_count_metric_period", "alias": "not_null_metric_unique_users_count_metric_period", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_unique_users_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_unique_users_count.yml/not_null_metric_unique_users_count_metric_period.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.298721, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_unique_users_count\nwhere metric_period is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "metric_period", "file_key_name": "models.metric_unique_users_count"}, "test.harmony.not_null_metric_unique_users_count_unique_users_count.fc29ed7470": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_users_count", "model": "{{ get_where_subquery(ref('metric_unique_users_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_unique_users_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_unique_users_count_unique_users_count"], "unique_id": "test.harmony.not_null_metric_unique_users_count_unique_users_count.fc29ed7470", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_unique_users_count_unique_users_count.sql", "original_file_path": "models/metrics/metric_unique_users_count.yml", "name": "not_null_metric_unique_users_count_unique_users_count", "alias": "not_null_metric_unique_users_count_unique_users_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_unique_users_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_unique_users_count.yml/not_null_metric_unique_users_count_unique_users_count.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.2995892, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_unique_users_count\nwhere unique_users_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "unique_users_count", "file_key_name": "models.metric_unique_users_count"}, "test.harmony.not_null_metric_unique_users_count_unique_users_cumulative.5a0421d0e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_users_cumulative", "model": "{{ get_where_subquery(ref('metric_unique_users_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_unique_users_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_unique_users_count_unique_users_cumulative"], "unique_id": "test.harmony.not_null_metric_unique_users_count_unique_users_cumulative.5a0421d0e6", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_unique_users_count_unique_users_cumulative.sql", "original_file_path": "models/metrics/metric_unique_users_count.yml", "name": "not_null_metric_unique_users_count_unique_users_cumulative", "alias": "not_null_metric_unique_users_count_unique_users_cumulative", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_unique_users_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_unique_users_count.yml/not_null_metric_unique_users_count_unique_users_cumulative.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.300332, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_unique_users_count\nwhere unique_users_cumulative is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "unique_users_cumulative", "file_key_name": "models.metric_unique_users_count"}, "test.harmony.not_null_metric_erc20_transfers_count_metric_date.d92fe99fd7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_date", "model": "{{ get_where_subquery(ref('metric_erc20_transfers_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_erc20_transfers_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_erc20_transfers_count_metric_date"], "unique_id": "test.harmony.not_null_metric_erc20_transfers_count_metric_date.d92fe99fd7", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_erc20_transfers_count_metric_date.sql", "original_file_path": "models/metrics/metric_erc20_transfers_count.yml", "name": "not_null_metric_erc20_transfers_count_metric_date", "alias": "not_null_metric_erc20_transfers_count_metric_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_erc20_transfers_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_erc20_transfers_count.yml/not_null_metric_erc20_transfers_count_metric_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3019829, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_erc20_transfers_count\nwhere metric_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "metric_date", "file_key_name": "models.metric_erc20_transfers_count"}, "test.harmony.not_null_metric_erc20_transfers_count_metric_period.76b6cff96a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_period", "model": "{{ get_where_subquery(ref('metric_erc20_transfers_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_erc20_transfers_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_erc20_transfers_count_metric_period"], "unique_id": "test.harmony.not_null_metric_erc20_transfers_count_metric_period.76b6cff96a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_erc20_transfers_count_metric_period.sql", "original_file_path": "models/metrics/metric_erc20_transfers_count.yml", "name": "not_null_metric_erc20_transfers_count_metric_period", "alias": "not_null_metric_erc20_transfers_count_metric_period", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_erc20_transfers_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_erc20_transfers_count.yml/not_null_metric_erc20_transfers_count_metric_period.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.302758, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_erc20_transfers_count\nwhere metric_period is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "metric_period", "file_key_name": "models.metric_erc20_transfers_count"}, "test.harmony.not_null_metric_erc20_transfers_count_transfers_count.929d391ccb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transfers_count", "model": "{{ get_where_subquery(ref('metric_erc20_transfers_count')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.metric_erc20_transfers_count"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "metrics", "not_null_metric_erc20_transfers_count_transfers_count"], "unique_id": "test.harmony.not_null_metric_erc20_transfers_count_transfers_count.929d391ccb", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_metric_erc20_transfers_count_transfers_count.sql", "original_file_path": "models/metrics/metric_erc20_transfers_count.yml", "name": "not_null_metric_erc20_transfers_count_transfers_count", "alias": "not_null_metric_erc20_transfers_count_transfers_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_erc20_transfers_count"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/metrics/metric_erc20_transfers_count.yml/not_null_metric_erc20_transfers_count_transfers_count.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.303498, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.metric_erc20_transfers_count\nwhere transfers_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transfers_count", "file_key_name": "models.metric_erc20_transfers_count"}, "test.harmony.not_null_stg_txs_record_id.cde613d2f1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "record_id", "model": "{{ get_where_subquery(ref('stg_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_txs_record_id"], "unique_id": "test.harmony.not_null_stg_txs_record_id.cde613d2f1", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_txs_record_id.sql", "original_file_path": "models/staging/stg_txs.yml", "name": "not_null_stg_txs_record_id", "alias": "not_null_stg_txs_record_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_txs.yml/not_null_stg_txs_record_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.306004, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_txs\nwhere record_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "record_id", "file_key_name": "models.stg_txs"}, "test.harmony.not_null_stg_txs_tx_id.6ca0194e5a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('stg_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_txs_tx_id"], "unique_id": "test.harmony.not_null_stg_txs_tx_id.6ca0194e5a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_txs_tx_id.sql", "original_file_path": "models/staging/stg_txs.yml", "name": "not_null_stg_txs_tx_id", "alias": "not_null_stg_txs_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_txs.yml/not_null_stg_txs_tx_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.306782, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_txs\nwhere tx_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_id", "file_key_name": "models.stg_txs"}, "test.harmony.not_null_stg_txs_tx_block_index.5edea4684a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_block_index", "model": "{{ get_where_subquery(ref('stg_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_txs_tx_block_index"], "unique_id": "test.harmony.not_null_stg_txs_tx_block_index.5edea4684a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_txs_tx_block_index.sql", "original_file_path": "models/staging/stg_txs.yml", "name": "not_null_stg_txs_tx_block_index", "alias": "not_null_stg_txs_tx_block_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_txs.yml/not_null_stg_txs_tx_block_index.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.307629, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_txs\nwhere tx_block_index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_block_index", "file_key_name": "models.stg_txs"}, "test.harmony.not_null_stg_txs_offset_id.ded9486e64": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "offset_id", "model": "{{ get_where_subquery(ref('stg_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_txs_offset_id"], "unique_id": "test.harmony.not_null_stg_txs_offset_id.ded9486e64", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_txs_offset_id.sql", "original_file_path": "models/staging/stg_txs.yml", "name": "not_null_stg_txs_offset_id", "alias": "not_null_stg_txs_offset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_txs.yml/not_null_stg_txs_offset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.308376, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_txs\nwhere offset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "offset_id", "file_key_name": "models.stg_txs"}, "test.harmony.not_null_stg_txs_block_id.705b788dc6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('stg_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_txs_block_id"], "unique_id": "test.harmony.not_null_stg_txs_block_id.705b788dc6", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_txs_block_id.sql", "original_file_path": "models/staging/stg_txs.yml", "name": "not_null_stg_txs_block_id", "alias": "not_null_stg_txs_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_txs.yml/not_null_stg_txs_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.309118, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_txs\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.stg_txs"}, "test.harmony.not_null_stg_txs_block_timestamp.0eae229ba1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('stg_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_txs_block_timestamp"], "unique_id": "test.harmony.not_null_stg_txs_block_timestamp.0eae229ba1", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_txs_block_timestamp.sql", "original_file_path": "models/staging/stg_txs.yml", "name": "not_null_stg_txs_block_timestamp", "alias": "not_null_stg_txs_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_txs.yml/not_null_stg_txs_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.309986, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_txs\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.stg_txs"}, "test.harmony.not_null_stg_txs_network.89f4d31e91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "network", "model": "{{ get_where_subquery(ref('stg_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_txs_network"], "unique_id": "test.harmony.not_null_stg_txs_network.89f4d31e91", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_txs_network.sql", "original_file_path": "models/staging/stg_txs.yml", "name": "not_null_stg_txs_network", "alias": "not_null_stg_txs_network", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_txs.yml/not_null_stg_txs_network.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3107321, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_txs\nwhere network is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "network", "file_key_name": "models.stg_txs"}, "test.harmony.not_null_stg_txs_chain_id.fdb1c9956d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('stg_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_txs_chain_id"], "unique_id": "test.harmony.not_null_stg_txs_chain_id.fdb1c9956d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_txs_chain_id.sql", "original_file_path": "models/staging/stg_txs.yml", "name": "not_null_stg_txs_chain_id", "alias": "not_null_stg_txs_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_txs.yml/not_null_stg_txs_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3114638, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_txs\nwhere chain_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_id", "file_key_name": "models.stg_txs"}, "test.harmony.not_null_stg_txs_ingested_at.ad55bb9e47": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('stg_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_txs_ingested_at"], "unique_id": "test.harmony.not_null_stg_txs_ingested_at.ad55bb9e47", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_txs_ingested_at.sql", "original_file_path": "models/staging/stg_txs.yml", "name": "not_null_stg_txs_ingested_at", "alias": "not_null_stg_txs_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_txs.yml/not_null_stg_txs_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.312198, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_txs\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.stg_txs"}, "test.harmony.not_null_stg_delegators_ingest_timestamp.5c02b89faf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingest_timestamp", "model": "{{ get_where_subquery(ref('stg_delegators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_delegators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_delegators_ingest_timestamp"], "unique_id": "test.harmony.not_null_stg_delegators_ingest_timestamp.5c02b89faf", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_delegators_ingest_timestamp.sql", "original_file_path": "models/staging/stg_delegators.yml", "name": "not_null_stg_delegators_ingest_timestamp", "alias": "not_null_stg_delegators_ingest_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_delegators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_delegators.yml/not_null_stg_delegators_ingest_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.314655, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_delegators\nwhere ingest_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingest_timestamp", "file_key_name": "models.stg_delegators"}, "test.harmony.not_null_stg_delegators_day_date.defe482aef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "day_date", "model": "{{ get_where_subquery(ref('stg_delegators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_delegators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_delegators_day_date"], "unique_id": "test.harmony.not_null_stg_delegators_day_date.defe482aef", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_delegators_day_date.sql", "original_file_path": "models/staging/stg_delegators.yml", "name": "not_null_stg_delegators_day_date", "alias": "not_null_stg_delegators_day_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_delegators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_delegators.yml/not_null_stg_delegators_day_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.315535, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_delegators\nwhere day_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "day_date", "file_key_name": "models.stg_delegators"}, "test.harmony.not_null_stg_delegators_validator_address.f3f0e33492": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "validator_address", "model": "{{ get_where_subquery(ref('stg_delegators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_delegators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_delegators_validator_address"], "unique_id": "test.harmony.not_null_stg_delegators_validator_address.f3f0e33492", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_delegators_validator_address.sql", "original_file_path": "models/staging/stg_delegators.yml", "name": "not_null_stg_delegators_validator_address", "alias": "not_null_stg_delegators_validator_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_delegators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_delegators.yml/not_null_stg_delegators_validator_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.316281, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_delegators\nwhere validator_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "validator_address", "file_key_name": "models.stg_delegators"}, "test.harmony.not_null_stg_delegators_validator_identity.55aed20cd9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "validator_identity", "model": "{{ get_where_subquery(ref('stg_delegators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_delegators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_delegators_validator_identity"], "unique_id": "test.harmony.not_null_stg_delegators_validator_identity.55aed20cd9", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_delegators_validator_identity.sql", "original_file_path": "models/staging/stg_delegators.yml", "name": "not_null_stg_delegators_validator_identity", "alias": "not_null_stg_delegators_validator_identity", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_delegators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_delegators.yml/not_null_stg_delegators_validator_identity.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.317025, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_delegators\nwhere validator_identity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "validator_identity", "file_key_name": "models.stg_delegators"}, "test.harmony.not_null_stg_delegators_delegations.abcb6ce8fd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "delegations", "model": "{{ get_where_subquery(ref('stg_delegators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_delegators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_delegators_delegations"], "unique_id": "test.harmony.not_null_stg_delegators_delegations.abcb6ce8fd", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_delegators_delegations.sql", "original_file_path": "models/staging/stg_delegators.yml", "name": "not_null_stg_delegators_delegations", "alias": "not_null_stg_delegators_delegations", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_delegators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_delegators.yml/not_null_stg_delegators_delegations.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.317882, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_delegators\nwhere delegations is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "delegations", "file_key_name": "models.stg_delegators"}, "test.harmony.not_null_stg_delegators_total_delegation.5010d275b4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_delegation", "model": "{{ get_where_subquery(ref('stg_delegators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_delegators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_delegators_total_delegation"], "unique_id": "test.harmony.not_null_stg_delegators_total_delegation.5010d275b4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_delegators_total_delegation.sql", "original_file_path": "models/staging/stg_delegators.yml", "name": "not_null_stg_delegators_total_delegation", "alias": "not_null_stg_delegators_total_delegation", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_delegators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_delegators.yml/not_null_stg_delegators_total_delegation.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3186262, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_delegators\nwhere total_delegation is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_delegation", "file_key_name": "models.stg_delegators"}, "test.harmony.not_null_stg_delegators_total_delegator_count.7cfe837d1d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_delegator_count", "model": "{{ get_where_subquery(ref('stg_delegators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_delegators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_delegators_total_delegator_count"], "unique_id": "test.harmony.not_null_stg_delegators_total_delegator_count.7cfe837d1d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_delegators_total_delegator_count.sql", "original_file_path": "models/staging/stg_delegators.yml", "name": "not_null_stg_delegators_total_delegator_count", "alias": "not_null_stg_delegators_total_delegator_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_delegators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_delegators.yml/not_null_stg_delegators_total_delegator_count.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.319372, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_delegators\nwhere total_delegator_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_delegator_count", "file_key_name": "models.stg_delegators"}, "test.harmony.not_null_stg_tokenprice_from_swaps_block_date.db204690a0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_date", "model": "{{ get_where_subquery(ref('stg_tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_tokenprice_from_swaps_block_date"], "unique_id": "test.harmony.not_null_stg_tokenprice_from_swaps_block_date.db204690a0", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_tokenprice_from_swaps_block_date.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.yml", "name": "not_null_stg_tokenprice_from_swaps_block_date", "alias": "not_null_stg_tokenprice_from_swaps_block_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.yml/not_null_stg_tokenprice_from_swaps_block_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.322187, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_tokenprice_from_swaps\nwhere block_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_date", "file_key_name": "models.stg_tokenprice_from_swaps"}, "test.harmony.not_null_stg_tokenprice_from_swaps_token_address.a09b5b4dcb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_address", "model": "{{ get_where_subquery(ref('stg_tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_tokenprice_from_swaps_token_address"], "unique_id": "test.harmony.not_null_stg_tokenprice_from_swaps_token_address.a09b5b4dcb", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_tokenprice_from_swaps_token_address.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.yml", "name": "not_null_stg_tokenprice_from_swaps_token_address", "alias": "not_null_stg_tokenprice_from_swaps_token_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.yml/not_null_stg_tokenprice_from_swaps_token_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3229609, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_tokenprice_from_swaps\nwhere token_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_address", "file_key_name": "models.stg_tokenprice_from_swaps"}, "test.harmony.not_null_stg_tokenprice_from_swaps_token_symbol.07ecb6a41e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_symbol", "model": "{{ get_where_subquery(ref('stg_tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_tokenprice_from_swaps_token_symbol"], "unique_id": "test.harmony.not_null_stg_tokenprice_from_swaps_token_symbol.07ecb6a41e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_tokenprice_from_swaps_token_symbol.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.yml", "name": "not_null_stg_tokenprice_from_swaps_token_symbol", "alias": "not_null_stg_tokenprice_from_swaps_token_symbol", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.yml/not_null_stg_tokenprice_from_swaps_token_symbol.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.323802, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_tokenprice_from_swaps\nwhere token_symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_symbol", "file_key_name": "models.stg_tokenprice_from_swaps"}, "test.harmony.not_null_stg_tokenprice_from_swaps_usd_price.ea7453ba8b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "usd_price", "model": "{{ get_where_subquery(ref('stg_tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_tokenprice_from_swaps_usd_price"], "unique_id": "test.harmony.not_null_stg_tokenprice_from_swaps_usd_price.ea7453ba8b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_tokenprice_from_swaps_usd_price.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.yml", "name": "not_null_stg_tokenprice_from_swaps_usd_price", "alias": "not_null_stg_tokenprice_from_swaps_usd_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.yml/not_null_stg_tokenprice_from_swaps_usd_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.324543, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_tokenprice_from_swaps\nwhere usd_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "usd_price", "file_key_name": "models.stg_tokenprice_from_swaps"}, "test.harmony.not_null_stg_tokenprice_from_swaps_usd_volume.a6cd8a6d28": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "usd_volume", "model": "{{ get_where_subquery(ref('stg_tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_tokenprice_from_swaps_usd_volume"], "unique_id": "test.harmony.not_null_stg_tokenprice_from_swaps_usd_volume.a6cd8a6d28", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_tokenprice_from_swaps_usd_volume.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.yml", "name": "not_null_stg_tokenprice_from_swaps_usd_volume", "alias": "not_null_stg_tokenprice_from_swaps_usd_volume", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.yml/not_null_stg_tokenprice_from_swaps_usd_volume.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.32528, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_tokenprice_from_swaps\nwhere usd_volume is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "usd_volume", "file_key_name": "models.stg_tokenprice_from_swaps"}, "test.harmony.not_null_stg_tokenprice_from_swaps_token_volume.a99dbe42d3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_volume", "model": "{{ get_where_subquery(ref('stg_tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_tokenprice_from_swaps_token_volume"], "unique_id": "test.harmony.not_null_stg_tokenprice_from_swaps_token_volume.a99dbe42d3", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_tokenprice_from_swaps_token_volume.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.yml", "name": "not_null_stg_tokenprice_from_swaps_token_volume", "alias": "not_null_stg_tokenprice_from_swaps_token_volume", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.yml/not_null_stg_tokenprice_from_swaps_token_volume.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.326133, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_tokenprice_from_swaps\nwhere token_volume is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_volume", "file_key_name": "models.stg_tokenprice_from_swaps"}, "test.harmony.not_null_stg_tokenprice_from_swaps_pair_token_for_price.7c12c493e9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pair_token_for_price", "model": "{{ get_where_subquery(ref('stg_tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_tokenprice_from_swaps_pair_token_for_price"], "unique_id": "test.harmony.not_null_stg_tokenprice_from_swaps_pair_token_for_price.7c12c493e9", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_tokenprice_from_swaps_pair_token_for_price.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.yml", "name": "not_null_stg_tokenprice_from_swaps_pair_token_for_price", "alias": "not_null_stg_tokenprice_from_swaps_pair_token_for_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.yml/not_null_stg_tokenprice_from_swaps_pair_token_for_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.326868, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_tokenprice_from_swaps\nwhere pair_token_for_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pair_token_for_price", "file_key_name": "models.stg_tokenprice_from_swaps"}, "test.harmony.not_null_stg_tokenprice_from_swaps_pair_symbol_for_price.505c85c86a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pair_symbol_for_price", "model": "{{ get_where_subquery(ref('stg_tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_tokenprice_from_swaps_pair_symbol_for_price"], "unique_id": "test.harmony.not_null_stg_tokenprice_from_swaps_pair_symbol_for_price.505c85c86a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_tokenprice_from_swaps_pair_symbol_for_price.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.yml", "name": "not_null_stg_tokenprice_from_swaps_pair_symbol_for_price", "alias": "not_null_stg_tokenprice_from_swaps_pair_symbol_for_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.yml/not_null_stg_tokenprice_from_swaps_pair_symbol_for_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.327595, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_tokenprice_from_swaps\nwhere pair_symbol_for_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pair_symbol_for_price", "file_key_name": "models.stg_tokenprice_from_swaps"}, "test.harmony.not_null_stg_tokenprice_from_swaps_volume_for_price.9994df39d5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "volume_for_price", "model": "{{ get_where_subquery(ref('stg_tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_tokenprice_from_swaps_volume_for_price"], "unique_id": "test.harmony.not_null_stg_tokenprice_from_swaps_volume_for_price.9994df39d5", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_tokenprice_from_swaps_volume_for_price.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.yml", "name": "not_null_stg_tokenprice_from_swaps_volume_for_price", "alias": "not_null_stg_tokenprice_from_swaps_volume_for_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.yml/not_null_stg_tokenprice_from_swaps_volume_for_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.328565, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_tokenprice_from_swaps\nwhere volume_for_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "volume_for_price", "file_key_name": "models.stg_tokenprice_from_swaps"}, "test.harmony.not_null_stg_tokenprice_from_swaps_key.a0c3769066": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "key", "model": "{{ get_where_subquery(ref('stg_tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_tokenprice_from_swaps_key"], "unique_id": "test.harmony.not_null_stg_tokenprice_from_swaps_key.a0c3769066", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_tokenprice_from_swaps_key.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.yml", "name": "not_null_stg_tokenprice_from_swaps_key", "alias": "not_null_stg_tokenprice_from_swaps_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.yml/not_null_stg_tokenprice_from_swaps_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3293078, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_tokenprice_from_swaps\nwhere key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "key", "file_key_name": "models.stg_tokenprice_from_swaps"}, "test.harmony.unique_stg_tokenprice_from_swaps_key.5c3ec7c700": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "key", "model": "{{ get_where_subquery(ref('stg_tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "unique_stg_tokenprice_from_swaps_key"], "unique_id": "test.harmony.unique_stg_tokenprice_from_swaps_key.5c3ec7c700", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_stg_tokenprice_from_swaps_key.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.yml", "name": "unique_stg_tokenprice_from_swaps_key", "alias": "unique_stg_tokenprice_from_swaps_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.yml/unique_stg_tokenprice_from_swaps_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.330036, "compiled_sql": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.stg_tokenprice_from_swaps\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "key", "file_key_name": "models.stg_tokenprice_from_swaps"}, "test.harmony.not_null_stg_tokenprice_from_swaps_lookup_round.56a999e64a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "lookup_round", "model": "{{ get_where_subquery(ref('stg_tokenprice_from_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_tokenprice_from_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_tokenprice_from_swaps_lookup_round"], "unique_id": "test.harmony.not_null_stg_tokenprice_from_swaps_lookup_round.56a999e64a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_tokenprice_from_swaps_lookup_round.sql", "original_file_path": "models/staging/stg_tokenprice_from_swaps.yml", "name": "not_null_stg_tokenprice_from_swaps_lookup_round", "alias": "not_null_stg_tokenprice_from_swaps_lookup_round", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tokenprice_from_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_tokenprice_from_swaps.yml/not_null_stg_tokenprice_from_swaps_lookup_round.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.330764, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_tokenprice_from_swaps\nwhere lookup_round is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "lookup_round", "file_key_name": "models.stg_tokenprice_from_swaps"}, "test.harmony.not_null_stg_blocks_record_id.120642bef2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "record_id", "model": "{{ get_where_subquery(ref('stg_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_blocks_record_id"], "unique_id": "test.harmony.not_null_stg_blocks_record_id.120642bef2", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_blocks_record_id.sql", "original_file_path": "models/staging/stg_blocks.yml", "name": "not_null_stg_blocks_record_id", "alias": "not_null_stg_blocks_record_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_blocks.yml/not_null_stg_blocks_record_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.333267, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_blocks\nwhere record_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "record_id", "file_key_name": "models.stg_blocks"}, "test.harmony.not_null_stg_blocks_offset_id.530a409a08": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "offset_id", "model": "{{ get_where_subquery(ref('stg_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_blocks_offset_id"], "unique_id": "test.harmony.not_null_stg_blocks_offset_id.530a409a08", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_blocks_offset_id.sql", "original_file_path": "models/staging/stg_blocks.yml", "name": "not_null_stg_blocks_offset_id", "alias": "not_null_stg_blocks_offset_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_blocks.yml/not_null_stg_blocks_offset_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.334151, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_blocks\nwhere offset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "offset_id", "file_key_name": "models.stg_blocks"}, "test.harmony.not_null_stg_blocks_block_id.1ded7ed662": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('stg_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_blocks_block_id"], "unique_id": "test.harmony.not_null_stg_blocks_block_id.1ded7ed662", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_blocks_block_id.sql", "original_file_path": "models/staging/stg_blocks.yml", "name": "not_null_stg_blocks_block_id", "alias": "not_null_stg_blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_blocks.yml/not_null_stg_blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3348951, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_blocks\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.stg_blocks"}, "test.harmony.not_null_stg_blocks_block_timestamp.87c5f1915b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('stg_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_blocks_block_timestamp"], "unique_id": "test.harmony.not_null_stg_blocks_block_timestamp.87c5f1915b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_blocks_block_timestamp.sql", "original_file_path": "models/staging/stg_blocks.yml", "name": "not_null_stg_blocks_block_timestamp", "alias": "not_null_stg_blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_blocks.yml/not_null_stg_blocks_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.33564, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_blocks\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.stg_blocks"}, "test.harmony.not_null_stg_blocks_network.faf2bb40dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "network", "model": "{{ get_where_subquery(ref('stg_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_blocks_network"], "unique_id": "test.harmony.not_null_stg_blocks_network.faf2bb40dd", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_blocks_network.sql", "original_file_path": "models/staging/stg_blocks.yml", "name": "not_null_stg_blocks_network", "alias": "not_null_stg_blocks_network", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_blocks.yml/not_null_stg_blocks_network.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.336372, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_blocks\nwhere network is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "network", "file_key_name": "models.stg_blocks"}, "test.harmony.not_null_stg_blocks_chain_id.5794c79333": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('stg_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_blocks_chain_id"], "unique_id": "test.harmony.not_null_stg_blocks_chain_id.5794c79333", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_blocks_chain_id.sql", "original_file_path": "models/staging/stg_blocks.yml", "name": "not_null_stg_blocks_chain_id", "alias": "not_null_stg_blocks_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_blocks.yml/not_null_stg_blocks_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.337219, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_blocks\nwhere chain_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "chain_id", "file_key_name": "models.stg_blocks"}, "test.harmony.not_null_stg_blocks_tx_count.10a456056a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count", "model": "{{ get_where_subquery(ref('stg_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_blocks_tx_count"], "unique_id": "test.harmony.not_null_stg_blocks_tx_count.10a456056a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_blocks_tx_count.sql", "original_file_path": "models/staging/stg_blocks.yml", "name": "not_null_stg_blocks_tx_count", "alias": "not_null_stg_blocks_tx_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_blocks.yml/not_null_stg_blocks_tx_count.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.337947, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_blocks\nwhere tx_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_count", "file_key_name": "models.stg_blocks"}, "test.harmony.not_null_stg_blocks_header.cd46f3c5a5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "header", "model": "{{ get_where_subquery(ref('stg_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_blocks_header"], "unique_id": "test.harmony.not_null_stg_blocks_header.cd46f3c5a5", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_blocks_header.sql", "original_file_path": "models/staging/stg_blocks.yml", "name": "not_null_stg_blocks_header", "alias": "not_null_stg_blocks_header", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_blocks.yml/not_null_stg_blocks_header.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.338685, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_blocks\nwhere header is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "header", "file_key_name": "models.stg_blocks"}, "test.harmony.not_null_stg_blocks_ingested_at.7b953999e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('stg_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_blocks_ingested_at"], "unique_id": "test.harmony.not_null_stg_blocks_ingested_at.7b953999e0", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_blocks_ingested_at.sql", "original_file_path": "models/staging/stg_blocks.yml", "name": "not_null_stg_blocks_ingested_at", "alias": "not_null_stg_blocks_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_blocks.yml/not_null_stg_blocks_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.339411, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_blocks\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.stg_blocks"}, "test.harmony.not_null_stg_ant_ingest_ingest_timestamp.8f1622cdb7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingest_timestamp", "model": "{{ get_where_subquery(ref('stg_ant_ingest')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.stg_ant_ingest"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "staging", "not_null_stg_ant_ingest_ingest_timestamp"], "unique_id": "test.harmony.not_null_stg_ant_ingest_ingest_timestamp.8f1622cdb7", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_stg_ant_ingest_ingest_timestamp.sql", "original_file_path": "models/staging/stg_ant_ingest.yml", "name": "not_null_stg_ant_ingest_ingest_timestamp", "alias": "not_null_stg_ant_ingest_ingest_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ant_ingest"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/staging/stg_ant_ingest.yml/not_null_stg_ant_ingest_ingest_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.340864, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.stg_ant_ingest\nwhere ingest_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingest_timestamp", "file_key_name": "models.stg_ant_ingest"}, "test.harmony.unique_sushiswap_lp_actions_log_id.992d51f31a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('sushiswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushiswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "unique_sushiswap_lp_actions_log_id"], "unique_id": "test.harmony.unique_sushiswap_lp_actions_log_id.992d51f31a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_sushiswap_lp_actions_log_id.sql", "original_file_path": "models/core/sushiswap_lp_actions.yml", "name": "unique_sushiswap_lp_actions_log_id", "alias": "unique_sushiswap_lp_actions_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/sushiswap_lp_actions.yml/unique_sushiswap_lp_actions_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.344171, "compiled_sql": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.sushiswap_lp_actions\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.sushiswap_lp_actions"}, "test.harmony.not_null_sushiswap_lp_actions_log_id.1e0108487a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('sushiswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushiswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_sushiswap_lp_actions_log_id"], "unique_id": "test.harmony.not_null_sushiswap_lp_actions_log_id.1e0108487a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_sushiswap_lp_actions_log_id.sql", "original_file_path": "models/core/sushiswap_lp_actions.yml", "name": "not_null_sushiswap_lp_actions_log_id", "alias": "not_null_sushiswap_lp_actions_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/sushiswap_lp_actions.yml/not_null_sushiswap_lp_actions_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.345042, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.sushiswap_lp_actions\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.sushiswap_lp_actions"}, "test.harmony.not_null_sushiswap_lp_actions_block_timestamp.f6c0a02608": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('sushiswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushiswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_sushiswap_lp_actions_block_timestamp"], "unique_id": "test.harmony.not_null_sushiswap_lp_actions_block_timestamp.f6c0a02608", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_sushiswap_lp_actions_block_timestamp.sql", "original_file_path": "models/core/sushiswap_lp_actions.yml", "name": "not_null_sushiswap_lp_actions_block_timestamp", "alias": "not_null_sushiswap_lp_actions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/sushiswap_lp_actions.yml/not_null_sushiswap_lp_actions_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.345788, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.sushiswap_lp_actions\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.sushiswap_lp_actions"}, "test.harmony.not_null_sushiswap_lp_actions_tx_hash.a09ca7ef95": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('sushiswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushiswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_sushiswap_lp_actions_tx_hash"], "unique_id": "test.harmony.not_null_sushiswap_lp_actions_tx_hash.a09ca7ef95", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_sushiswap_lp_actions_tx_hash.sql", "original_file_path": "models/core/sushiswap_lp_actions.yml", "name": "not_null_sushiswap_lp_actions_tx_hash", "alias": "not_null_sushiswap_lp_actions_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/sushiswap_lp_actions.yml/not_null_sushiswap_lp_actions_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.346528, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.sushiswap_lp_actions\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.sushiswap_lp_actions"}, "test.harmony.not_null_sushiswap_lp_actions_liquidity_provider.48f0335b57": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "liquidity_provider", "model": "{{ get_where_subquery(ref('sushiswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushiswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_sushiswap_lp_actions_liquidity_provider"], "unique_id": "test.harmony.not_null_sushiswap_lp_actions_liquidity_provider.48f0335b57", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_sushiswap_lp_actions_liquidity_provider.sql", "original_file_path": "models/core/sushiswap_lp_actions.yml", "name": "not_null_sushiswap_lp_actions_liquidity_provider", "alias": "not_null_sushiswap_lp_actions_liquidity_provider", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/sushiswap_lp_actions.yml/not_null_sushiswap_lp_actions_liquidity_provider.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.347265, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.sushiswap_lp_actions\nwhere liquidity_provider is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "liquidity_provider", "file_key_name": "models.sushiswap_lp_actions"}, "test.harmony.not_null_sushiswap_lp_actions_pool_address.e8adf279f1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('sushiswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushiswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_sushiswap_lp_actions_pool_address"], "unique_id": "test.harmony.not_null_sushiswap_lp_actions_pool_address.e8adf279f1", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_sushiswap_lp_actions_pool_address.sql", "original_file_path": "models/core/sushiswap_lp_actions.yml", "name": "not_null_sushiswap_lp_actions_pool_address", "alias": "not_null_sushiswap_lp_actions_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/sushiswap_lp_actions.yml/not_null_sushiswap_lp_actions_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.348114, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.sushiswap_lp_actions\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.sushiswap_lp_actions"}, "test.harmony.not_null_sushiswap_lp_actions_pool_name.4283540719": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_name", "model": "{{ get_where_subquery(ref('sushiswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushiswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_sushiswap_lp_actions_pool_name"], "unique_id": "test.harmony.not_null_sushiswap_lp_actions_pool_name.4283540719", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_sushiswap_lp_actions_pool_name.sql", "original_file_path": "models/core/sushiswap_lp_actions.yml", "name": "not_null_sushiswap_lp_actions_pool_name", "alias": "not_null_sushiswap_lp_actions_pool_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/sushiswap_lp_actions.yml/not_null_sushiswap_lp_actions_pool_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3488488, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.sushiswap_lp_actions\nwhere pool_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_name", "file_key_name": "models.sushiswap_lp_actions"}, "test.harmony.not_null_sushiswap_lp_actions_token0.04702ced55": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token0", "model": "{{ get_where_subquery(ref('sushiswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushiswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_sushiswap_lp_actions_token0"], "unique_id": "test.harmony.not_null_sushiswap_lp_actions_token0.04702ced55", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_sushiswap_lp_actions_token0.sql", "original_file_path": "models/core/sushiswap_lp_actions.yml", "name": "not_null_sushiswap_lp_actions_token0", "alias": "not_null_sushiswap_lp_actions_token0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/sushiswap_lp_actions.yml/not_null_sushiswap_lp_actions_token0.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.34958, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.sushiswap_lp_actions\nwhere token0 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token0", "file_key_name": "models.sushiswap_lp_actions"}, "test.harmony.not_null_sushiswap_lp_actions_token1.306284a205": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token1", "model": "{{ get_where_subquery(ref('sushiswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushiswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_sushiswap_lp_actions_token1"], "unique_id": "test.harmony.not_null_sushiswap_lp_actions_token1.306284a205", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_sushiswap_lp_actions_token1.sql", "original_file_path": "models/core/sushiswap_lp_actions.yml", "name": "not_null_sushiswap_lp_actions_token1", "alias": "not_null_sushiswap_lp_actions_token1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/sushiswap_lp_actions.yml/not_null_sushiswap_lp_actions_token1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.350423, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.sushiswap_lp_actions\nwhere token1 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token1", "file_key_name": "models.sushiswap_lp_actions"}, "test.harmony.not_null_sushiswap_lp_actions_action.8783363d62": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "action", "model": "{{ get_where_subquery(ref('sushiswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.sushiswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_sushiswap_lp_actions_action"], "unique_id": "test.harmony.not_null_sushiswap_lp_actions_action.8783363d62", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_sushiswap_lp_actions_action.sql", "original_file_path": "models/core/sushiswap_lp_actions.yml", "name": "not_null_sushiswap_lp_actions_action", "alias": "not_null_sushiswap_lp_actions_action", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushiswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/sushiswap_lp_actions.yml/not_null_sushiswap_lp_actions_action.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.351156, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.sushiswap_lp_actions\nwhere action is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "action", "file_key_name": "models.sushiswap_lp_actions"}, "test.harmony.unique_validators_u_key.1a041149bf": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "u_key", "model": "{{ get_where_subquery(ref('validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "unique_validators_u_key"], "unique_id": "test.harmony.unique_validators_u_key.1a041149bf", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_validators_u_key.sql", "original_file_path": "models/core/validators.yml", "name": "unique_validators_u_key", "alias": "unique_validators_u_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["validators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/validators.yml/unique_validators_u_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.353778, "compiled_sql": "\n    \n    \n\nselect\n    u_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.validators\nwhere u_key is not null\ngroup by u_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "u_key", "file_key_name": "models.validators"}, "test.harmony.not_null_validators_u_key.c2a23189a9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "u_key", "model": "{{ get_where_subquery(ref('validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_validators_u_key"], "unique_id": "test.harmony.not_null_validators_u_key.c2a23189a9", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_validators_u_key.sql", "original_file_path": "models/core/validators.yml", "name": "not_null_validators_u_key", "alias": "not_null_validators_u_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["validators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/validators.yml/not_null_validators_u_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.354548, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.validators\nwhere u_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "u_key", "file_key_name": "models.validators"}, "test.harmony.not_null_validators_day_date.fcd5e2f119": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "day_date", "model": "{{ get_where_subquery(ref('validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_validators_day_date"], "unique_id": "test.harmony.not_null_validators_day_date.fcd5e2f119", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_validators_day_date.sql", "original_file_path": "models/core/validators.yml", "name": "not_null_validators_day_date", "alias": "not_null_validators_day_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["validators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/validators.yml/not_null_validators_day_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.35528, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.validators\nwhere day_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "day_date", "file_key_name": "models.validators"}, "test.harmony.not_null_validators_validator_address.d425c825be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "validator_address", "model": "{{ get_where_subquery(ref('validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_validators_validator_address"], "unique_id": "test.harmony.not_null_validators_validator_address.d425c825be", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_validators_validator_address.sql", "original_file_path": "models/core/validators.yml", "name": "not_null_validators_validator_address", "alias": "not_null_validators_validator_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["validators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/validators.yml/not_null_validators_validator_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3561301, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.validators\nwhere validator_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "validator_address", "file_key_name": "models.validators"}, "test.harmony.not_null_validators_validator_hex_address.2b0ca6958d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "validator_hex_address", "model": "{{ get_where_subquery(ref('validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_validators_validator_hex_address"], "unique_id": "test.harmony.not_null_validators_validator_hex_address.2b0ca6958d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_validators_validator_hex_address.sql", "original_file_path": "models/core/validators.yml", "name": "not_null_validators_validator_hex_address", "alias": "not_null_validators_validator_hex_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["validators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/validators.yml/not_null_validators_validator_hex_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3568609, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.validators\nwhere validator_hex_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "validator_hex_address", "file_key_name": "models.validators"}, "test.harmony.not_null_validators_validator_identity.b113614b7c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "validator_identity", "model": "{{ get_where_subquery(ref('validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_validators_validator_identity"], "unique_id": "test.harmony.not_null_validators_validator_identity.b113614b7c", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_validators_validator_identity.sql", "original_file_path": "models/core/validators.yml", "name": "not_null_validators_validator_identity", "alias": "not_null_validators_validator_identity", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["validators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/validators.yml/not_null_validators_validator_identity.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3575969, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.validators\nwhere validator_identity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "validator_identity", "file_key_name": "models.validators"}, "test.harmony.not_null_validators_active_status.4441826ad0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "active_status", "model": "{{ get_where_subquery(ref('validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_validators_active_status"], "unique_id": "test.harmony.not_null_validators_active_status.4441826ad0", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_validators_active_status.sql", "original_file_path": "models/core/validators.yml", "name": "not_null_validators_active_status", "alias": "not_null_validators_active_status", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["validators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/validators.yml/not_null_validators_active_status.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3584561, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.validators\nwhere active_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "active_status", "file_key_name": "models.validators"}, "test.harmony.not_null_validators_total_one_delegated.70a13fb852": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_one_delegated", "model": "{{ get_where_subquery(ref('validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_validators_total_one_delegated"], "unique_id": "test.harmony.not_null_validators_total_one_delegated.70a13fb852", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_validators_total_one_delegated.sql", "original_file_path": "models/core/validators.yml", "name": "not_null_validators_total_one_delegated", "alias": "not_null_validators_total_one_delegated", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["validators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/validators.yml/not_null_validators_total_one_delegated.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.359188, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.validators\nwhere total_one_delegated is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_one_delegated", "file_key_name": "models.validators"}, "test.harmony.not_null_validators_total_one_rewarded.177c7e37dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_one_rewarded", "model": "{{ get_where_subquery(ref('validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_validators_total_one_rewarded"], "unique_id": "test.harmony.not_null_validators_total_one_rewarded.177c7e37dc", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_validators_total_one_rewarded.sql", "original_file_path": "models/core/validators.yml", "name": "not_null_validators_total_one_rewarded", "alias": "not_null_validators_total_one_rewarded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["validators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/validators.yml/not_null_validators_total_one_rewarded.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.359916, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.validators\nwhere total_one_rewarded is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_one_rewarded", "file_key_name": "models.validators"}, "test.harmony.not_null_validators_total_one_undelegated.5342e21372": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_one_undelegated", "model": "{{ get_where_subquery(ref('validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_validators_total_one_undelegated"], "unique_id": "test.harmony.not_null_validators_total_one_undelegated.5342e21372", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_validators_total_one_undelegated.sql", "original_file_path": "models/core/validators.yml", "name": "not_null_validators_total_one_undelegated", "alias": "not_null_validators_total_one_undelegated", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["validators"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/validators.yml/not_null_validators_total_one_undelegated.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.360852, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.validators\nwhere total_one_undelegated is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_one_undelegated", "file_key_name": "models.validators"}, "test.harmony.not_null_swaps_block_timestamp.5d3288de7d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_swaps_block_timestamp"], "unique_id": "test.harmony.not_null_swaps_block_timestamp.5d3288de7d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_swaps_block_timestamp.sql", "original_file_path": "models/core/swaps.yml", "name": "not_null_swaps_block_timestamp", "alias": "not_null_swaps_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/swaps.yml/not_null_swaps_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.364442, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.swaps\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.swaps"}, "test.harmony.not_null_swaps_ingested_at.c7fb2cdf29": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_swaps_ingested_at"], "unique_id": "test.harmony.not_null_swaps_ingested_at.c7fb2cdf29", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_swaps_ingested_at.sql", "original_file_path": "models/core/swaps.yml", "name": "not_null_swaps_ingested_at", "alias": "not_null_swaps_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/swaps.yml/not_null_swaps_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.365209, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.swaps\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.swaps"}, "test.harmony.not_null_swaps_log_id.2ca95384a4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_swaps_log_id"], "unique_id": "test.harmony.not_null_swaps_log_id.2ca95384a4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_swaps_log_id.sql", "original_file_path": "models/core/swaps.yml", "name": "not_null_swaps_log_id", "alias": "not_null_swaps_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/swaps.yml/not_null_swaps_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.365958, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.swaps\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.swaps"}, "test.harmony.unique_swaps_log_id.f5bf2166b8": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "unique_swaps_log_id"], "unique_id": "test.harmony.unique_swaps_log_id.f5bf2166b8", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_swaps_log_id.sql", "original_file_path": "models/core/swaps.yml", "name": "unique_swaps_log_id", "alias": "unique_swaps_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/swaps.yml/unique_swaps_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.366802, "compiled_sql": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.swaps\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.swaps"}, "test.harmony.not_null_swaps_tx_hash.45f63d6a6d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_swaps_tx_hash"], "unique_id": "test.harmony.not_null_swaps_tx_hash.45f63d6a6d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_swaps_tx_hash.sql", "original_file_path": "models/core/swaps.yml", "name": "not_null_swaps_tx_hash", "alias": "not_null_swaps_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/swaps.yml/not_null_swaps_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.367539, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.swaps\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.swaps"}, "test.harmony.not_null_swaps_pool_address.8e2188071f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_swaps_pool_address"], "unique_id": "test.harmony.not_null_swaps_pool_address.8e2188071f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_swaps_pool_address.sql", "original_file_path": "models/core/swaps.yml", "name": "not_null_swaps_pool_address", "alias": "not_null_swaps_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/swaps.yml/not_null_swaps_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3682702, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.swaps\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.swaps"}, "test.harmony.not_null_swaps_amount0In.5c503a8e41": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount0In", "model": "{{ get_where_subquery(ref('swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_swaps_amount0In"], "unique_id": "test.harmony.not_null_swaps_amount0In.5c503a8e41", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_swaps_amount0In.sql", "original_file_path": "models/core/swaps.yml", "name": "not_null_swaps_amount0In", "alias": "not_null_swaps_amount0In", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/swaps.yml/not_null_swaps_amount0In.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3691158, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.swaps\nwhere amount0In is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount0In", "file_key_name": "models.swaps"}, "test.harmony.not_null_swaps_amount0Out.de7b24755d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount0Out", "model": "{{ get_where_subquery(ref('swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_swaps_amount0Out"], "unique_id": "test.harmony.not_null_swaps_amount0Out.de7b24755d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_swaps_amount0Out.sql", "original_file_path": "models/core/swaps.yml", "name": "not_null_swaps_amount0Out", "alias": "not_null_swaps_amount0Out", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/swaps.yml/not_null_swaps_amount0Out.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.369845, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.swaps\nwhere amount0Out is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount0Out", "file_key_name": "models.swaps"}, "test.harmony.not_null_swaps_amount1In.c15b0b307d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount1In", "model": "{{ get_where_subquery(ref('swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_swaps_amount1In"], "unique_id": "test.harmony.not_null_swaps_amount1In.c15b0b307d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_swaps_amount1In.sql", "original_file_path": "models/core/swaps.yml", "name": "not_null_swaps_amount1In", "alias": "not_null_swaps_amount1In", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/swaps.yml/not_null_swaps_amount1In.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3705652, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.swaps\nwhere amount1In is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount1In", "file_key_name": "models.swaps"}, "test.harmony.not_null_swaps_amount1Out.dd655a2a88": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount1Out", "model": "{{ get_where_subquery(ref('swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_swaps_amount1Out"], "unique_id": "test.harmony.not_null_swaps_amount1Out.dd655a2a88", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_swaps_amount1Out.sql", "original_file_path": "models/core/swaps.yml", "name": "not_null_swaps_amount1Out", "alias": "not_null_swaps_amount1Out", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/swaps.yml/not_null_swaps_amount1Out.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.371418, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.swaps\nwhere amount1Out is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount1Out", "file_key_name": "models.swaps"}, "test.harmony.not_null_swaps_from_address.d7528e5d54": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_address", "model": "{{ get_where_subquery(ref('swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_swaps_from_address"], "unique_id": "test.harmony.not_null_swaps_from_address.d7528e5d54", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_swaps_from_address.sql", "original_file_path": "models/core/swaps.yml", "name": "not_null_swaps_from_address", "alias": "not_null_swaps_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/swaps.yml/not_null_swaps_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.372148, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.swaps\nwhere from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_address", "file_key_name": "models.swaps"}, "test.harmony.not_null_swaps_to_address.1cc0a11155": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_address", "model": "{{ get_where_subquery(ref('swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_swaps_to_address"], "unique_id": "test.harmony.not_null_swaps_to_address.1cc0a11155", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_swaps_to_address.sql", "original_file_path": "models/core/swaps.yml", "name": "not_null_swaps_to_address", "alias": "not_null_swaps_to_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/swaps.yml/not_null_swaps_to_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.372874, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.swaps\nwhere to_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "to_address", "file_key_name": "models.swaps"}, "test.harmony.unique_logs_log_id.f25b608512": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "unique_logs_log_id"], "unique_id": "test.harmony.unique_logs_log_id.f25b608512", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_logs_log_id.sql", "original_file_path": "models/core/logs.yml", "name": "unique_logs_log_id", "alias": "unique_logs_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/logs.yml/unique_logs_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.376066, "compiled_sql": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.logs\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.logs"}, "test.harmony.not_null_logs_log_id.f4da856ee6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_logs_log_id"], "unique_id": "test.harmony.not_null_logs_log_id.f4da856ee6", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_logs_log_id.sql", "original_file_path": "models/core/logs.yml", "name": "not_null_logs_log_id", "alias": "not_null_logs_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/logs.yml/not_null_logs_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.376939, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.logs\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.logs"}, "test.harmony.not_null_logs_block_id.b7026e9962": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_logs_block_id"], "unique_id": "test.harmony.not_null_logs_block_id.b7026e9962", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_logs_block_id.sql", "original_file_path": "models/core/logs.yml", "name": "not_null_logs_block_id", "alias": "not_null_logs_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/logs.yml/not_null_logs_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.377685, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.logs\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.logs"}, "test.harmony.not_null_logs_block_timestamp.2b6ad6b9f2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_logs_block_timestamp"], "unique_id": "test.harmony.not_null_logs_block_timestamp.2b6ad6b9f2", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_logs_block_timestamp.sql", "original_file_path": "models/core/logs.yml", "name": "not_null_logs_block_timestamp", "alias": "not_null_logs_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/logs.yml/not_null_logs_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.378426, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.logs\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.logs"}, "test.harmony.not_null_logs_ingested_at.471bc62a90": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_logs_ingested_at"], "unique_id": "test.harmony.not_null_logs_ingested_at.471bc62a90", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_logs_ingested_at.sql", "original_file_path": "models/core/logs.yml", "name": "not_null_logs_ingested_at", "alias": "not_null_logs_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/logs.yml/not_null_logs_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.379272, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.logs\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.logs"}, "test.harmony.not_null_logs_tx_hash.de211e27c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_logs_tx_hash"], "unique_id": "test.harmony.not_null_logs_tx_hash.de211e27c7", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_logs_tx_hash.sql", "original_file_path": "models/core/logs.yml", "name": "not_null_logs_tx_hash", "alias": "not_null_logs_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/logs.yml/not_null_logs_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.380021, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.logs\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.logs"}, "test.harmony.not_null_logs_event_index.16f3fe5212": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_index", "model": "{{ get_where_subquery(ref('logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_logs_event_index"], "unique_id": "test.harmony.not_null_logs_event_index.16f3fe5212", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_logs_event_index.sql", "original_file_path": "models/core/logs.yml", "name": "not_null_logs_event_index", "alias": "not_null_logs_event_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/logs.yml/not_null_logs_event_index.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3807502, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.logs\nwhere event_index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_index", "file_key_name": "models.logs"}, "test.harmony.not_null_logs_native_contract_address.9250381076": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "native_contract_address", "model": "{{ get_where_subquery(ref('logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_logs_native_contract_address"], "unique_id": "test.harmony.not_null_logs_native_contract_address.9250381076", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_logs_native_contract_address.sql", "original_file_path": "models/core/logs.yml", "name": "not_null_logs_native_contract_address", "alias": "not_null_logs_native_contract_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/logs.yml/not_null_logs_native_contract_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3814762, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.logs\nwhere native_contract_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "native_contract_address", "file_key_name": "models.logs"}, "test.harmony.not_null_logs_evm_contract_address.cd39018b68": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "evm_contract_address", "model": "{{ get_where_subquery(ref('logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_logs_evm_contract_address"], "unique_id": "test.harmony.not_null_logs_evm_contract_address.cd39018b68", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_logs_evm_contract_address.sql", "original_file_path": "models/core/logs.yml", "name": "not_null_logs_evm_contract_address", "alias": "not_null_logs_evm_contract_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/logs.yml/not_null_logs_evm_contract_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.382315, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.logs\nwhere evm_contract_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "evm_contract_address", "file_key_name": "models.logs"}, "test.harmony.not_null_logs_topics.6d9f87e3ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "topics", "model": "{{ get_where_subquery(ref('logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_logs_topics"], "unique_id": "test.harmony.not_null_logs_topics.6d9f87e3ef", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_logs_topics.sql", "original_file_path": "models/core/logs.yml", "name": "not_null_logs_topics", "alias": "not_null_logs_topics", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/logs.yml/not_null_logs_topics.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.383042, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.logs\nwhere topics is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "topics", "file_key_name": "models.logs"}, "test.harmony.not_null_logs_data.e1331bb0e3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "data", "model": "{{ get_where_subquery(ref('logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_logs_data"], "unique_id": "test.harmony.not_null_logs_data.e1331bb0e3", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_logs_data.sql", "original_file_path": "models/core/logs.yml", "name": "not_null_logs_data", "alias": "not_null_logs_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/logs.yml/not_null_logs_data.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.383761, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.logs\nwhere data is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "data", "file_key_name": "models.logs"}, "test.harmony.not_null_logs_event_removed.811c385fa4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_removed", "model": "{{ get_where_subquery(ref('logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_logs_event_removed"], "unique_id": "test.harmony.not_null_logs_event_removed.811c385fa4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_logs_event_removed.sql", "original_file_path": "models/core/logs.yml", "name": "not_null_logs_event_removed", "alias": "not_null_logs_event_removed", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/logs.yml/not_null_logs_event_removed.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.38461, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.logs\nwhere event_removed is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_removed", "file_key_name": "models.logs"}, "test.harmony.unique_transfers_log_id.c52ad13d9c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "unique_transfers_log_id"], "unique_id": "test.harmony.unique_transfers_log_id.c52ad13d9c", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_transfers_log_id.sql", "original_file_path": "models/core/transfers.yml", "name": "unique_transfers_log_id", "alias": "unique_transfers_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/transfers.yml/unique_transfers_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.38698, "compiled_sql": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.transfers\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.transfers"}, "test.harmony.not_null_transfers_log_id.e3335603cc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_transfers_log_id"], "unique_id": "test.harmony.not_null_transfers_log_id.e3335603cc", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_transfers_log_id.sql", "original_file_path": "models/core/transfers.yml", "name": "not_null_transfers_log_id", "alias": "not_null_transfers_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/transfers.yml/not_null_transfers_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.387852, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.transfers\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.transfers"}, "test.harmony.not_null_transfers_block_id.8563ace82f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_transfers_block_id"], "unique_id": "test.harmony.not_null_transfers_block_id.8563ace82f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_transfers_block_id.sql", "original_file_path": "models/core/transfers.yml", "name": "not_null_transfers_block_id", "alias": "not_null_transfers_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/transfers.yml/not_null_transfers_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3885949, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.transfers\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.transfers"}, "test.harmony.not_null_transfers_tx_hash.f917940677": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_transfers_tx_hash"], "unique_id": "test.harmony.not_null_transfers_tx_hash.f917940677", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_transfers_tx_hash.sql", "original_file_path": "models/core/transfers.yml", "name": "not_null_transfers_tx_hash", "alias": "not_null_transfers_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/transfers.yml/not_null_transfers_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3893209, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.transfers\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.transfers"}, "test.harmony.not_null_transfers_block_timestamp.1ee2080d0f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_transfers_block_timestamp"], "unique_id": "test.harmony.not_null_transfers_block_timestamp.1ee2080d0f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_transfers_block_timestamp.sql", "original_file_path": "models/core/transfers.yml", "name": "not_null_transfers_block_timestamp", "alias": "not_null_transfers_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/transfers.yml/not_null_transfers_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.390173, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.transfers\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.transfers"}, "test.harmony.not_null_transfers_ingested_at.2973350946": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_transfers_ingested_at"], "unique_id": "test.harmony.not_null_transfers_ingested_at.2973350946", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_transfers_ingested_at.sql", "original_file_path": "models/core/transfers.yml", "name": "not_null_transfers_ingested_at", "alias": "not_null_transfers_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/transfers.yml/not_null_transfers_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.390906, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.transfers\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.transfers"}, "test.harmony.not_null_transfers_contract_address.bb3139097d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_address", "model": "{{ get_where_subquery(ref('transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_transfers_contract_address"], "unique_id": "test.harmony.not_null_transfers_contract_address.bb3139097d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_transfers_contract_address.sql", "original_file_path": "models/core/transfers.yml", "name": "not_null_transfers_contract_address", "alias": "not_null_transfers_contract_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/transfers.yml/not_null_transfers_contract_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.391627, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.transfers\nwhere contract_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contract_address", "file_key_name": "models.transfers"}, "test.harmony.not_null_transfers_from_address.2fb510e338": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_address", "model": "{{ get_where_subquery(ref('transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_transfers_from_address"], "unique_id": "test.harmony.not_null_transfers_from_address.2fb510e338", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_transfers_from_address.sql", "original_file_path": "models/core/transfers.yml", "name": "not_null_transfers_from_address", "alias": "not_null_transfers_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/transfers.yml/not_null_transfers_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3923578, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.transfers\nwhere from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_address", "file_key_name": "models.transfers"}, "test.harmony.not_null_transfers_to_address.fb7c1028bc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_address", "model": "{{ get_where_subquery(ref('transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_transfers_to_address"], "unique_id": "test.harmony.not_null_transfers_to_address.fb7c1028bc", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_transfers_to_address.sql", "original_file_path": "models/core/transfers.yml", "name": "not_null_transfers_to_address", "alias": "not_null_transfers_to_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/transfers.yml/not_null_transfers_to_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3933141, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.transfers\nwhere to_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "to_address", "file_key_name": "models.transfers"}, "test.harmony.not_null_transfers_raw_amount.0cbb84fe98": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "raw_amount", "model": "{{ get_where_subquery(ref('transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_transfers_raw_amount"], "unique_id": "test.harmony.not_null_transfers_raw_amount.0cbb84fe98", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_transfers_raw_amount.sql", "original_file_path": "models/core/transfers.yml", "name": "not_null_transfers_raw_amount", "alias": "not_null_transfers_raw_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/transfers.yml/not_null_transfers_raw_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.39403, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.transfers\nwhere raw_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "raw_amount", "file_key_name": "models.transfers"}, "test.harmony.not_null_txs_block_timestamp.8ef5450d62": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_block_timestamp"], "unique_id": "test.harmony.not_null_txs_block_timestamp.8ef5450d62", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_block_timestamp.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_block_timestamp", "alias": "not_null_txs_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.397452, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.txs"}, "test.harmony.not_null_txs_ingested_at.314927472a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_ingested_at"], "unique_id": "test.harmony.not_null_txs_ingested_at.314927472a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_ingested_at.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_ingested_at", "alias": "not_null_txs_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.3983219, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.txs"}, "test.harmony.not_null_txs_nonce.7f8a213b50": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nonce", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_nonce"], "unique_id": "test.harmony.not_null_txs_nonce.7f8a213b50", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_nonce.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_nonce", "alias": "not_null_txs_nonce", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_nonce.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.399072, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere nonce is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "nonce", "file_key_name": "models.txs"}, "test.harmony.not_null_txs_native_from_address.957b997570": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "native_from_address", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_native_from_address"], "unique_id": "test.harmony.not_null_txs_native_from_address.957b997570", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_native_from_address.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_native_from_address", "alias": "not_null_txs_native_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_native_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.399811, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere native_from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "native_from_address", "file_key_name": "models.txs"}, "test.harmony.not_null_txs_native_to_address.d8bc78d945": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "native_to_address", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_native_to_address"], "unique_id": "test.harmony.not_null_txs_native_to_address.d8bc78d945", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_native_to_address.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_native_to_address", "alias": "not_null_txs_native_to_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_native_to_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.400544, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere native_to_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "native_to_address", "file_key_name": "models.txs"}, "test.harmony.not_null_txs_from_address.d9889ce7a7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_address", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_from_address"], "unique_id": "test.harmony.not_null_txs_from_address.d9889ce7a7", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_from_address.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_from_address", "alias": "not_null_txs_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.40139, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_address", "file_key_name": "models.txs"}, "test.harmony.not_null_txs_to_address.1133d6e894": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_address", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_to_address"], "unique_id": "test.harmony.not_null_txs_to_address.1133d6e894", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_to_address.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_to_address", "alias": "not_null_txs_to_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_to_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.402123, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere to_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "to_address", "file_key_name": "models.txs"}, "test.harmony.not_null_txs_value.afdf3ec4e4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_value"], "unique_id": "test.harmony.not_null_txs_value.afdf3ec4e4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_value.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_value", "alias": "not_null_txs_value", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_value.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.402847, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "value", "file_key_name": "models.txs"}, "test.harmony.not_null_txs_gas_price.d358615965": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_price", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_gas_price"], "unique_id": "test.harmony.not_null_txs_gas_price.d358615965", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_gas_price.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_gas_price", "alias": "not_null_txs_gas_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_gas_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4037042, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere gas_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gas_price", "file_key_name": "models.txs"}, "test.harmony.not_null_txs_gas.6961e08eff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_gas"], "unique_id": "test.harmony.not_null_txs_gas.6961e08eff", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_gas.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_gas", "alias": "not_null_txs_gas", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_gas.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4044302, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere gas is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gas", "file_key_name": "models.txs"}, "test.harmony.not_null_txs_tx_hash.a718ce56dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_tx_hash"], "unique_id": "test.harmony.not_null_txs_tx_hash.a718ce56dd", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_tx_hash.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_tx_hash", "alias": "not_null_txs_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.405151, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.txs"}, "test.harmony.unique_txs_tx_hash.57f702658d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "unique_txs_tx_hash"], "unique_id": "test.harmony.unique_txs_tx_hash.57f702658d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_txs_tx_hash.sql", "original_file_path": "models/core/txs.yml", "name": "unique_txs_tx_hash", "alias": "unique_txs_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/unique_txs_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.405872, "compiled_sql": "\n    \n    \n\nselect\n    tx_hash as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.txs\nwhere tx_hash is not null\ngroup by tx_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.txs"}, "test.harmony.not_null_txs_data.9e837c9d87": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "data", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_data"], "unique_id": "test.harmony.not_null_txs_data.9e837c9d87", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_data.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_data", "alias": "not_null_txs_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_data.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4066958, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere data is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "data", "file_key_name": "models.txs"}, "test.harmony.not_null_txs_status.a6404fa35e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "status", "model": "{{ get_where_subquery(ref('txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_txs_status"], "unique_id": "test.harmony.not_null_txs_status.a6404fa35e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_txs_status.sql", "original_file_path": "models/core/txs.yml", "name": "not_null_txs_status", "alias": "not_null_txs_status", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/txs.yml/not_null_txs_status.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.407423, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.txs\nwhere status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status", "file_key_name": "models.txs"}, "test.harmony.unique_btc_bridge_log_id.dc62ce7d29": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "unique_btc_bridge_log_id"], "unique_id": "test.harmony.unique_btc_bridge_log_id.dc62ce7d29", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_btc_bridge_log_id.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "unique_btc_bridge_log_id", "alias": "unique_btc_bridge_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/unique_btc_bridge_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4102452, "compiled_sql": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.btc_bridge\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.btc_bridge"}, "test.harmony.not_null_btc_bridge_log_id.32a932e33f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_btc_bridge_log_id"], "unique_id": "test.harmony.not_null_btc_bridge_log_id.32a932e33f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_btc_bridge_log_id.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "not_null_btc_bridge_log_id", "alias": "not_null_btc_bridge_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/not_null_btc_bridge_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.411009, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.btc_bridge\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.btc_bridge"}, "test.harmony.not_null_btc_bridge_block_id.915dd88258": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_btc_bridge_block_id"], "unique_id": "test.harmony.not_null_btc_bridge_block_id.915dd88258", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_btc_bridge_block_id.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "not_null_btc_bridge_block_id", "alias": "not_null_btc_bridge_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/not_null_btc_bridge_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4118679, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.btc_bridge\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.btc_bridge"}, "test.harmony.not_null_btc_bridge_tx_hash.4af9bb9dc3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_btc_bridge_tx_hash"], "unique_id": "test.harmony.not_null_btc_bridge_tx_hash.4af9bb9dc3", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_btc_bridge_tx_hash.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "not_null_btc_bridge_tx_hash", "alias": "not_null_btc_bridge_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/not_null_btc_bridge_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.412611, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.btc_bridge\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.btc_bridge"}, "test.harmony.not_null_btc_bridge_block_timestamp.bee9636f47": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_btc_bridge_block_timestamp"], "unique_id": "test.harmony.not_null_btc_bridge_block_timestamp.bee9636f47", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_btc_bridge_block_timestamp.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "not_null_btc_bridge_block_timestamp", "alias": "not_null_btc_bridge_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/not_null_btc_bridge_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4133499, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.btc_bridge\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.btc_bridge"}, "test.harmony.not_null_btc_bridge_ingested_at.6dbd126cd3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_btc_bridge_ingested_at"], "unique_id": "test.harmony.not_null_btc_bridge_ingested_at.6dbd126cd3", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_btc_bridge_ingested_at.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "not_null_btc_bridge_ingested_at", "alias": "not_null_btc_bridge_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/not_null_btc_bridge_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.414208, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.btc_bridge\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.btc_bridge"}, "test.harmony.not_null_btc_bridge_contract_address.7739f76dd2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_address", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_btc_bridge_contract_address"], "unique_id": "test.harmony.not_null_btc_bridge_contract_address.7739f76dd2", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_btc_bridge_contract_address.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "not_null_btc_bridge_contract_address", "alias": "not_null_btc_bridge_contract_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/not_null_btc_bridge_contract_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.414942, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.btc_bridge\nwhere contract_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contract_address", "file_key_name": "models.btc_bridge"}, "test.harmony.not_null_btc_bridge_from_address.704b573f4b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_address", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_btc_bridge_from_address"], "unique_id": "test.harmony.not_null_btc_bridge_from_address.704b573f4b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_btc_bridge_from_address.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "not_null_btc_bridge_from_address", "alias": "not_null_btc_bridge_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/not_null_btc_bridge_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.415669, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.btc_bridge\nwhere from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_address", "file_key_name": "models.btc_bridge"}, "test.harmony.not_null_btc_bridge_to_address.3662fdc894": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_address", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_btc_bridge_to_address"], "unique_id": "test.harmony.not_null_btc_bridge_to_address.3662fdc894", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_btc_bridge_to_address.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "not_null_btc_bridge_to_address", "alias": "not_null_btc_bridge_to_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/not_null_btc_bridge_to_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.416395, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.btc_bridge\nwhere to_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "to_address", "file_key_name": "models.btc_bridge"}, "test.harmony.not_null_btc_bridge_tx_type.7148bf48d6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_type", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_btc_bridge_tx_type"], "unique_id": "test.harmony.not_null_btc_bridge_tx_type.7148bf48d6", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_btc_bridge_tx_type.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "not_null_btc_bridge_tx_type", "alias": "not_null_btc_bridge_tx_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/not_null_btc_bridge_tx_type.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4172428, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.btc_bridge\nwhere tx_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_type", "file_key_name": "models.btc_bridge"}, "test.harmony.accepted_values_btc_bridge_tx_type__True__issue__redeem.53c7451a12": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["issue", "redeem"], "quote": true, "column_name": "tx_type", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "accepted_values_btc_bridge_tx_type__True__issue__redeem"], "unique_id": "test.harmony.accepted_values_btc_bridge_tx_type__True__issue__redeem.53c7451a12", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "accepted_values_btc_bridge_tx_type__True__issue__redeem.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "accepted_values_btc_bridge_tx_type__True__issue__redeem", "alias": "accepted_values_btc_bridge_tx_type__True__issue__redeem", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/accepted_values_btc_bridge_tx_type__True__issue__redeem.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1652754672.41815, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        tx_type as value_field,\n        count(*) as n_records\n\n    from HARMONY.DEV.btc_bridge\n    group by tx_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'issue','redeem'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_type", "file_key_name": "models.btc_bridge"}, "test.harmony.not_null_btc_bridge_is_vault.53fa8b2ebb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_vault", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_btc_bridge_is_vault"], "unique_id": "test.harmony.not_null_btc_bridge_is_vault.53fa8b2ebb", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_btc_bridge_is_vault.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "not_null_btc_bridge_is_vault", "alias": "not_null_btc_bridge_is_vault", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/not_null_btc_bridge_is_vault.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4238431, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.btc_bridge\nwhere is_vault is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_vault", "file_key_name": "models.btc_bridge"}, "test.harmony.not_null_btc_bridge_raw_amount.9e1b7ab3e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "raw_amount", "model": "{{ get_where_subquery(ref('btc_bridge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.btc_bridge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_btc_bridge_raw_amount"], "unique_id": "test.harmony.not_null_btc_bridge_raw_amount.9e1b7ab3e0", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_btc_bridge_raw_amount.sql", "original_file_path": "models/core/btc_bridge.yml", "name": "not_null_btc_bridge_raw_amount", "alias": "not_null_btc_bridge_raw_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["btc_bridge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/btc_bridge.yml/not_null_btc_bridge_raw_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4246058, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.btc_bridge\nwhere raw_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "raw_amount", "file_key_name": "models.btc_bridge"}, "test.harmony.unique_blocks_block_id.44b12036dd": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "unique_blocks_block_id"], "unique_id": "test.harmony.unique_blocks_block_id.44b12036dd", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_blocks_block_id.sql", "original_file_path": "models/core/blocks.yml", "name": "unique_blocks_block_id", "alias": "unique_blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/unique_blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.427721, "compiled_sql": "\n    \n    \n\nselect\n    block_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.blocks\nwhere block_id is not null\ngroup by block_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_block_id.27dfbcb068": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_block_id"], "unique_id": "test.harmony.not_null_blocks_block_id.27dfbcb068", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_block_id.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_block_id", "alias": "not_null_blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.428703, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_block_timestamp.aa760dde19": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_block_timestamp"], "unique_id": "test.harmony.not_null_blocks_block_timestamp.aa760dde19", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_block_timestamp.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_block_timestamp", "alias": "not_null_blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4294531, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_ingested_at.859ac7d611": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_ingested_at"], "unique_id": "test.harmony.not_null_blocks_ingested_at.859ac7d611", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_ingested_at.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_ingested_at", "alias": "not_null_blocks_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.430186, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.blocks"}, "test.harmony.unique_blocks_block_hash.e25d7e2970": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "block_hash", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "unique_blocks_block_hash"], "unique_id": "test.harmony.unique_blocks_block_hash.e25d7e2970", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_blocks_block_hash.sql", "original_file_path": "models/core/blocks.yml", "name": "unique_blocks_block_hash", "alias": "unique_blocks_block_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/unique_blocks_block_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.431037, "compiled_sql": "\n    \n    \n\nselect\n    block_hash as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.blocks\nwhere block_hash is not null\ngroup by block_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_hash", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_block_hash.f93dc2372d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_hash", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_block_hash"], "unique_id": "test.harmony.not_null_blocks_block_hash.f93dc2372d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_block_hash.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_block_hash", "alias": "not_null_blocks_block_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_block_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.431767, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere block_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_hash", "file_key_name": "models.blocks"}, "test.harmony.unique_blocks_block_parent_hash.af1623766d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "block_parent_hash", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "unique_blocks_block_parent_hash"], "unique_id": "test.harmony.unique_blocks_block_parent_hash.af1623766d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_blocks_block_parent_hash.sql", "original_file_path": "models/core/blocks.yml", "name": "unique_blocks_block_parent_hash", "alias": "unique_blocks_block_parent_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/unique_blocks_block_parent_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4324968, "compiled_sql": "\n    \n    \n\nselect\n    block_parent_hash as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.blocks\nwhere block_parent_hash is not null\ngroup by block_parent_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_parent_hash", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_block_parent_hash.f9bbb459e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_parent_hash", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_block_parent_hash"], "unique_id": "test.harmony.not_null_blocks_block_parent_hash.f9bbb459e0", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_block_parent_hash.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_block_parent_hash", "alias": "not_null_blocks_block_parent_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_block_parent_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.433341, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere block_parent_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_parent_hash", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_gas_limit.f3d264290d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_limit", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_gas_limit"], "unique_id": "test.harmony.not_null_blocks_gas_limit.f3d264290d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_gas_limit.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_gas_limit", "alias": "not_null_blocks_gas_limit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_gas_limit.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.434077, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere gas_limit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gas_limit", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_gas_used.70b3b7d3fa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_used", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_gas_used"], "unique_id": "test.harmony.not_null_blocks_gas_used.70b3b7d3fa", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_gas_used.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_gas_used", "alias": "not_null_blocks_gas_used", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_gas_used.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4348009, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere gas_used is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gas_used", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_miner.29cc4b19a7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "miner", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_miner"], "unique_id": "test.harmony.not_null_blocks_miner.29cc4b19a7", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_miner.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_miner", "alias": "not_null_blocks_miner", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_miner.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4355168, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere miner is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "miner", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_nonce.0943cbfeed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nonce", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_nonce"], "unique_id": "test.harmony.not_null_blocks_nonce.0943cbfeed", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_nonce.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_nonce", "alias": "not_null_blocks_nonce", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_nonce.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.43637, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere nonce is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "nonce", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_size.ad5782522f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "size", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_size"], "unique_id": "test.harmony.not_null_blocks_size.ad5782522f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_size.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_size", "alias": "not_null_blocks_size", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_size.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4370859, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere size is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "size", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_tx_count.a43c2db24e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_tx_count"], "unique_id": "test.harmony.not_null_blocks_tx_count.a43c2db24e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_tx_count.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_tx_count", "alias": "not_null_blocks_tx_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_tx_count.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.437813, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere tx_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_count", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_state_root.7c516b3871": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "state_root", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_state_root"], "unique_id": "test.harmony.not_null_blocks_state_root.7c516b3871", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_state_root.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_state_root", "alias": "not_null_blocks_state_root", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_state_root.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4386759, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere state_root is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "state_root", "file_key_name": "models.blocks"}, "test.harmony.not_null_blocks_receipts_root.c17d662161": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "receipts_root", "model": "{{ get_where_subquery(ref('blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_blocks_receipts_root"], "unique_id": "test.harmony.not_null_blocks_receipts_root.c17d662161", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_blocks_receipts_root.sql", "original_file_path": "models/core/blocks.yml", "name": "not_null_blocks_receipts_root", "alias": "not_null_blocks_receipts_root", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/blocks.yml/not_null_blocks_receipts_root.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.439404, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.blocks\nwhere receipts_root is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "receipts_root", "file_key_name": "models.blocks"}, "test.harmony.unique_liquidity_pools_pool_address.be2b9f6549": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('liquidity_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "unique_liquidity_pools_pool_address"], "unique_id": "test.harmony.unique_liquidity_pools_pool_address.be2b9f6549", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_liquidity_pools_pool_address.sql", "original_file_path": "models/core/liquidity_pools.yml", "name": "unique_liquidity_pools_pool_address", "alias": "unique_liquidity_pools_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["liquidity_pools"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/liquidity_pools.yml/unique_liquidity_pools_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.441052, "compiled_sql": "\n    \n    \n\nselect\n    pool_address as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.liquidity_pools\nwhere pool_address is not null\ngroup by pool_address\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.liquidity_pools"}, "test.harmony.not_null_liquidity_pools_pool_address.8fd9b96a56": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('liquidity_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_liquidity_pools_pool_address"], "unique_id": "test.harmony.not_null_liquidity_pools_pool_address.8fd9b96a56", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_liquidity_pools_pool_address.sql", "original_file_path": "models/core/liquidity_pools.yml", "name": "not_null_liquidity_pools_pool_address", "alias": "not_null_liquidity_pools_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["liquidity_pools"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/liquidity_pools.yml/not_null_liquidity_pools_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.441951, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.liquidity_pools\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.liquidity_pools"}, "test.harmony.not_null_liquidity_pools_pool_name.ee41ec63dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_name", "model": "{{ get_where_subquery(ref('liquidity_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_liquidity_pools_pool_name"], "unique_id": "test.harmony.not_null_liquidity_pools_pool_name.ee41ec63dc", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_liquidity_pools_pool_name.sql", "original_file_path": "models/core/liquidity_pools.yml", "name": "not_null_liquidity_pools_pool_name", "alias": "not_null_liquidity_pools_pool_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["liquidity_pools"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/liquidity_pools.yml/not_null_liquidity_pools_pool_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4427001, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.liquidity_pools\nwhere pool_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_name", "file_key_name": "models.liquidity_pools"}, "test.harmony.not_null_liquidity_pools_token0.cf9b78ba02": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token0", "model": "{{ get_where_subquery(ref('liquidity_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_liquidity_pools_token0"], "unique_id": "test.harmony.not_null_liquidity_pools_token0.cf9b78ba02", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_liquidity_pools_token0.sql", "original_file_path": "models/core/liquidity_pools.yml", "name": "not_null_liquidity_pools_token0", "alias": "not_null_liquidity_pools_token0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["liquidity_pools"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/liquidity_pools.yml/not_null_liquidity_pools_token0.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.443437, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.liquidity_pools\nwhere token0 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token0", "file_key_name": "models.liquidity_pools"}, "test.harmony.not_null_liquidity_pools_token1.cd051a6071": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token1", "model": "{{ get_where_subquery(ref('liquidity_pools')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_liquidity_pools_token1"], "unique_id": "test.harmony.not_null_liquidity_pools_token1.cd051a6071", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_liquidity_pools_token1.sql", "original_file_path": "models/core/liquidity_pools.yml", "name": "not_null_liquidity_pools_token1", "alias": "not_null_liquidity_pools_token1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["liquidity_pools"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/liquidity_pools.yml/not_null_liquidity_pools_token1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.444291, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.liquidity_pools\nwhere token1 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token1", "file_key_name": "models.liquidity_pools"}, "test.harmony.unique_tokens_token_address.9d9193ee34": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "token_address", "model": "{{ get_where_subquery(ref('tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "unique_tokens_token_address"], "unique_id": "test.harmony.unique_tokens_token_address.9d9193ee34", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_tokens_token_address.sql", "original_file_path": "models/core/tokens.yml", "name": "unique_tokens_token_address", "alias": "unique_tokens_token_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/tokens.yml/unique_tokens_token_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4459379, "compiled_sql": "\n    \n    \n\nselect\n    token_address as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.tokens\nwhere token_address is not null\ngroup by token_address\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_address", "file_key_name": "models.tokens"}, "test.harmony.not_null_tokens_token_address.d9e6576877": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_address", "model": "{{ get_where_subquery(ref('tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_tokens_token_address"], "unique_id": "test.harmony.not_null_tokens_token_address.d9e6576877", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokens_token_address.sql", "original_file_path": "models/core/tokens.yml", "name": "not_null_tokens_token_address", "alias": "not_null_tokens_token_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/tokens.yml/not_null_tokens_token_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.446691, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokens\nwhere token_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_address", "file_key_name": "models.tokens"}, "test.harmony.not_null_tokens_token_symbol.b9037dba39": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_symbol", "model": "{{ get_where_subquery(ref('tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_tokens_token_symbol"], "unique_id": "test.harmony.not_null_tokens_token_symbol.b9037dba39", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokens_token_symbol.sql", "original_file_path": "models/core/tokens.yml", "name": "not_null_tokens_token_symbol", "alias": "not_null_tokens_token_symbol", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/tokens.yml/not_null_tokens_token_symbol.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.447544, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokens\nwhere token_symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_symbol", "file_key_name": "models.tokens"}, "test.harmony.not_null_tokens_decimals.48a7b1db68": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "decimals", "model": "{{ get_where_subquery(ref('tokens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "core", "not_null_tokens_decimals"], "unique_id": "test.harmony.not_null_tokens_decimals.48a7b1db68", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokens_decimals.sql", "original_file_path": "models/core/tokens.yml", "name": "not_null_tokens_decimals", "alias": "not_null_tokens_decimals", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokens"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/core/tokens.yml/not_null_tokens_decimals.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.448291, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokens\nwhere decimals is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "decimals", "file_key_name": "models.tokens"}, "test.harmony.not_null_tranquil_daily_supply_borrow_token_symbol.21fbf58bb9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_symbol", "model": "{{ get_where_subquery(ref('tranquil_daily_supply_borrow')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_daily_supply_borrow"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_daily_supply_borrow_token_symbol"], "unique_id": "test.harmony.not_null_tranquil_daily_supply_borrow_token_symbol.21fbf58bb9", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_daily_supply_borrow_token_symbol.sql", "original_file_path": "models/tranquil/tranquil_daily_supply_borrow.yml", "name": "not_null_tranquil_daily_supply_borrow_token_symbol", "alias": "not_null_tranquil_daily_supply_borrow_token_symbol", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_daily_supply_borrow"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_daily_supply_borrow.yml/not_null_tranquil_daily_supply_borrow_token_symbol.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.451107, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_daily_supply_borrow\nwhere token_symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_symbol", "file_key_name": "models.tranquil_daily_supply_borrow"}, "test.harmony.not_null_tranquil_daily_supply_borrow_block_date.1aeee85431": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_date", "model": "{{ get_where_subquery(ref('tranquil_daily_supply_borrow')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_daily_supply_borrow"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_daily_supply_borrow_block_date"], "unique_id": "test.harmony.not_null_tranquil_daily_supply_borrow_block_date.1aeee85431", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_daily_supply_borrow_block_date.sql", "original_file_path": "models/tranquil/tranquil_daily_supply_borrow.yml", "name": "not_null_tranquil_daily_supply_borrow_block_date", "alias": "not_null_tranquil_daily_supply_borrow_block_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_daily_supply_borrow"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_daily_supply_borrow.yml/not_null_tranquil_daily_supply_borrow_block_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.45201, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_daily_supply_borrow\nwhere block_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_date", "file_key_name": "models.tranquil_daily_supply_borrow"}, "test.harmony.not_null_tranquil_daily_supply_borrow_price.d6abc5f43b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('tranquil_daily_supply_borrow')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_daily_supply_borrow"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_daily_supply_borrow_price"], "unique_id": "test.harmony.not_null_tranquil_daily_supply_borrow_price.d6abc5f43b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_daily_supply_borrow_price.sql", "original_file_path": "models/tranquil/tranquil_daily_supply_borrow.yml", "name": "not_null_tranquil_daily_supply_borrow_price", "alias": "not_null_tranquil_daily_supply_borrow_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_daily_supply_borrow"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_daily_supply_borrow.yml/not_null_tranquil_daily_supply_borrow_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.452945, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_daily_supply_borrow\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "price", "file_key_name": "models.tranquil_daily_supply_borrow"}, "test.harmony.not_null_tranquil_markets_tokenprice_token_symbol.5911fa7339": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_symbol", "model": "{{ get_where_subquery(ref('tranquil_markets_tokenprice')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_markets_tokenprice"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_markets_tokenprice_token_symbol"], "unique_id": "test.harmony.not_null_tranquil_markets_tokenprice_token_symbol.5911fa7339", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_markets_tokenprice_token_symbol.sql", "original_file_path": "models/tranquil/tranquil_markets_tokenprice.yml", "name": "not_null_tranquil_markets_tokenprice_token_symbol", "alias": "not_null_tranquil_markets_tokenprice_token_symbol", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_markets_tokenprice"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_markets_tokenprice.yml/not_null_tranquil_markets_tokenprice_token_symbol.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.454588, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_markets_tokenprice\nwhere token_symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_symbol", "file_key_name": "models.tranquil_markets_tokenprice"}, "test.harmony.not_null_tranquil_markets_tokenprice_timestamp.d13951c4a3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tranquil_markets_tokenprice')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_markets_tokenprice"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_markets_tokenprice_timestamp"], "unique_id": "test.harmony.not_null_tranquil_markets_tokenprice_timestamp.d13951c4a3", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_markets_tokenprice_timestamp.sql", "original_file_path": "models/tranquil/tranquil_markets_tokenprice.yml", "name": "not_null_tranquil_markets_tokenprice_timestamp", "alias": "not_null_tranquil_markets_tokenprice_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_markets_tokenprice"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_markets_tokenprice.yml/not_null_tranquil_markets_tokenprice_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.455491, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_markets_tokenprice\nwhere timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tranquil_markets_tokenprice"}, "test.harmony.not_null_tranquil_markets_tokenprice_price.f685b7fcd7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('tranquil_markets_tokenprice')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_markets_tokenprice"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_markets_tokenprice_price"], "unique_id": "test.harmony.not_null_tranquil_markets_tokenprice_price.f685b7fcd7", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_markets_tokenprice_price.sql", "original_file_path": "models/tranquil/tranquil_markets_tokenprice.yml", "name": "not_null_tranquil_markets_tokenprice_price", "alias": "not_null_tranquil_markets_tokenprice_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_markets_tokenprice"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_markets_tokenprice.yml/not_null_tranquil_markets_tokenprice_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4562528, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_markets_tokenprice\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "price", "file_key_name": "models.tranquil_markets_tokenprice"}, "test.harmony.unique_tranquil_txs_log_id.ee665dfe23": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('tranquil_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "unique_tranquil_txs_log_id"], "unique_id": "test.harmony.unique_tranquil_txs_log_id.ee665dfe23", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_tranquil_txs_log_id.sql", "original_file_path": "models/tranquil/tranquil_txs.yml", "name": "unique_tranquil_txs_log_id", "alias": "unique_tranquil_txs_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_txs.yml/unique_tranquil_txs_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.459171, "compiled_sql": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.tranquil_txs\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.tranquil_txs"}, "test.harmony.not_null_tranquil_txs_log_id.a063f813b3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('tranquil_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_txs_log_id"], "unique_id": "test.harmony.not_null_tranquil_txs_log_id.a063f813b3", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_txs_log_id.sql", "original_file_path": "models/tranquil/tranquil_txs.yml", "name": "not_null_tranquil_txs_log_id", "alias": "not_null_tranquil_txs_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_txs.yml/not_null_tranquil_txs_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.459976, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_txs\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.tranquil_txs"}, "test.harmony.not_null_tranquil_txs_tx_hash.b79bf2185f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('tranquil_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_txs_tx_hash"], "unique_id": "test.harmony.not_null_tranquil_txs_tx_hash.b79bf2185f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_txs_tx_hash.sql", "original_file_path": "models/tranquil/tranquil_txs.yml", "name": "not_null_tranquil_txs_tx_hash", "alias": "not_null_tranquil_txs_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_txs.yml/not_null_tranquil_txs_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.460732, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_txs\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.tranquil_txs"}, "test.harmony.not_null_tranquil_txs_block_timestamp.2e90ec8f55": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('tranquil_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_txs_block_timestamp"], "unique_id": "test.harmony.not_null_tranquil_txs_block_timestamp.2e90ec8f55", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_txs_block_timestamp.sql", "original_file_path": "models/tranquil/tranquil_txs.yml", "name": "not_null_tranquil_txs_block_timestamp", "alias": "not_null_tranquil_txs_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_txs.yml/not_null_tranquil_txs_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.46173, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_txs\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.tranquil_txs"}, "test.harmony.not_null_tranquil_txs_block_id.0b4429bacd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('tranquil_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_txs_block_id"], "unique_id": "test.harmony.not_null_tranquil_txs_block_id.0b4429bacd", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_txs_block_id.sql", "original_file_path": "models/tranquil/tranquil_txs.yml", "name": "not_null_tranquil_txs_block_id", "alias": "not_null_tranquil_txs_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_txs.yml/not_null_tranquil_txs_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.462467, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_txs\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.tranquil_txs"}, "test.harmony.not_null_tranquil_txs_user_address.c5c46adeae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_address", "model": "{{ get_where_subquery(ref('tranquil_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_txs_user_address"], "unique_id": "test.harmony.not_null_tranquil_txs_user_address.c5c46adeae", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_txs_user_address.sql", "original_file_path": "models/tranquil/tranquil_txs.yml", "name": "not_null_tranquil_txs_user_address", "alias": "not_null_tranquil_txs_user_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_txs.yml/not_null_tranquil_txs_user_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.463198, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_txs\nwhere user_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_address", "file_key_name": "models.tranquil_txs"}, "test.harmony.not_null_tranquil_txs_evm_contract_address.0592e58a69": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "evm_contract_address", "model": "{{ get_where_subquery(ref('tranquil_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_txs_evm_contract_address"], "unique_id": "test.harmony.not_null_tranquil_txs_evm_contract_address.0592e58a69", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_txs_evm_contract_address.sql", "original_file_path": "models/tranquil/tranquil_txs.yml", "name": "not_null_tranquil_txs_evm_contract_address", "alias": "not_null_tranquil_txs_evm_contract_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_txs.yml/not_null_tranquil_txs_evm_contract_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4640589, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_txs\nwhere evm_contract_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "evm_contract_address", "file_key_name": "models.tranquil_txs"}, "test.harmony.not_null_tranquil_txs_token_symbol.c654f00a7f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_symbol", "model": "{{ get_where_subquery(ref('tranquil_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_txs_token_symbol"], "unique_id": "test.harmony.not_null_tranquil_txs_token_symbol.c654f00a7f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_txs_token_symbol.sql", "original_file_path": "models/tranquil/tranquil_txs.yml", "name": "not_null_tranquil_txs_token_symbol", "alias": "not_null_tranquil_txs_token_symbol", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_txs.yml/not_null_tranquil_txs_token_symbol.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.464802, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_txs\nwhere token_symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_symbol", "file_key_name": "models.tranquil_txs"}, "test.harmony.not_null_tranquil_txs_token_amount_raw.b4a6586754": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_amount_raw", "model": "{{ get_where_subquery(ref('tranquil_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_txs_token_amount_raw"], "unique_id": "test.harmony.not_null_tranquil_txs_token_amount_raw.b4a6586754", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_txs_token_amount_raw.sql", "original_file_path": "models/tranquil/tranquil_txs.yml", "name": "not_null_tranquil_txs_token_amount_raw", "alias": "not_null_tranquil_txs_token_amount_raw", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_txs.yml/not_null_tranquil_txs_token_amount_raw.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4655402, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_txs\nwhere token_amount_raw is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_amount_raw", "file_key_name": "models.tranquil_txs"}, "test.harmony.not_null_tranquil_txs_token_amount.0db3f42715": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_amount", "model": "{{ get_where_subquery(ref('tranquil_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_txs_token_amount"], "unique_id": "test.harmony.not_null_tranquil_txs_token_amount.0db3f42715", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_txs_token_amount.sql", "original_file_path": "models/tranquil/tranquil_txs.yml", "name": "not_null_tranquil_txs_token_amount", "alias": "not_null_tranquil_txs_token_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_txs.yml/not_null_tranquil_txs_token_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.466272, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_txs\nwhere token_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_amount", "file_key_name": "models.tranquil_txs"}, "test.harmony.not_null_tranquil_txs_tx_type.04f0e47be1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_type", "model": "{{ get_where_subquery(ref('tranquil_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tranquil_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tranquil", "not_null_tranquil_txs_tx_type"], "unique_id": "test.harmony.not_null_tranquil_txs_tx_type.04f0e47be1", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tranquil_txs_tx_type.sql", "original_file_path": "models/tranquil/tranquil_txs.yml", "name": "not_null_tranquil_txs_tx_type", "alias": "not_null_tranquil_txs_tx_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tranquil_txs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tranquil/tranquil_txs.yml/not_null_tranquil_txs_tx_type.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.467107, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tranquil_txs\nwhere tx_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_type", "file_key_name": "models.tranquil_txs"}, "test.harmony.not_null_tokenprice_eth_timestamp.a9fcba1ba3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_eth')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_eth"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_eth_timestamp"], "unique_id": "test.harmony.not_null_tokenprice_eth_timestamp.a9fcba1ba3", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_eth_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_eth.yml", "name": "not_null_tokenprice_eth_timestamp", "alias": "not_null_tokenprice_eth_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_eth"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_eth.yml/not_null_tokenprice_eth_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.468506, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_eth\nwhere timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_eth"}, "test.harmony.unique_tokenprice_eth_timestamp.e64a320f18": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_eth')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_eth"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "unique_tokenprice_eth_timestamp"], "unique_id": "test.harmony.unique_tokenprice_eth_timestamp.e64a320f18", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_tokenprice_eth_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_eth.yml", "name": "unique_tokenprice_eth_timestamp", "alias": "unique_tokenprice_eth_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_eth"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_eth.yml/unique_tokenprice_eth_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.469415, "compiled_sql": "\n    \n    \n\nselect\n    timestamp as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.tokenprice_eth\nwhere timestamp is not null\ngroup by timestamp\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_eth"}, "test.harmony.not_null_tokenprice_eth_price.cea7d07005": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('tokenprice_eth')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_eth"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_eth_price"], "unique_id": "test.harmony.not_null_tokenprice_eth_price.cea7d07005", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_eth_price.sql", "original_file_path": "models/tokenprice/tokenprice_eth.yml", "name": "not_null_tokenprice_eth_price", "alias": "not_null_tokenprice_eth_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_eth"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_eth.yml/not_null_tokenprice_eth_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.470173, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_eth\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "price", "file_key_name": "models.tokenprice_eth"}, "test.harmony.not_null_tokenprice_stone_timestamp.1e827176bb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_stone')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_stone"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_stone_timestamp"], "unique_id": "test.harmony.not_null_tokenprice_stone_timestamp.1e827176bb", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_stone_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_stone.yml", "name": "not_null_tokenprice_stone_timestamp", "alias": "not_null_tokenprice_stone_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_stone"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_stone.yml/not_null_tokenprice_stone_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.471571, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_stone\nwhere timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_stone"}, "test.harmony.unique_tokenprice_stone_timestamp.213c69340a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_stone')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_stone"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "unique_tokenprice_stone_timestamp"], "unique_id": "test.harmony.unique_tokenprice_stone_timestamp.213c69340a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_tokenprice_stone_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_stone.yml", "name": "unique_tokenprice_stone_timestamp", "alias": "unique_tokenprice_stone_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_stone"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_stone.yml/unique_tokenprice_stone_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4724631, "compiled_sql": "\n    \n    \n\nselect\n    timestamp as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.tokenprice_stone\nwhere timestamp is not null\ngroup by timestamp\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_stone"}, "test.harmony.not_null_tokenprice_stone_price.9d01834762": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('tokenprice_stone')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_stone"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_stone_price"], "unique_id": "test.harmony.not_null_tokenprice_stone_price.9d01834762", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_stone_price.sql", "original_file_path": "models/tokenprice/tokenprice_stone.yml", "name": "not_null_tokenprice_stone_price", "alias": "not_null_tokenprice_stone_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_stone"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_stone.yml/not_null_tokenprice_stone_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4732108, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_stone\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "price", "file_key_name": "models.tokenprice_stone"}, "test.harmony.not_null_tokenprice_usd_timestamp.b838b4a738": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_usd')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_usd"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_usd_timestamp"], "unique_id": "test.harmony.not_null_tokenprice_usd_timestamp.b838b4a738", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_usd_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_usd.yml", "name": "not_null_tokenprice_usd_timestamp", "alias": "not_null_tokenprice_usd_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_usd"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_usd.yml/not_null_tokenprice_usd_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.474613, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_usd\nwhere timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_usd"}, "test.harmony.unique_tokenprice_usd_timestamp.fc397d4b13": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_usd')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_usd"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "unique_tokenprice_usd_timestamp"], "unique_id": "test.harmony.unique_tokenprice_usd_timestamp.fc397d4b13", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_tokenprice_usd_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_usd.yml", "name": "unique_tokenprice_usd_timestamp", "alias": "unique_tokenprice_usd_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_usd"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_usd.yml/unique_tokenprice_usd_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.475501, "compiled_sql": "\n    \n    \n\nselect\n    timestamp as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.tokenprice_usd\nwhere timestamp is not null\ngroup by timestamp\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_usd"}, "test.harmony.not_null_tokenprice_usd_price.240f53ff0b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('tokenprice_usd')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_usd"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_usd_price"], "unique_id": "test.harmony.not_null_tokenprice_usd_price.240f53ff0b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_usd_price.sql", "original_file_path": "models/tokenprice/tokenprice_usd.yml", "name": "not_null_tokenprice_usd_price", "alias": "not_null_tokenprice_usd_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_usd"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_usd.yml/not_null_tokenprice_usd_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.476244, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_usd\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "price", "file_key_name": "models.tokenprice_usd"}, "test.harmony.not_null_tokenprice_dfkgold_timestamp.f82703b2bc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_dfkgold')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_dfkgold"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_dfkgold_timestamp"], "unique_id": "test.harmony.not_null_tokenprice_dfkgold_timestamp.f82703b2bc", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_dfkgold_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_dfkgold.yml", "name": "not_null_tokenprice_dfkgold_timestamp", "alias": "not_null_tokenprice_dfkgold_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_dfkgold"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_dfkgold.yml/not_null_tokenprice_dfkgold_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.477744, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_dfkgold\nwhere timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_dfkgold"}, "test.harmony.unique_tokenprice_dfkgold_timestamp.71e30aa140": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_dfkgold')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_dfkgold"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "unique_tokenprice_dfkgold_timestamp"], "unique_id": "test.harmony.unique_tokenprice_dfkgold_timestamp.71e30aa140", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_tokenprice_dfkgold_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_dfkgold.yml", "name": "unique_tokenprice_dfkgold_timestamp", "alias": "unique_tokenprice_dfkgold_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_dfkgold"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_dfkgold.yml/unique_tokenprice_dfkgold_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.478515, "compiled_sql": "\n    \n    \n\nselect\n    timestamp as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.tokenprice_dfkgold\nwhere timestamp is not null\ngroup by timestamp\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_dfkgold"}, "test.harmony.not_null_tokenprice_dfkgold_price.7aff81d199": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('tokenprice_dfkgold')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_dfkgold"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_dfkgold_price"], "unique_id": "test.harmony.not_null_tokenprice_dfkgold_price.7aff81d199", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_dfkgold_price.sql", "original_file_path": "models/tokenprice/tokenprice_dfkgold.yml", "name": "not_null_tokenprice_dfkgold_price", "alias": "not_null_tokenprice_dfkgold_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_dfkgold"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_dfkgold.yml/not_null_tokenprice_dfkgold_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4792619, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_dfkgold\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "price", "file_key_name": "models.tokenprice_dfkgold"}, "test.harmony.not_null_tokenprice_gaiatear_timestamp.b1f11762d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_gaiatear')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_gaiatear"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_gaiatear_timestamp"], "unique_id": "test.harmony.not_null_tokenprice_gaiatear_timestamp.b1f11762d7", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_gaiatear_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_gaiatear.yml", "name": "not_null_tokenprice_gaiatear_timestamp", "alias": "not_null_tokenprice_gaiatear_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_gaiatear"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_gaiatear.yml/not_null_tokenprice_gaiatear_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.480757, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_gaiatear\nwhere timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_gaiatear"}, "test.harmony.unique_tokenprice_gaiatear_timestamp.4bc0e6ede1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_gaiatear')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_gaiatear"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "unique_tokenprice_gaiatear_timestamp"], "unique_id": "test.harmony.unique_tokenprice_gaiatear_timestamp.4bc0e6ede1", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_tokenprice_gaiatear_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_gaiatear.yml", "name": "unique_tokenprice_gaiatear_timestamp", "alias": "unique_tokenprice_gaiatear_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_gaiatear"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_gaiatear.yml/unique_tokenprice_gaiatear_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.481525, "compiled_sql": "\n    \n    \n\nselect\n    timestamp as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.tokenprice_gaiatear\nwhere timestamp is not null\ngroup by timestamp\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_gaiatear"}, "test.harmony.not_null_tokenprice_gaiatear_price.e9055f2a26": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('tokenprice_gaiatear')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_gaiatear"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_gaiatear_price"], "unique_id": "test.harmony.not_null_tokenprice_gaiatear_price.e9055f2a26", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_gaiatear_price.sql", "original_file_path": "models/tokenprice/tokenprice_gaiatear.yml", "name": "not_null_tokenprice_gaiatear_price", "alias": "not_null_tokenprice_gaiatear_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_gaiatear"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_gaiatear.yml/not_null_tokenprice_gaiatear_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.482259, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_gaiatear\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "price", "file_key_name": "models.tokenprice_gaiatear"}, "test.harmony.not_null_tokenprice_shvasrune_timestamp.12a9557a54": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_shvasrune')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_shvasrune"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_shvasrune_timestamp"], "unique_id": "test.harmony.not_null_tokenprice_shvasrune_timestamp.12a9557a54", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_shvasrune_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_shvasrune.yml", "name": "not_null_tokenprice_shvasrune_timestamp", "alias": "not_null_tokenprice_shvasrune_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_shvasrune"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_shvasrune.yml/not_null_tokenprice_shvasrune_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.483755, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_shvasrune\nwhere timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_shvasrune"}, "test.harmony.unique_tokenprice_shvasrune_timestamp.1bba330039": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_shvasrune')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_shvasrune"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "unique_tokenprice_shvasrune_timestamp"], "unique_id": "test.harmony.unique_tokenprice_shvasrune_timestamp.1bba330039", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_tokenprice_shvasrune_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_shvasrune.yml", "name": "unique_tokenprice_shvasrune_timestamp", "alias": "unique_tokenprice_shvasrune_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_shvasrune"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_shvasrune.yml/unique_tokenprice_shvasrune_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4845219, "compiled_sql": "\n    \n    \n\nselect\n    timestamp as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.tokenprice_shvasrune\nwhere timestamp is not null\ngroup by timestamp\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_shvasrune"}, "test.harmony.not_null_tokenprice_shvasrune_price.c2c6b5a871": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('tokenprice_shvasrune')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_shvasrune"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_shvasrune_price"], "unique_id": "test.harmony.not_null_tokenprice_shvasrune_price.c2c6b5a871", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_shvasrune_price.sql", "original_file_path": "models/tokenprice/tokenprice_shvasrune.yml", "name": "not_null_tokenprice_shvasrune_price", "alias": "not_null_tokenprice_shvasrune_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_shvasrune"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_shvasrune.yml/not_null_tokenprice_shvasrune_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.485276, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_shvasrune\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "price", "file_key_name": "models.tokenprice_shvasrune"}, "test.harmony.not_null_tokenprice_btc_timestamp.960a420451": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_btc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_btc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_btc_timestamp"], "unique_id": "test.harmony.not_null_tokenprice_btc_timestamp.960a420451", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_btc_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_btc.yml", "name": "not_null_tokenprice_btc_timestamp", "alias": "not_null_tokenprice_btc_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_btc"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_btc.yml/not_null_tokenprice_btc_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.486762, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_btc\nwhere timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_btc"}, "test.harmony.unique_tokenprice_btc_timestamp.7cfb2382cb": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_btc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_btc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "unique_tokenprice_btc_timestamp"], "unique_id": "test.harmony.unique_tokenprice_btc_timestamp.7cfb2382cb", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_tokenprice_btc_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_btc.yml", "name": "unique_tokenprice_btc_timestamp", "alias": "unique_tokenprice_btc_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_btc"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_btc.yml/unique_tokenprice_btc_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.48753, "compiled_sql": "\n    \n    \n\nselect\n    timestamp as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.tokenprice_btc\nwhere timestamp is not null\ngroup by timestamp\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_btc"}, "test.harmony.not_null_tokenprice_btc_price.4b83451ce2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('tokenprice_btc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_btc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_btc_price"], "unique_id": "test.harmony.not_null_tokenprice_btc_price.4b83451ce2", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_btc_price.sql", "original_file_path": "models/tokenprice/tokenprice_btc.yml", "name": "not_null_tokenprice_btc_price", "alias": "not_null_tokenprice_btc_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_btc"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_btc.yml/not_null_tokenprice_btc_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.488276, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_btc\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "price", "file_key_name": "models.tokenprice_btc"}, "test.harmony.not_null_tokenprice_one_timestamp.696359f1d2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_one')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_one"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_one_timestamp"], "unique_id": "test.harmony.not_null_tokenprice_one_timestamp.696359f1d2", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_one_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_one.yml", "name": "not_null_tokenprice_one_timestamp", "alias": "not_null_tokenprice_one_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_one"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_one.yml/not_null_tokenprice_one_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.489748, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_one\nwhere timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_one"}, "test.harmony.unique_tokenprice_one_timestamp.35687e8a10": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_one')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_one"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "unique_tokenprice_one_timestamp"], "unique_id": "test.harmony.unique_tokenprice_one_timestamp.35687e8a10", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_tokenprice_one_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_one.yml", "name": "unique_tokenprice_one_timestamp", "alias": "unique_tokenprice_one_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_one"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_one.yml/unique_tokenprice_one_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.490509, "compiled_sql": "\n    \n    \n\nselect\n    timestamp as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.tokenprice_one\nwhere timestamp is not null\ngroup by timestamp\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_one"}, "test.harmony.not_null_tokenprice_one_price.9fedd60475": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('tokenprice_one')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_one"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_one_price"], "unique_id": "test.harmony.not_null_tokenprice_one_price.9fedd60475", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_one_price.sql", "original_file_path": "models/tokenprice/tokenprice_one.yml", "name": "not_null_tokenprice_one_price", "alias": "not_null_tokenprice_one_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_one"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_one.yml/not_null_tokenprice_one_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.491394, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_one\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "price", "file_key_name": "models.tokenprice_one"}, "test.harmony.not_null_tokenprice_jewel_timestamp.c95057f07f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_jewel')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_jewel"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_jewel_timestamp"], "unique_id": "test.harmony.not_null_tokenprice_jewel_timestamp.c95057f07f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_jewel_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_jewel.yml", "name": "not_null_tokenprice_jewel_timestamp", "alias": "not_null_tokenprice_jewel_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_jewel"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_jewel.yml/not_null_tokenprice_jewel_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.492743, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_jewel\nwhere timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_jewel"}, "test.harmony.unique_tokenprice_jewel_timestamp.464d07552e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "timestamp", "model": "{{ get_where_subquery(ref('tokenprice_jewel')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_jewel"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "unique_tokenprice_jewel_timestamp"], "unique_id": "test.harmony.unique_tokenprice_jewel_timestamp.464d07552e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_tokenprice_jewel_timestamp.sql", "original_file_path": "models/tokenprice/tokenprice_jewel.yml", "name": "unique_tokenprice_jewel_timestamp", "alias": "unique_tokenprice_jewel_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_jewel"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_jewel.yml/unique_tokenprice_jewel_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4934971, "compiled_sql": "\n    \n    \n\nselect\n    timestamp as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.tokenprice_jewel\nwhere timestamp is not null\ngroup by timestamp\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "timestamp", "file_key_name": "models.tokenprice_jewel"}, "test.harmony.not_null_tokenprice_jewel_price.55d8fb7952": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('tokenprice_jewel')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprice_jewel"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprice_jewel_price"], "unique_id": "test.harmony.not_null_tokenprice_jewel_price.55d8fb7952", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprice_jewel_price.sql", "original_file_path": "models/tokenprice/tokenprice_jewel.yml", "name": "not_null_tokenprice_jewel_price", "alias": "not_null_tokenprice_jewel_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprice_jewel"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprice_jewel.yml/not_null_tokenprice_jewel_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.494485, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprice_jewel\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "price", "file_key_name": "models.tokenprice_jewel"}, "test.harmony.not_null_tokenprices_key.248bd37af9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "key", "model": "{{ get_where_subquery(ref('tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprices_key"], "unique_id": "test.harmony.not_null_tokenprices_key.248bd37af9", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprices_key.sql", "original_file_path": "models/tokenprice/tokenprices.yml", "name": "not_null_tokenprices_key", "alias": "not_null_tokenprices_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprices.yml/not_null_tokenprices_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4965792, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprices\nwhere key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "key", "file_key_name": "models.tokenprices"}, "test.harmony.unique_tokenprices_key.dce80052a0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "key", "model": "{{ get_where_subquery(ref('tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "unique_tokenprices_key"], "unique_id": "test.harmony.unique_tokenprices_key.dce80052a0", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_tokenprices_key.sql", "original_file_path": "models/tokenprice/tokenprices.yml", "name": "unique_tokenprices_key", "alias": "unique_tokenprices_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprices.yml/unique_tokenprices_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4974542, "compiled_sql": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.tokenprices\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "key", "file_key_name": "models.tokenprices"}, "test.harmony.not_null_tokenprices_block_date.9e7830a534": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_date", "model": "{{ get_where_subquery(ref('tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprices_block_date"], "unique_id": "test.harmony.not_null_tokenprices_block_date.9e7830a534", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprices_block_date.sql", "original_file_path": "models/tokenprice/tokenprices.yml", "name": "not_null_tokenprices_block_date", "alias": "not_null_tokenprices_block_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprices.yml/not_null_tokenprices_block_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.498188, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprices\nwhere block_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_date", "file_key_name": "models.tokenprices"}, "test.harmony.not_null_tokenprices_token_address.553c7ecbc9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_address", "model": "{{ get_where_subquery(ref('tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprices_token_address"], "unique_id": "test.harmony.not_null_tokenprices_token_address.553c7ecbc9", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprices_token_address.sql", "original_file_path": "models/tokenprice/tokenprices.yml", "name": "not_null_tokenprices_token_address", "alias": "not_null_tokenprices_token_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprices.yml/not_null_tokenprices_token_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.4989219, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprices\nwhere token_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_address", "file_key_name": "models.tokenprices"}, "test.harmony.not_null_tokenprices_token_symbol.ad788d700d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_symbol", "model": "{{ get_where_subquery(ref('tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprices_token_symbol"], "unique_id": "test.harmony.not_null_tokenprices_token_symbol.ad788d700d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprices_token_symbol.sql", "original_file_path": "models/tokenprice/tokenprices.yml", "name": "not_null_tokenprices_token_symbol", "alias": "not_null_tokenprices_token_symbol", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprices.yml/not_null_tokenprices_token_symbol.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.499784, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprices\nwhere token_symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_symbol", "file_key_name": "models.tokenprices"}, "test.harmony.not_null_tokenprices_usd_price.ad956c060f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "usd_price", "model": "{{ get_where_subquery(ref('tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprices_usd_price"], "unique_id": "test.harmony.not_null_tokenprices_usd_price.ad956c060f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprices_usd_price.sql", "original_file_path": "models/tokenprice/tokenprices.yml", "name": "not_null_tokenprices_usd_price", "alias": "not_null_tokenprices_usd_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprices.yml/not_null_tokenprices_usd_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.500524, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprices\nwhere usd_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "usd_price", "file_key_name": "models.tokenprices"}, "test.harmony.not_null_tokenprices_usd_volume.06e472dad5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "usd_volume", "model": "{{ get_where_subquery(ref('tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprices_usd_volume"], "unique_id": "test.harmony.not_null_tokenprices_usd_volume.06e472dad5", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprices_usd_volume.sql", "original_file_path": "models/tokenprice/tokenprices.yml", "name": "not_null_tokenprices_usd_volume", "alias": "not_null_tokenprices_usd_volume", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprices.yml/not_null_tokenprices_usd_volume.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.501249, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprices\nwhere usd_volume is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "usd_volume", "file_key_name": "models.tokenprices"}, "test.harmony.not_null_tokenprices_token_volume.f81cd2a394": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_volume", "model": "{{ get_where_subquery(ref('tokenprices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.tokenprices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "tokenprice", "not_null_tokenprices_token_volume"], "unique_id": "test.harmony.not_null_tokenprices_token_volume.f81cd2a394", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_tokenprices_token_volume.sql", "original_file_path": "models/tokenprice/tokenprices.yml", "name": "not_null_tokenprices_token_volume", "alias": "not_null_tokenprices_token_volume", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tokenprices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/tokenprice/tokenprices.yml/not_null_tokenprices_token_volume.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5019789, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.tokenprices\nwhere token_volume is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_volume", "file_key_name": "models.tokenprices"}, "test.harmony.unique_dfk_bank_transactions_tx_hash.6a574eb80e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_bank_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_bank_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "unique_dfk_bank_transactions_tx_hash"], "unique_id": "test.harmony.unique_dfk_bank_transactions_tx_hash.6a574eb80e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_dfk_bank_transactions_tx_hash.sql", "original_file_path": "models/dfk/dfk_bank_transactions.yml", "name": "unique_dfk_bank_transactions_tx_hash", "alias": "unique_dfk_bank_transactions_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_bank_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_bank_transactions.yml/unique_dfk_bank_transactions_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5043242, "compiled_sql": "\n    \n    \n\nselect\n    tx_hash as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.dfk_bank_transactions\nwhere tx_hash is not null\ngroup by tx_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_bank_transactions"}, "test.harmony.not_null_dfk_bank_transactions_tx_hash.5b7b36a100": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_bank_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_bank_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_bank_transactions_tx_hash"], "unique_id": "test.harmony.not_null_dfk_bank_transactions_tx_hash.5b7b36a100", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_bank_transactions_tx_hash.sql", "original_file_path": "models/dfk/dfk_bank_transactions.yml", "name": "not_null_dfk_bank_transactions_tx_hash", "alias": "not_null_dfk_bank_transactions_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_bank_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_bank_transactions.yml/not_null_dfk_bank_transactions_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.505205, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_bank_transactions\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_bank_transactions"}, "test.harmony.not_null_dfk_bank_transactions_block_timestamp.8a580bfb29": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('dfk_bank_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_bank_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_bank_transactions_block_timestamp"], "unique_id": "test.harmony.not_null_dfk_bank_transactions_block_timestamp.8a580bfb29", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_bank_transactions_block_timestamp.sql", "original_file_path": "models/dfk/dfk_bank_transactions.yml", "name": "not_null_dfk_bank_transactions_block_timestamp", "alias": "not_null_dfk_bank_transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_bank_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_bank_transactions.yml/not_null_dfk_bank_transactions_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.505952, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_bank_transactions\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.dfk_bank_transactions"}, "test.harmony.not_null_dfk_bank_transactions_ingested_at.1525787d28": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('dfk_bank_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_bank_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_bank_transactions_ingested_at"], "unique_id": "test.harmony.not_null_dfk_bank_transactions_ingested_at.1525787d28", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_bank_transactions_ingested_at.sql", "original_file_path": "models/dfk/dfk_bank_transactions.yml", "name": "not_null_dfk_bank_transactions_ingested_at", "alias": "not_null_dfk_bank_transactions_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_bank_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_bank_transactions.yml/not_null_dfk_bank_transactions_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5066938, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_bank_transactions\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.dfk_bank_transactions"}, "test.harmony.not_null_dfk_bank_transactions_native_from_address.eb283bdf82": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "native_from_address", "model": "{{ get_where_subquery(ref('dfk_bank_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_bank_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_bank_transactions_native_from_address"], "unique_id": "test.harmony.not_null_dfk_bank_transactions_native_from_address.eb283bdf82", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_bank_transactions_native_from_address.sql", "original_file_path": "models/dfk/dfk_bank_transactions.yml", "name": "not_null_dfk_bank_transactions_native_from_address", "alias": "not_null_dfk_bank_transactions_native_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_bank_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_bank_transactions.yml/not_null_dfk_bank_transactions_native_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.507426, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_bank_transactions\nwhere native_from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "native_from_address", "file_key_name": "models.dfk_bank_transactions"}, "test.harmony.not_null_dfk_bank_transactions_from_address.30a9faaa1f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_address", "model": "{{ get_where_subquery(ref('dfk_bank_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_bank_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_bank_transactions_from_address"], "unique_id": "test.harmony.not_null_dfk_bank_transactions_from_address.30a9faaa1f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_bank_transactions_from_address.sql", "original_file_path": "models/dfk/dfk_bank_transactions.yml", "name": "not_null_dfk_bank_transactions_from_address", "alias": "not_null_dfk_bank_transactions_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_bank_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_bank_transactions.yml/not_null_dfk_bank_transactions_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.508279, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_bank_transactions\nwhere from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_address", "file_key_name": "models.dfk_bank_transactions"}, "test.harmony.not_null_dfk_bank_transactions_type.0122242487": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type", "model": "{{ get_where_subquery(ref('dfk_bank_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_bank_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_bank_transactions_type"], "unique_id": "test.harmony.not_null_dfk_bank_transactions_type.0122242487", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_bank_transactions_type.sql", "original_file_path": "models/dfk/dfk_bank_transactions.yml", "name": "not_null_dfk_bank_transactions_type", "alias": "not_null_dfk_bank_transactions_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_bank_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_bank_transactions.yml/not_null_dfk_bank_transactions_type.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5090282, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_bank_transactions\nwhere type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "type", "file_key_name": "models.dfk_bank_transactions"}, "test.harmony.not_null_dfk_bank_transactions_jewel_amount.c5c19d0070": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "jewel_amount", "model": "{{ get_where_subquery(ref('dfk_bank_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_bank_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_bank_transactions_jewel_amount"], "unique_id": "test.harmony.not_null_dfk_bank_transactions_jewel_amount.c5c19d0070", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_bank_transactions_jewel_amount.sql", "original_file_path": "models/dfk/dfk_bank_transactions.yml", "name": "not_null_dfk_bank_transactions_jewel_amount", "alias": "not_null_dfk_bank_transactions_jewel_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_bank_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_bank_transactions.yml/not_null_dfk_bank_transactions_jewel_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.509801, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_bank_transactions\nwhere jewel_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "jewel_amount", "file_key_name": "models.dfk_bank_transactions"}, "test.harmony.not_null_dfk_bank_transactions_xjewel_amount.e2b867313b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "xjewel_amount", "model": "{{ get_where_subquery(ref('dfk_bank_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_bank_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_bank_transactions_xjewel_amount"], "unique_id": "test.harmony.not_null_dfk_bank_transactions_xjewel_amount.e2b867313b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_bank_transactions_xjewel_amount.sql", "original_file_path": "models/dfk/dfk_bank_transactions.yml", "name": "not_null_dfk_bank_transactions_xjewel_amount", "alias": "not_null_dfk_bank_transactions_xjewel_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_bank_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_bank_transactions.yml/not_null_dfk_bank_transactions_xjewel_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.510696, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_bank_transactions\nwhere xjewel_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "xjewel_amount", "file_key_name": "models.dfk_bank_transactions"}, "test.harmony.not_null_dfk_quest_rewards_log_id.d8a2c2e745": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('dfk_quest_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_quest_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_quest_rewards_log_id"], "unique_id": "test.harmony.not_null_dfk_quest_rewards_log_id.d8a2c2e745", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_quest_rewards_log_id.sql", "original_file_path": "models/dfk/dfk_quest_rewards.yml", "name": "not_null_dfk_quest_rewards_log_id", "alias": "not_null_dfk_quest_rewards_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_quest_rewards"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_quest_rewards.yml/not_null_dfk_quest_rewards_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.513315, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_quest_rewards\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.dfk_quest_rewards"}, "test.harmony.unique_dfk_quest_rewards_log_id.181d50274c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('dfk_quest_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_quest_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "unique_dfk_quest_rewards_log_id"], "unique_id": "test.harmony.unique_dfk_quest_rewards_log_id.181d50274c", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_dfk_quest_rewards_log_id.sql", "original_file_path": "models/dfk/dfk_quest_rewards.yml", "name": "unique_dfk_quest_rewards_log_id", "alias": "unique_dfk_quest_rewards_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_quest_rewards"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_quest_rewards.yml/unique_dfk_quest_rewards_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.514092, "compiled_sql": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.dfk_quest_rewards\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.dfk_quest_rewards"}, "test.harmony.not_null_dfk_quest_rewards_block_timestamp.33b0d48b64": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('dfk_quest_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_quest_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_quest_rewards_block_timestamp"], "unique_id": "test.harmony.not_null_dfk_quest_rewards_block_timestamp.33b0d48b64", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_quest_rewards_block_timestamp.sql", "original_file_path": "models/dfk/dfk_quest_rewards.yml", "name": "not_null_dfk_quest_rewards_block_timestamp", "alias": "not_null_dfk_quest_rewards_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_quest_rewards"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_quest_rewards.yml/not_null_dfk_quest_rewards_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.514839, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_quest_rewards\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.dfk_quest_rewards"}, "test.harmony.not_null_dfk_quest_rewards_ingested_at.8c2eda3de0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('dfk_quest_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_quest_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_quest_rewards_ingested_at"], "unique_id": "test.harmony.not_null_dfk_quest_rewards_ingested_at.8c2eda3de0", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_quest_rewards_ingested_at.sql", "original_file_path": "models/dfk/dfk_quest_rewards.yml", "name": "not_null_dfk_quest_rewards_ingested_at", "alias": "not_null_dfk_quest_rewards_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_quest_rewards"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_quest_rewards.yml/not_null_dfk_quest_rewards_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.515583, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_quest_rewards\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.dfk_quest_rewards"}, "test.harmony.not_null_dfk_quest_rewards_evm_contract_address.6e887b1a40": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "evm_contract_address", "model": "{{ get_where_subquery(ref('dfk_quest_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_quest_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_quest_rewards_evm_contract_address"], "unique_id": "test.harmony.not_null_dfk_quest_rewards_evm_contract_address.6e887b1a40", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_quest_rewards_evm_contract_address.sql", "original_file_path": "models/dfk/dfk_quest_rewards.yml", "name": "not_null_dfk_quest_rewards_evm_contract_address", "alias": "not_null_dfk_quest_rewards_evm_contract_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_quest_rewards"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_quest_rewards.yml/not_null_dfk_quest_rewards_evm_contract_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5164359, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_quest_rewards\nwhere evm_contract_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "evm_contract_address", "file_key_name": "models.dfk_quest_rewards"}, "test.harmony.not_null_dfk_quest_rewards_token_name.1f68aecefb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_name", "model": "{{ get_where_subquery(ref('dfk_quest_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_quest_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_quest_rewards_token_name"], "unique_id": "test.harmony.not_null_dfk_quest_rewards_token_name.1f68aecefb", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_quest_rewards_token_name.sql", "original_file_path": "models/dfk/dfk_quest_rewards.yml", "name": "not_null_dfk_quest_rewards_token_name", "alias": "not_null_dfk_quest_rewards_token_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_quest_rewards"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_quest_rewards.yml/not_null_dfk_quest_rewards_token_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.517173, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_quest_rewards\nwhere token_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_name", "file_key_name": "models.dfk_quest_rewards"}, "test.harmony.not_null_dfk_quest_rewards_from_address.fa86619b22": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_address", "model": "{{ get_where_subquery(ref('dfk_quest_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_quest_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_quest_rewards_from_address"], "unique_id": "test.harmony.not_null_dfk_quest_rewards_from_address.fa86619b22", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_quest_rewards_from_address.sql", "original_file_path": "models/dfk/dfk_quest_rewards.yml", "name": "not_null_dfk_quest_rewards_from_address", "alias": "not_null_dfk_quest_rewards_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_quest_rewards"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_quest_rewards.yml/not_null_dfk_quest_rewards_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.517906, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_quest_rewards\nwhere from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_address", "file_key_name": "models.dfk_quest_rewards"}, "test.harmony.not_null_dfk_quest_rewards_to_address.7c408caace": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_address", "model": "{{ get_where_subquery(ref('dfk_quest_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_quest_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_quest_rewards_to_address"], "unique_id": "test.harmony.not_null_dfk_quest_rewards_to_address.7c408caace", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_quest_rewards_to_address.sql", "original_file_path": "models/dfk/dfk_quest_rewards.yml", "name": "not_null_dfk_quest_rewards_to_address", "alias": "not_null_dfk_quest_rewards_to_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_quest_rewards"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_quest_rewards.yml/not_null_dfk_quest_rewards_to_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.518764, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_quest_rewards\nwhere to_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "to_address", "file_key_name": "models.dfk_quest_rewards"}, "test.harmony.not_null_dfk_quest_rewards_calculated_value.c187e76f86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "calculated_value", "model": "{{ get_where_subquery(ref('dfk_quest_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_quest_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_quest_rewards_calculated_value"], "unique_id": "test.harmony.not_null_dfk_quest_rewards_calculated_value.c187e76f86", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_quest_rewards_calculated_value.sql", "original_file_path": "models/dfk/dfk_quest_rewards.yml", "name": "not_null_dfk_quest_rewards_calculated_value", "alias": "not_null_dfk_quest_rewards_calculated_value", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_quest_rewards"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_quest_rewards.yml/not_null_dfk_quest_rewards_calculated_value.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5194938, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_quest_rewards\nwhere calculated_value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "calculated_value", "file_key_name": "models.dfk_quest_rewards"}, "test.harmony.not_null_dfk_quest_rewards_tx_hash.20e4a48bb4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_quest_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_quest_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_quest_rewards_tx_hash"], "unique_id": "test.harmony.not_null_dfk_quest_rewards_tx_hash.20e4a48bb4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_quest_rewards_tx_hash.sql", "original_file_path": "models/dfk/dfk_quest_rewards.yml", "name": "not_null_dfk_quest_rewards_tx_hash", "alias": "not_null_dfk_quest_rewards_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_quest_rewards"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_quest_rewards.yml/not_null_dfk_quest_rewards_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.520222, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_quest_rewards\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_quest_rewards"}, "test.harmony.not_null_dfk_quest_rewards_amount_usd.55e7b8fe00": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount_usd", "model": "{{ get_where_subquery(ref('dfk_quest_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_quest_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_quest_rewards_amount_usd"], "unique_id": "test.harmony.not_null_dfk_quest_rewards_amount_usd.55e7b8fe00", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_quest_rewards_amount_usd.sql", "original_file_path": "models/dfk/dfk_quest_rewards.yml", "name": "not_null_dfk_quest_rewards_amount_usd", "alias": "not_null_dfk_quest_rewards_amount_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_quest_rewards"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_quest_rewards.yml/not_null_dfk_quest_rewards_amount_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.52095, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_quest_rewards\nwhere amount_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount_usd", "file_key_name": "models.dfk_quest_rewards"}, "test.harmony.not_null_dfk_hero_summons_tx_hash.e543421a67": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_hero_summons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_summons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_summons_tx_hash"], "unique_id": "test.harmony.not_null_dfk_hero_summons_tx_hash.e543421a67", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_summons_tx_hash.sql", "original_file_path": "models/dfk/dfk_hero_summons.yml", "name": "not_null_dfk_hero_summons_tx_hash", "alias": "not_null_dfk_hero_summons_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_summons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_summons.yml/not_null_dfk_hero_summons_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5230231, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_summons\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_hero_summons"}, "test.harmony.unique_dfk_hero_summons_tx_hash.ebbd8ab5c6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_hero_summons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_summons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "unique_dfk_hero_summons_tx_hash"], "unique_id": "test.harmony.unique_dfk_hero_summons_tx_hash.ebbd8ab5c6", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_dfk_hero_summons_tx_hash.sql", "original_file_path": "models/dfk/dfk_hero_summons.yml", "name": "unique_dfk_hero_summons_tx_hash", "alias": "unique_dfk_hero_summons_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_summons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_summons.yml/unique_dfk_hero_summons_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.523786, "compiled_sql": "\n    \n    \n\nselect\n    tx_hash as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.dfk_hero_summons\nwhere tx_hash is not null\ngroup by tx_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_hero_summons"}, "test.harmony.not_null_dfk_hero_summons_block_timestamp.3882749bc8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('dfk_hero_summons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_summons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_summons_block_timestamp"], "unique_id": "test.harmony.not_null_dfk_hero_summons_block_timestamp.3882749bc8", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_summons_block_timestamp.sql", "original_file_path": "models/dfk/dfk_hero_summons.yml", "name": "not_null_dfk_hero_summons_block_timestamp", "alias": "not_null_dfk_hero_summons_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_summons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_summons.yml/not_null_dfk_hero_summons_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.524648, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_summons\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.dfk_hero_summons"}, "test.harmony.not_null_dfk_hero_summons_ingested_at.aaf9c8b651": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('dfk_hero_summons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_summons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_summons_ingested_at"], "unique_id": "test.harmony.not_null_dfk_hero_summons_ingested_at.aaf9c8b651", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_summons_ingested_at.sql", "original_file_path": "models/dfk/dfk_hero_summons.yml", "name": "not_null_dfk_hero_summons_ingested_at", "alias": "not_null_dfk_hero_summons_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_summons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_summons.yml/not_null_dfk_hero_summons_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.525384, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_summons\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.dfk_hero_summons"}, "test.harmony.not_null_dfk_hero_summons_hero_id.dc487032ac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_id", "model": "{{ get_where_subquery(ref('dfk_hero_summons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_summons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_summons_hero_id"], "unique_id": "test.harmony.not_null_dfk_hero_summons_hero_id.dc487032ac", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_summons_hero_id.sql", "original_file_path": "models/dfk/dfk_hero_summons.yml", "name": "not_null_dfk_hero_summons_hero_id", "alias": "not_null_dfk_hero_summons_hero_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_summons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_summons.yml/not_null_dfk_hero_summons_hero_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.52611, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_summons\nwhere hero_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_id", "file_key_name": "models.dfk_hero_summons"}, "test.harmony.not_null_dfk_hero_summons_crystal_id.a052476168": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "crystal_id", "model": "{{ get_where_subquery(ref('dfk_hero_summons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_summons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_summons_crystal_id"], "unique_id": "test.harmony.not_null_dfk_hero_summons_crystal_id.a052476168", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_summons_crystal_id.sql", "original_file_path": "models/dfk/dfk_hero_summons.yml", "name": "not_null_dfk_hero_summons_crystal_id", "alias": "not_null_dfk_hero_summons_crystal_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_summons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_summons.yml/not_null_dfk_hero_summons_crystal_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5270772, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_summons\nwhere crystal_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "crystal_id", "file_key_name": "models.dfk_hero_summons"}, "test.harmony.not_null_dfk_hero_summons_summoneer.b4601e6e8c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "summoneer", "model": "{{ get_where_subquery(ref('dfk_hero_summons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_summons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_summons_summoneer"], "unique_id": "test.harmony.not_null_dfk_hero_summons_summoneer.b4601e6e8c", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_summons_summoneer.sql", "original_file_path": "models/dfk/dfk_hero_summons.yml", "name": "not_null_dfk_hero_summons_summoneer", "alias": "not_null_dfk_hero_summons_summoneer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_summons"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_summons.yml/not_null_dfk_hero_summons_summoneer.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.527811, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_summons\nwhere summoneer is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "summoneer", "file_key_name": "models.dfk_hero_summons"}, "test.harmony.not_null_dfk_hero_sales_tx_hash.ad6991f7e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_hero_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_sales_tx_hash"], "unique_id": "test.harmony.not_null_dfk_hero_sales_tx_hash.ad6991f7e2", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_sales_tx_hash.sql", "original_file_path": "models/dfk/dfk_hero_sales.yml", "name": "not_null_dfk_hero_sales_tx_hash", "alias": "not_null_dfk_hero_sales_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_sales.yml/not_null_dfk_hero_sales_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.530619, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_sales\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_hero_sales"}, "test.harmony.unique_dfk_hero_sales_tx_hash.15a6f08266": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_hero_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "unique_dfk_hero_sales_tx_hash"], "unique_id": "test.harmony.unique_dfk_hero_sales_tx_hash.15a6f08266", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_dfk_hero_sales_tx_hash.sql", "original_file_path": "models/dfk/dfk_hero_sales.yml", "name": "unique_dfk_hero_sales_tx_hash", "alias": "unique_dfk_hero_sales_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_sales.yml/unique_dfk_hero_sales_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5313852, "compiled_sql": "\n    \n    \n\nselect\n    tx_hash as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.dfk_hero_sales\nwhere tx_hash is not null\ngroup by tx_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_hero_sales"}, "test.harmony.not_null_dfk_hero_sales_block_timestamp.de1dd507fd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('dfk_hero_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_sales_block_timestamp"], "unique_id": "test.harmony.not_null_dfk_hero_sales_block_timestamp.de1dd507fd", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_sales_block_timestamp.sql", "original_file_path": "models/dfk/dfk_hero_sales.yml", "name": "not_null_dfk_hero_sales_block_timestamp", "alias": "not_null_dfk_hero_sales_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_sales.yml/not_null_dfk_hero_sales_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.532243, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_sales\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.dfk_hero_sales"}, "test.harmony.not_null_dfk_hero_sales_ingested_at.015644d5f4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('dfk_hero_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_sales_ingested_at"], "unique_id": "test.harmony.not_null_dfk_hero_sales_ingested_at.015644d5f4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_sales_ingested_at.sql", "original_file_path": "models/dfk/dfk_hero_sales.yml", "name": "not_null_dfk_hero_sales_ingested_at", "alias": "not_null_dfk_hero_sales_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_sales.yml/not_null_dfk_hero_sales_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.533003, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_sales\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.dfk_hero_sales"}, "test.harmony.not_null_dfk_hero_sales_hero_token_id.583c649524": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_token_id", "model": "{{ get_where_subquery(ref('dfk_hero_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_sales_hero_token_id"], "unique_id": "test.harmony.not_null_dfk_hero_sales_hero_token_id.583c649524", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_sales_hero_token_id.sql", "original_file_path": "models/dfk/dfk_hero_sales.yml", "name": "not_null_dfk_hero_sales_hero_token_id", "alias": "not_null_dfk_hero_sales_hero_token_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_sales.yml/not_null_dfk_hero_sales_hero_token_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5337431, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_sales\nwhere hero_token_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_token_id", "file_key_name": "models.dfk_hero_sales"}, "test.harmony.not_null_dfk_hero_sales_auction_id.632a655c34": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "auction_id", "model": "{{ get_where_subquery(ref('dfk_hero_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_sales_auction_id"], "unique_id": "test.harmony.not_null_dfk_hero_sales_auction_id.632a655c34", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_sales_auction_id.sql", "original_file_path": "models/dfk/dfk_hero_sales.yml", "name": "not_null_dfk_hero_sales_auction_id", "alias": "not_null_dfk_hero_sales_auction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_sales.yml/not_null_dfk_hero_sales_auction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.534482, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_sales\nwhere auction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "auction_id", "file_key_name": "models.dfk_hero_sales"}, "test.harmony.not_null_dfk_hero_sales_total_jewels.12a1d5c1eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_jewels", "model": "{{ get_where_subquery(ref('dfk_hero_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_sales_total_jewels"], "unique_id": "test.harmony.not_null_dfk_hero_sales_total_jewels.12a1d5c1eb", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_sales_total_jewels.sql", "original_file_path": "models/dfk/dfk_hero_sales.yml", "name": "not_null_dfk_hero_sales_total_jewels", "alias": "not_null_dfk_hero_sales_total_jewels", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_sales.yml/not_null_dfk_hero_sales_total_jewels.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5353322, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_sales\nwhere total_jewels is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_jewels", "file_key_name": "models.dfk_hero_sales"}, "test.harmony.not_null_dfk_hero_sales_tax_jewels.91da0b7dba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_jewels", "model": "{{ get_where_subquery(ref('dfk_hero_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_sales_tax_jewels"], "unique_id": "test.harmony.not_null_dfk_hero_sales_tax_jewels.91da0b7dba", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_sales_tax_jewels.sql", "original_file_path": "models/dfk/dfk_hero_sales.yml", "name": "not_null_dfk_hero_sales_tax_jewels", "alias": "not_null_dfk_hero_sales_tax_jewels", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_sales.yml/not_null_dfk_hero_sales_tax_jewels.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.536063, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_sales\nwhere tax_jewels is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tax_jewels", "file_key_name": "models.dfk_hero_sales"}, "test.harmony.not_null_dfk_hero_sales_total_usd.8aa69d6d8f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_usd", "model": "{{ get_where_subquery(ref('dfk_hero_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_sales_total_usd"], "unique_id": "test.harmony.not_null_dfk_hero_sales_total_usd.8aa69d6d8f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_sales_total_usd.sql", "original_file_path": "models/dfk/dfk_hero_sales.yml", "name": "not_null_dfk_hero_sales_total_usd", "alias": "not_null_dfk_hero_sales_total_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_sales.yml/not_null_dfk_hero_sales_total_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.536793, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_sales\nwhere total_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_usd", "file_key_name": "models.dfk_hero_sales"}, "test.harmony.not_null_dfk_hero_sales_tax_usd.f1ae7d543c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_usd", "model": "{{ get_where_subquery(ref('dfk_hero_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_sales_tax_usd"], "unique_id": "test.harmony.not_null_dfk_hero_sales_tax_usd.f1ae7d543c", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_sales_tax_usd.sql", "original_file_path": "models/dfk/dfk_hero_sales.yml", "name": "not_null_dfk_hero_sales_tax_usd", "alias": "not_null_dfk_hero_sales_tax_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_sales.yml/not_null_dfk_hero_sales_tax_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.537652, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_sales\nwhere tax_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tax_usd", "file_key_name": "models.dfk_hero_sales"}, "test.harmony.not_null_dfk_hero_sales_buyer_address.b1b866987d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "buyer_address", "model": "{{ get_where_subquery(ref('dfk_hero_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_sales_buyer_address"], "unique_id": "test.harmony.not_null_dfk_hero_sales_buyer_address.b1b866987d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_sales_buyer_address.sql", "original_file_path": "models/dfk/dfk_hero_sales.yml", "name": "not_null_dfk_hero_sales_buyer_address", "alias": "not_null_dfk_hero_sales_buyer_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_sales.yml/not_null_dfk_hero_sales_buyer_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.538387, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_sales\nwhere buyer_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "buyer_address", "file_key_name": "models.dfk_hero_sales"}, "test.harmony.not_null_dfk_seed_harvests_block_timestamp.39e6a8ee79": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('dfk_seed_harvests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_harvests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_harvests_block_timestamp"], "unique_id": "test.harmony.not_null_dfk_seed_harvests_block_timestamp.39e6a8ee79", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_harvests_block_timestamp.sql", "original_file_path": "models/dfk/dfk_seed_harvests.yml", "name": "not_null_dfk_seed_harvests_block_timestamp", "alias": "not_null_dfk_seed_harvests_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_harvests"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_harvests.yml/not_null_dfk_seed_harvests_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.540919, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_harvests\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.dfk_seed_harvests"}, "test.harmony.not_null_dfk_seed_harvests_ingested_at.5c10bb344c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('dfk_seed_harvests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_harvests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_harvests_ingested_at"], "unique_id": "test.harmony.not_null_dfk_seed_harvests_ingested_at.5c10bb344c", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_harvests_ingested_at.sql", "original_file_path": "models/dfk/dfk_seed_harvests.yml", "name": "not_null_dfk_seed_harvests_ingested_at", "alias": "not_null_dfk_seed_harvests_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_harvests"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_harvests.yml/not_null_dfk_seed_harvests_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.541696, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_harvests\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.dfk_seed_harvests"}, "test.harmony.not_null_dfk_seed_harvests_block_number.94b33d4c1d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_number", "model": "{{ get_where_subquery(ref('dfk_seed_harvests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_harvests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_harvests_block_number"], "unique_id": "test.harmony.not_null_dfk_seed_harvests_block_number.94b33d4c1d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_harvests_block_number.sql", "original_file_path": "models/dfk/dfk_seed_harvests.yml", "name": "not_null_dfk_seed_harvests_block_number", "alias": "not_null_dfk_seed_harvests_block_number", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_harvests"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_harvests.yml/not_null_dfk_seed_harvests_block_number.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.542441, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_harvests\nwhere block_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_number", "file_key_name": "models.dfk_seed_harvests"}, "test.harmony.not_null_dfk_seed_harvests_garden_epoch.1fff8ab18d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "garden_epoch", "model": "{{ get_where_subquery(ref('dfk_seed_harvests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_harvests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_harvests_garden_epoch"], "unique_id": "test.harmony.not_null_dfk_seed_harvests_garden_epoch.1fff8ab18d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_harvests_garden_epoch.sql", "original_file_path": "models/dfk/dfk_seed_harvests.yml", "name": "not_null_dfk_seed_harvests_garden_epoch", "alias": "not_null_dfk_seed_harvests_garden_epoch", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_harvests"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_harvests.yml/not_null_dfk_seed_harvests_garden_epoch.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.543285, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_harvests\nwhere garden_epoch is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "garden_epoch", "file_key_name": "models.dfk_seed_harvests"}, "test.harmony.not_null_dfk_seed_harvests_native_from_address.0ec5d4c793": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "native_from_address", "model": "{{ get_where_subquery(ref('dfk_seed_harvests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_harvests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_harvests_native_from_address"], "unique_id": "test.harmony.not_null_dfk_seed_harvests_native_from_address.0ec5d4c793", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_harvests_native_from_address.sql", "original_file_path": "models/dfk/dfk_seed_harvests.yml", "name": "not_null_dfk_seed_harvests_native_from_address", "alias": "not_null_dfk_seed_harvests_native_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_harvests"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_harvests.yml/not_null_dfk_seed_harvests_native_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.544012, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_harvests\nwhere native_from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "native_from_address", "file_key_name": "models.dfk_seed_harvests"}, "test.harmony.not_null_dfk_seed_harvests_from_address.052f2540b6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_address", "model": "{{ get_where_subquery(ref('dfk_seed_harvests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_harvests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_harvests_from_address"], "unique_id": "test.harmony.not_null_dfk_seed_harvests_from_address.052f2540b6", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_harvests_from_address.sql", "original_file_path": "models/dfk/dfk_seed_harvests.yml", "name": "not_null_dfk_seed_harvests_from_address", "alias": "not_null_dfk_seed_harvests_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_harvests"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_harvests.yml/not_null_dfk_seed_harvests_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.544745, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_harvests\nwhere from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_address", "file_key_name": "models.dfk_seed_harvests"}, "test.harmony.unique_dfk_seed_harvests_tx_hash.99d4d1e0aa": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_seed_harvests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_harvests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "unique_dfk_seed_harvests_tx_hash"], "unique_id": "test.harmony.unique_dfk_seed_harvests_tx_hash.99d4d1e0aa", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_dfk_seed_harvests_tx_hash.sql", "original_file_path": "models/dfk/dfk_seed_harvests.yml", "name": "unique_dfk_seed_harvests_tx_hash", "alias": "unique_dfk_seed_harvests_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_harvests"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_harvests.yml/unique_dfk_seed_harvests_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5455968, "compiled_sql": "\n    \n    \n\nselect\n    tx_hash as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.dfk_seed_harvests\nwhere tx_hash is not null\ngroup by tx_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_seed_harvests"}, "test.harmony.not_null_dfk_seed_harvests_tx_hash.80cb588c5d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_seed_harvests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_harvests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_harvests_tx_hash"], "unique_id": "test.harmony.not_null_dfk_seed_harvests_tx_hash.80cb588c5d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_harvests_tx_hash.sql", "original_file_path": "models/dfk/dfk_seed_harvests.yml", "name": "not_null_dfk_seed_harvests_tx_hash", "alias": "not_null_dfk_seed_harvests_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_harvests"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_harvests.yml/not_null_dfk_seed_harvests_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.546326, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_harvests\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_seed_harvests"}, "test.harmony.not_null_dfk_seed_harvests_jewel_locked.0288e7217f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "jewel_locked", "model": "{{ get_where_subquery(ref('dfk_seed_harvests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_harvests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_harvests_jewel_locked"], "unique_id": "test.harmony.not_null_dfk_seed_harvests_jewel_locked.0288e7217f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_harvests_jewel_locked.sql", "original_file_path": "models/dfk/dfk_seed_harvests.yml", "name": "not_null_dfk_seed_harvests_jewel_locked", "alias": "not_null_dfk_seed_harvests_jewel_locked", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_harvests"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_harvests.yml/not_null_dfk_seed_harvests_jewel_locked.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5470562, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_harvests\nwhere jewel_locked is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "jewel_locked", "file_key_name": "models.dfk_seed_harvests"}, "test.harmony.not_null_dfk_seed_harvests_jewel_unlocked.9e26f9d4a4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "jewel_unlocked", "model": "{{ get_where_subquery(ref('dfk_seed_harvests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_harvests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_harvests_jewel_unlocked"], "unique_id": "test.harmony.not_null_dfk_seed_harvests_jewel_unlocked.9e26f9d4a4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_harvests_jewel_unlocked.sql", "original_file_path": "models/dfk/dfk_seed_harvests.yml", "name": "not_null_dfk_seed_harvests_jewel_unlocked", "alias": "not_null_dfk_seed_harvests_jewel_unlocked", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_harvests"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_harvests.yml/not_null_dfk_seed_harvests_jewel_unlocked.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.547773, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_harvests\nwhere jewel_unlocked is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "jewel_unlocked", "file_key_name": "models.dfk_seed_harvests"}, "test.harmony.not_null_dfk_potions_crafted_tx_hash.b36dd3c642": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_potions_crafted')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_potions_crafted"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_potions_crafted_tx_hash"], "unique_id": "test.harmony.not_null_dfk_potions_crafted_tx_hash.b36dd3c642", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_potions_crafted_tx_hash.sql", "original_file_path": "models/dfk/dfk_potions_crafted.yml", "name": "not_null_dfk_potions_crafted_tx_hash", "alias": "not_null_dfk_potions_crafted_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_potions_crafted"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_potions_crafted.yml/not_null_dfk_potions_crafted_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5498428, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_potions_crafted\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_potions_crafted"}, "test.harmony.unique_dfk_potions_crafted_tx_hash.921954e171": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_potions_crafted')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_potions_crafted"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "unique_dfk_potions_crafted_tx_hash"], "unique_id": "test.harmony.unique_dfk_potions_crafted_tx_hash.921954e171", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_dfk_potions_crafted_tx_hash.sql", "original_file_path": "models/dfk/dfk_potions_crafted.yml", "name": "unique_dfk_potions_crafted_tx_hash", "alias": "unique_dfk_potions_crafted_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_potions_crafted"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_potions_crafted.yml/unique_dfk_potions_crafted_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5506, "compiled_sql": "\n    \n    \n\nselect\n    tx_hash as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.dfk_potions_crafted\nwhere tx_hash is not null\ngroup by tx_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_potions_crafted"}, "test.harmony.not_null_dfk_potions_crafted_block_timestamp.24333b5359": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('dfk_potions_crafted')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_potions_crafted"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_potions_crafted_block_timestamp"], "unique_id": "test.harmony.not_null_dfk_potions_crafted_block_timestamp.24333b5359", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_potions_crafted_block_timestamp.sql", "original_file_path": "models/dfk/dfk_potions_crafted.yml", "name": "not_null_dfk_potions_crafted_block_timestamp", "alias": "not_null_dfk_potions_crafted_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_potions_crafted"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_potions_crafted.yml/not_null_dfk_potions_crafted_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5514581, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_potions_crafted\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.dfk_potions_crafted"}, "test.harmony.not_null_dfk_potions_crafted_ingested_at.8333dbecd6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('dfk_potions_crafted')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_potions_crafted"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_potions_crafted_ingested_at"], "unique_id": "test.harmony.not_null_dfk_potions_crafted_ingested_at.8333dbecd6", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_potions_crafted_ingested_at.sql", "original_file_path": "models/dfk/dfk_potions_crafted.yml", "name": "not_null_dfk_potions_crafted_ingested_at", "alias": "not_null_dfk_potions_crafted_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_potions_crafted"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_potions_crafted.yml/not_null_dfk_potions_crafted_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.552195, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_potions_crafted\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.dfk_potions_crafted"}, "test.harmony.not_null_dfk_potions_crafted_crafter.908f7c51d2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "crafter", "model": "{{ get_where_subquery(ref('dfk_potions_crafted')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_potions_crafted"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_potions_crafted_crafter"], "unique_id": "test.harmony.not_null_dfk_potions_crafted_crafter.908f7c51d2", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_potions_crafted_crafter.sql", "original_file_path": "models/dfk/dfk_potions_crafted.yml", "name": "not_null_dfk_potions_crafted_crafter", "alias": "not_null_dfk_potions_crafted_crafter", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_potions_crafted"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_potions_crafted.yml/not_null_dfk_potions_crafted_crafter.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.552931, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_potions_crafted\nwhere crafter is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "crafter", "file_key_name": "models.dfk_potions_crafted"}, "test.harmony.not_null_dfk_potions_crafted_potion_type.731da0f49c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "potion_type", "model": "{{ get_where_subquery(ref('dfk_potions_crafted')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_potions_crafted"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_potions_crafted_potion_type"], "unique_id": "test.harmony.not_null_dfk_potions_crafted_potion_type.731da0f49c", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_potions_crafted_potion_type.sql", "original_file_path": "models/dfk/dfk_potions_crafted.yml", "name": "not_null_dfk_potions_crafted_potion_type", "alias": "not_null_dfk_potions_crafted_potion_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_potions_crafted"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_potions_crafted.yml/not_null_dfk_potions_crafted_potion_type.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.553783, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_potions_crafted\nwhere potion_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "potion_type", "file_key_name": "models.dfk_potions_crafted"}, "test.harmony.not_null_dfk_potions_crafted_potions_crafted.dd8097c9bf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "potions_crafted", "model": "{{ get_where_subquery(ref('dfk_potions_crafted')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_potions_crafted"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_potions_crafted_potions_crafted"], "unique_id": "test.harmony.not_null_dfk_potions_crafted_potions_crafted.dd8097c9bf", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_potions_crafted_potions_crafted.sql", "original_file_path": "models/dfk/dfk_potions_crafted.yml", "name": "not_null_dfk_potions_crafted_potions_crafted", "alias": "not_null_dfk_potions_crafted_potions_crafted", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_potions_crafted"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_potions_crafted.yml/not_null_dfk_potions_crafted_potions_crafted.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.554515, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_potions_crafted\nwhere potions_crafted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "potions_crafted", "file_key_name": "models.dfk_potions_crafted"}, "test.harmony.unique_dfk_item_transactions_tx_hash.de03a99a4b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_item_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_item_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "unique_dfk_item_transactions_tx_hash"], "unique_id": "test.harmony.unique_dfk_item_transactions_tx_hash.de03a99a4b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_dfk_item_transactions_tx_hash.sql", "original_file_path": "models/dfk/dfk_item_transactions.yml", "name": "unique_dfk_item_transactions_tx_hash", "alias": "unique_dfk_item_transactions_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_item_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_item_transactions.yml/unique_dfk_item_transactions_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.557696, "compiled_sql": "\n    \n    \n\nselect\n    tx_hash as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.dfk_item_transactions\nwhere tx_hash is not null\ngroup by tx_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_item_transactions"}, "test.harmony.not_null_dfk_item_transactions_tx_hash.7a5c029a90": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_item_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_item_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_item_transactions_tx_hash"], "unique_id": "test.harmony.not_null_dfk_item_transactions_tx_hash.7a5c029a90", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_item_transactions_tx_hash.sql", "original_file_path": "models/dfk/dfk_item_transactions.yml", "name": "not_null_dfk_item_transactions_tx_hash", "alias": "not_null_dfk_item_transactions_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_item_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_item_transactions.yml/not_null_dfk_item_transactions_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.558469, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_item_transactions\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_item_transactions"}, "test.harmony.not_null_dfk_item_transactions_block_timestamp.896f37f711": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('dfk_item_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_item_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_item_transactions_block_timestamp"], "unique_id": "test.harmony.not_null_dfk_item_transactions_block_timestamp.896f37f711", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_item_transactions_block_timestamp.sql", "original_file_path": "models/dfk/dfk_item_transactions.yml", "name": "not_null_dfk_item_transactions_block_timestamp", "alias": "not_null_dfk_item_transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_item_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_item_transactions.yml/not_null_dfk_item_transactions_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.559412, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_item_transactions\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.dfk_item_transactions"}, "test.harmony.not_null_dfk_item_transactions_ingested_at.2003546fbd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('dfk_item_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_item_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_item_transactions_ingested_at"], "unique_id": "test.harmony.not_null_dfk_item_transactions_ingested_at.2003546fbd", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_item_transactions_ingested_at.sql", "original_file_path": "models/dfk/dfk_item_transactions.yml", "name": "not_null_dfk_item_transactions_ingested_at", "alias": "not_null_dfk_item_transactions_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_item_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_item_transactions.yml/not_null_dfk_item_transactions_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.560163, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_item_transactions\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.dfk_item_transactions"}, "test.harmony.not_null_dfk_item_transactions_native_from_address.5e4f787217": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "native_from_address", "model": "{{ get_where_subquery(ref('dfk_item_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_item_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_item_transactions_native_from_address"], "unique_id": "test.harmony.not_null_dfk_item_transactions_native_from_address.5e4f787217", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_item_transactions_native_from_address.sql", "original_file_path": "models/dfk/dfk_item_transactions.yml", "name": "not_null_dfk_item_transactions_native_from_address", "alias": "not_null_dfk_item_transactions_native_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_item_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_item_transactions.yml/not_null_dfk_item_transactions_native_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5608919, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_item_transactions\nwhere native_from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "native_from_address", "file_key_name": "models.dfk_item_transactions"}, "test.harmony.not_null_dfk_item_transactions_from_address.62cf0232cb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_address", "model": "{{ get_where_subquery(ref('dfk_item_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_item_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_item_transactions_from_address"], "unique_id": "test.harmony.not_null_dfk_item_transactions_from_address.62cf0232cb", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_item_transactions_from_address.sql", "original_file_path": "models/dfk/dfk_item_transactions.yml", "name": "not_null_dfk_item_transactions_from_address", "alias": "not_null_dfk_item_transactions_from_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_item_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_item_transactions.yml/not_null_dfk_item_transactions_from_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.561634, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_item_transactions\nwhere from_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_address", "file_key_name": "models.dfk_item_transactions"}, "test.harmony.not_null_dfk_item_transactions_market_action.a64adadbe3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "market_action", "model": "{{ get_where_subquery(ref('dfk_item_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_item_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_item_transactions_market_action"], "unique_id": "test.harmony.not_null_dfk_item_transactions_market_action.a64adadbe3", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_item_transactions_market_action.sql", "original_file_path": "models/dfk/dfk_item_transactions.yml", "name": "not_null_dfk_item_transactions_market_action", "alias": "not_null_dfk_item_transactions_market_action", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_item_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_item_transactions.yml/not_null_dfk_item_transactions_market_action.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5624661, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_item_transactions\nwhere market_action is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "market_action", "file_key_name": "models.dfk_item_transactions"}, "test.harmony.not_null_dfk_item_transactions_amount_give.f950d75693": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount_give", "model": "{{ get_where_subquery(ref('dfk_item_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_item_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_item_transactions_amount_give"], "unique_id": "test.harmony.not_null_dfk_item_transactions_amount_give.f950d75693", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_item_transactions_amount_give.sql", "original_file_path": "models/dfk/dfk_item_transactions.yml", "name": "not_null_dfk_item_transactions_amount_give", "alias": "not_null_dfk_item_transactions_amount_give", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_item_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_item_transactions.yml/not_null_dfk_item_transactions_amount_give.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.563184, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_item_transactions\nwhere amount_give is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount_give", "file_key_name": "models.dfk_item_transactions"}, "test.harmony.not_null_dfk_item_transactions_token_give_address.92b8c165a4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_give_address", "model": "{{ get_where_subquery(ref('dfk_item_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_item_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_item_transactions_token_give_address"], "unique_id": "test.harmony.not_null_dfk_item_transactions_token_give_address.92b8c165a4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_item_transactions_token_give_address.sql", "original_file_path": "models/dfk/dfk_item_transactions.yml", "name": "not_null_dfk_item_transactions_token_give_address", "alias": "not_null_dfk_item_transactions_token_give_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_item_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_item_transactions.yml/not_null_dfk_item_transactions_token_give_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.563905, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_item_transactions\nwhere token_give_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_give_address", "file_key_name": "models.dfk_item_transactions"}, "test.harmony.not_null_dfk_item_transactions_amount_take.5839c661a6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount_take", "model": "{{ get_where_subquery(ref('dfk_item_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_item_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_item_transactions_amount_take"], "unique_id": "test.harmony.not_null_dfk_item_transactions_amount_take.5839c661a6", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_item_transactions_amount_take.sql", "original_file_path": "models/dfk/dfk_item_transactions.yml", "name": "not_null_dfk_item_transactions_amount_take", "alias": "not_null_dfk_item_transactions_amount_take", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_item_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_item_transactions.yml/not_null_dfk_item_transactions_amount_take.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.564757, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_item_transactions\nwhere amount_take is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount_take", "file_key_name": "models.dfk_item_transactions"}, "test.harmony.not_null_dfk_item_transactions_token_take_address.368da9df1d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_take_address", "model": "{{ get_where_subquery(ref('dfk_item_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_item_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_item_transactions_token_take_address"], "unique_id": "test.harmony.not_null_dfk_item_transactions_token_take_address.368da9df1d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_item_transactions_token_take_address.sql", "original_file_path": "models/dfk/dfk_item_transactions.yml", "name": "not_null_dfk_item_transactions_token_take_address", "alias": "not_null_dfk_item_transactions_token_take_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_item_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_item_transactions.yml/not_null_dfk_item_transactions_token_take_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5654862, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_item_transactions\nwhere token_take_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token_take_address", "file_key_name": "models.dfk_item_transactions"}, "test.harmony.unique_dfk_seed_liquidity_actions_log_id.5ff183d9e4": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('dfk_seed_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "unique_dfk_seed_liquidity_actions_log_id"], "unique_id": "test.harmony.unique_dfk_seed_liquidity_actions_log_id.5ff183d9e4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_dfk_seed_liquidity_actions_log_id.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.yml", "name": "unique_dfk_seed_liquidity_actions_log_id", "alias": "unique_dfk_seed_liquidity_actions_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_liquidity_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.yml/unique_dfk_seed_liquidity_actions_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.568767, "compiled_sql": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.dfk_seed_liquidity_actions\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.dfk_seed_liquidity_actions"}, "test.harmony.not_null_dfk_seed_liquidity_actions_log_id.290eb334e4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('dfk_seed_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_liquidity_actions_log_id"], "unique_id": "test.harmony.not_null_dfk_seed_liquidity_actions_log_id.290eb334e4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_liquidity_actions_log_id.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.yml", "name": "not_null_dfk_seed_liquidity_actions_log_id", "alias": "not_null_dfk_seed_liquidity_actions_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_liquidity_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.yml/not_null_dfk_seed_liquidity_actions_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.569543, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_liquidity_actions\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.dfk_seed_liquidity_actions"}, "test.harmony.not_null_dfk_seed_liquidity_actions_block_id.8579bb9a85": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('dfk_seed_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_liquidity_actions_block_id"], "unique_id": "test.harmony.not_null_dfk_seed_liquidity_actions_block_id.8579bb9a85", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_liquidity_actions_block_id.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.yml", "name": "not_null_dfk_seed_liquidity_actions_block_id", "alias": "not_null_dfk_seed_liquidity_actions_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_liquidity_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.yml/not_null_dfk_seed_liquidity_actions_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5703979, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_liquidity_actions\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.dfk_seed_liquidity_actions"}, "test.harmony.not_null_dfk_seed_liquidity_actions_block_timestamp.143c23fece": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('dfk_seed_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_liquidity_actions_block_timestamp"], "unique_id": "test.harmony.not_null_dfk_seed_liquidity_actions_block_timestamp.143c23fece", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_liquidity_actions_block_timestamp.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.yml", "name": "not_null_dfk_seed_liquidity_actions_block_timestamp", "alias": "not_null_dfk_seed_liquidity_actions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_liquidity_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.yml/not_null_dfk_seed_liquidity_actions_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5711439, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_liquidity_actions\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.dfk_seed_liquidity_actions"}, "test.harmony.not_null_dfk_seed_liquidity_actions_ingested_at.fed78e06bc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('dfk_seed_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_liquidity_actions_ingested_at"], "unique_id": "test.harmony.not_null_dfk_seed_liquidity_actions_ingested_at.fed78e06bc", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_liquidity_actions_ingested_at.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.yml", "name": "not_null_dfk_seed_liquidity_actions_ingested_at", "alias": "not_null_dfk_seed_liquidity_actions_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_liquidity_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.yml/not_null_dfk_seed_liquidity_actions_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.571882, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_liquidity_actions\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.dfk_seed_liquidity_actions"}, "test.harmony.not_null_dfk_seed_liquidity_actions_tx_hash.c6a0b2cfe4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_seed_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_liquidity_actions_tx_hash"], "unique_id": "test.harmony.not_null_dfk_seed_liquidity_actions_tx_hash.c6a0b2cfe4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_liquidity_actions_tx_hash.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.yml", "name": "not_null_dfk_seed_liquidity_actions_tx_hash", "alias": "not_null_dfk_seed_liquidity_actions_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_liquidity_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.yml/not_null_dfk_seed_liquidity_actions_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.572733, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_liquidity_actions\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_seed_liquidity_actions"}, "test.harmony.not_null_dfk_seed_liquidity_actions_one_lp_address.d711aafe1e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "one_lp_address", "model": "{{ get_where_subquery(ref('dfk_seed_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_liquidity_actions_one_lp_address"], "unique_id": "test.harmony.not_null_dfk_seed_liquidity_actions_one_lp_address.d711aafe1e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_liquidity_actions_one_lp_address.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.yml", "name": "not_null_dfk_seed_liquidity_actions_one_lp_address", "alias": "not_null_dfk_seed_liquidity_actions_one_lp_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_liquidity_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.yml/not_null_dfk_seed_liquidity_actions_one_lp_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.573466, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_liquidity_actions\nwhere one_lp_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "one_lp_address", "file_key_name": "models.dfk_seed_liquidity_actions"}, "test.harmony.not_null_dfk_seed_liquidity_actions_eth_lp_address.5713259131": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "eth_lp_address", "model": "{{ get_where_subquery(ref('dfk_seed_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_liquidity_actions_eth_lp_address"], "unique_id": "test.harmony.not_null_dfk_seed_liquidity_actions_eth_lp_address.5713259131", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_liquidity_actions_eth_lp_address.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.yml", "name": "not_null_dfk_seed_liquidity_actions_eth_lp_address", "alias": "not_null_dfk_seed_liquidity_actions_eth_lp_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_liquidity_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.yml/not_null_dfk_seed_liquidity_actions_eth_lp_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5741901, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_liquidity_actions\nwhere eth_lp_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "eth_lp_address", "file_key_name": "models.dfk_seed_liquidity_actions"}, "test.harmony.not_null_dfk_seed_liquidity_actions_pool_name.85e6365239": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_name", "model": "{{ get_where_subquery(ref('dfk_seed_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_liquidity_actions_pool_name"], "unique_id": "test.harmony.not_null_dfk_seed_liquidity_actions_pool_name.85e6365239", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_liquidity_actions_pool_name.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.yml", "name": "not_null_dfk_seed_liquidity_actions_pool_name", "alias": "not_null_dfk_seed_liquidity_actions_pool_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_liquidity_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.yml/not_null_dfk_seed_liquidity_actions_pool_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.575043, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_liquidity_actions\nwhere pool_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_name", "file_key_name": "models.dfk_seed_liquidity_actions"}, "test.harmony.not_null_dfk_seed_liquidity_actions_token0_address.0f2f408a84": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token0_address", "model": "{{ get_where_subquery(ref('dfk_seed_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_liquidity_actions_token0_address"], "unique_id": "test.harmony.not_null_dfk_seed_liquidity_actions_token0_address.0f2f408a84", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_liquidity_actions_token0_address.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.yml", "name": "not_null_dfk_seed_liquidity_actions_token0_address", "alias": "not_null_dfk_seed_liquidity_actions_token0_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_liquidity_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.yml/not_null_dfk_seed_liquidity_actions_token0_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5757701, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_liquidity_actions\nwhere token0_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token0_address", "file_key_name": "models.dfk_seed_liquidity_actions"}, "test.harmony.not_null_dfk_seed_liquidity_actions_token1_address.9776668543": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token1_address", "model": "{{ get_where_subquery(ref('dfk_seed_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_liquidity_actions_token1_address"], "unique_id": "test.harmony.not_null_dfk_seed_liquidity_actions_token1_address.9776668543", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_liquidity_actions_token1_address.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.yml", "name": "not_null_dfk_seed_liquidity_actions_token1_address", "alias": "not_null_dfk_seed_liquidity_actions_token1_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_liquidity_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.yml/not_null_dfk_seed_liquidity_actions_token1_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.576513, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_liquidity_actions\nwhere token1_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "token1_address", "file_key_name": "models.dfk_seed_liquidity_actions"}, "test.harmony.not_null_dfk_seed_liquidity_actions_action.eac7589e37": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "action", "model": "{{ get_where_subquery(ref('dfk_seed_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_seed_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_seed_liquidity_actions_action"], "unique_id": "test.harmony.not_null_dfk_seed_liquidity_actions_action.eac7589e37", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_seed_liquidity_actions_action.sql", "original_file_path": "models/dfk/dfk_seed_liquidity_actions.yml", "name": "not_null_dfk_seed_liquidity_actions_action", "alias": "not_null_dfk_seed_liquidity_actions_action", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_seed_liquidity_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_seed_liquidity_actions.yml/not_null_dfk_seed_liquidity_actions_action.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.577245, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_seed_liquidity_actions\nwhere action is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "action", "file_key_name": "models.dfk_seed_liquidity_actions"}, "test.harmony.not_null_dfk_hero_rental_tx_hash.52307d63f1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_hero_rental')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_rental"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_rental_tx_hash"], "unique_id": "test.harmony.not_null_dfk_hero_rental_tx_hash.52307d63f1", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_rental_tx_hash.sql", "original_file_path": "models/dfk/dfk_hero_rental.yml", "name": "not_null_dfk_hero_rental_tx_hash", "alias": "not_null_dfk_hero_rental_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_rental"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_rental.yml/not_null_dfk_hero_rental_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.579474, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_rental\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_hero_rental"}, "test.harmony.unique_dfk_hero_rental_tx_hash.2b446d1e89": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('dfk_hero_rental')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_rental"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "unique_dfk_hero_rental_tx_hash"], "unique_id": "test.harmony.unique_dfk_hero_rental_tx_hash.2b446d1e89", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_dfk_hero_rental_tx_hash.sql", "original_file_path": "models/dfk/dfk_hero_rental.yml", "name": "unique_dfk_hero_rental_tx_hash", "alias": "unique_dfk_hero_rental_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_rental"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_rental.yml/unique_dfk_hero_rental_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.580236, "compiled_sql": "\n    \n    \n\nselect\n    tx_hash as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.dfk_hero_rental\nwhere tx_hash is not null\ngroup by tx_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.dfk_hero_rental"}, "test.harmony.not_null_dfk_hero_rental_block_timestamp.fe79e6721b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('dfk_hero_rental')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_rental"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_rental_block_timestamp"], "unique_id": "test.harmony.not_null_dfk_hero_rental_block_timestamp.fe79e6721b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_rental_block_timestamp.sql", "original_file_path": "models/dfk/dfk_hero_rental.yml", "name": "not_null_dfk_hero_rental_block_timestamp", "alias": "not_null_dfk_hero_rental_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_rental"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_rental.yml/not_null_dfk_hero_rental_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5810921, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_rental\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.dfk_hero_rental"}, "test.harmony.not_null_dfk_hero_rental_ingested_at.bfeaba7cd3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('dfk_hero_rental')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_rental"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_rental_ingested_at"], "unique_id": "test.harmony.not_null_dfk_hero_rental_ingested_at.bfeaba7cd3", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_rental_ingested_at.sql", "original_file_path": "models/dfk/dfk_hero_rental.yml", "name": "not_null_dfk_hero_rental_ingested_at", "alias": "not_null_dfk_hero_rental_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_rental"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_rental.yml/not_null_dfk_hero_rental_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.581833, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_rental\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.dfk_hero_rental"}, "test.harmony.not_null_dfk_hero_rental_jewel_amount.1ec981b976": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "jewel_amount", "model": "{{ get_where_subquery(ref('dfk_hero_rental')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_rental"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_rental_jewel_amount"], "unique_id": "test.harmony.not_null_dfk_hero_rental_jewel_amount.1ec981b976", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_rental_jewel_amount.sql", "original_file_path": "models/dfk/dfk_hero_rental.yml", "name": "not_null_dfk_hero_rental_jewel_amount", "alias": "not_null_dfk_hero_rental_jewel_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_rental"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_rental.yml/not_null_dfk_hero_rental_jewel_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.582569, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_rental\nwhere jewel_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "jewel_amount", "file_key_name": "models.dfk_hero_rental"}, "test.harmony.not_null_dfk_hero_rental_user_address.a403584d0f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_address", "model": "{{ get_where_subquery(ref('dfk_hero_rental')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_rental"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_rental_user_address"], "unique_id": "test.harmony.not_null_dfk_hero_rental_user_address.a403584d0f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_rental_user_address.sql", "original_file_path": "models/dfk/dfk_hero_rental.yml", "name": "not_null_dfk_hero_rental_user_address", "alias": "not_null_dfk_hero_rental_user_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_rental"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_rental.yml/not_null_dfk_hero_rental_user_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5834298, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_rental\nwhere user_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_address", "file_key_name": "models.dfk_hero_rental"}, "test.harmony.not_null_dfk_hero_rental_renter_address.eab038232a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "renter_address", "model": "{{ get_where_subquery(ref('dfk_hero_rental')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_rental"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_rental_renter_address"], "unique_id": "test.harmony.not_null_dfk_hero_rental_renter_address.eab038232a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_rental_renter_address.sql", "original_file_path": "models/dfk/dfk_hero_rental.yml", "name": "not_null_dfk_hero_rental_renter_address", "alias": "not_null_dfk_hero_rental_renter_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_rental"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_rental.yml/not_null_dfk_hero_rental_renter_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5841632, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_rental\nwhere renter_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "renter_address", "file_key_name": "models.dfk_hero_rental"}, "test.harmony.not_null_dfk_hero_rental_amount_usd.182e104a9c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount_usd", "model": "{{ get_where_subquery(ref('dfk_hero_rental')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_rental"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_rental_amount_usd"], "unique_id": "test.harmony.not_null_dfk_hero_rental_amount_usd.182e104a9c", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_rental_amount_usd.sql", "original_file_path": "models/dfk/dfk_hero_rental.yml", "name": "not_null_dfk_hero_rental_amount_usd", "alias": "not_null_dfk_hero_rental_amount_usd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_rental"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_rental.yml/not_null_dfk_hero_rental_amount_usd.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.584884, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_rental\nwhere amount_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount_usd", "file_key_name": "models.dfk_hero_rental"}, "test.harmony.unique_viperswap_lp_actions_log_id.42c0280195": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('viperswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.viperswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "viperswap", "unique_viperswap_lp_actions_log_id"], "unique_id": "test.harmony.unique_viperswap_lp_actions_log_id.42c0280195", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_viperswap_lp_actions_log_id.sql", "original_file_path": "models/viperswap/viperswap_lp_actions.yml", "name": "unique_viperswap_lp_actions_log_id", "alias": "unique_viperswap_lp_actions_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["viperswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/viperswap/viperswap_lp_actions.yml/unique_viperswap_lp_actions_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5890481, "compiled_sql": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.viperswap_lp_actions\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.viperswap_lp_actions"}, "test.harmony.not_null_viperswap_lp_actions_log_id.fed60c0c15": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('viperswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.viperswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "viperswap", "not_null_viperswap_lp_actions_log_id"], "unique_id": "test.harmony.not_null_viperswap_lp_actions_log_id.fed60c0c15", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_viperswap_lp_actions_log_id.sql", "original_file_path": "models/viperswap/viperswap_lp_actions.yml", "name": "not_null_viperswap_lp_actions_log_id", "alias": "not_null_viperswap_lp_actions_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["viperswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/viperswap/viperswap_lp_actions.yml/not_null_viperswap_lp_actions_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.589816, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.viperswap_lp_actions\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.viperswap_lp_actions"}, "test.harmony.not_null_viperswap_lp_actions_block_id.13bbade106": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('viperswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.viperswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "viperswap", "not_null_viperswap_lp_actions_block_id"], "unique_id": "test.harmony.not_null_viperswap_lp_actions_block_id.13bbade106", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_viperswap_lp_actions_block_id.sql", "original_file_path": "models/viperswap/viperswap_lp_actions.yml", "name": "not_null_viperswap_lp_actions_block_id", "alias": "not_null_viperswap_lp_actions_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["viperswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/viperswap/viperswap_lp_actions.yml/not_null_viperswap_lp_actions_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.590554, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.viperswap_lp_actions\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.viperswap_lp_actions"}, "test.harmony.not_null_viperswap_lp_actions_block_timestamp.22e023bed4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('viperswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.viperswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "viperswap", "not_null_viperswap_lp_actions_block_timestamp"], "unique_id": "test.harmony.not_null_viperswap_lp_actions_block_timestamp.22e023bed4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_viperswap_lp_actions_block_timestamp.sql", "original_file_path": "models/viperswap/viperswap_lp_actions.yml", "name": "not_null_viperswap_lp_actions_block_timestamp", "alias": "not_null_viperswap_lp_actions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["viperswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/viperswap/viperswap_lp_actions.yml/not_null_viperswap_lp_actions_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.591499, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.viperswap_lp_actions\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.viperswap_lp_actions"}, "test.harmony.not_null_viperswap_lp_actions_ingested_at.c6199b65f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('viperswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.viperswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "viperswap", "not_null_viperswap_lp_actions_ingested_at"], "unique_id": "test.harmony.not_null_viperswap_lp_actions_ingested_at.c6199b65f5", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_viperswap_lp_actions_ingested_at.sql", "original_file_path": "models/viperswap/viperswap_lp_actions.yml", "name": "not_null_viperswap_lp_actions_ingested_at", "alias": "not_null_viperswap_lp_actions_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["viperswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/viperswap/viperswap_lp_actions.yml/not_null_viperswap_lp_actions_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.592236, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.viperswap_lp_actions\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.viperswap_lp_actions"}, "test.harmony.not_null_viperswap_lp_actions_tx_hash.29f131a5e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_hash", "model": "{{ get_where_subquery(ref('viperswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.viperswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "viperswap", "not_null_viperswap_lp_actions_tx_hash"], "unique_id": "test.harmony.not_null_viperswap_lp_actions_tx_hash.29f131a5e2", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_viperswap_lp_actions_tx_hash.sql", "original_file_path": "models/viperswap/viperswap_lp_actions.yml", "name": "not_null_viperswap_lp_actions_tx_hash", "alias": "not_null_viperswap_lp_actions_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["viperswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/viperswap/viperswap_lp_actions.yml/not_null_viperswap_lp_actions_tx_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5929658, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.viperswap_lp_actions\nwhere tx_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tx_hash", "file_key_name": "models.viperswap_lp_actions"}, "test.harmony.not_null_viperswap_lp_actions_liquidity_provider.4871ab7a4f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "liquidity_provider", "model": "{{ get_where_subquery(ref('viperswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.viperswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "viperswap", "not_null_viperswap_lp_actions_liquidity_provider"], "unique_id": "test.harmony.not_null_viperswap_lp_actions_liquidity_provider.4871ab7a4f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_viperswap_lp_actions_liquidity_provider.sql", "original_file_path": "models/viperswap/viperswap_lp_actions.yml", "name": "not_null_viperswap_lp_actions_liquidity_provider", "alias": "not_null_viperswap_lp_actions_liquidity_provider", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["viperswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/viperswap/viperswap_lp_actions.yml/not_null_viperswap_lp_actions_liquidity_provider.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5936909, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.viperswap_lp_actions\nwhere liquidity_provider is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "liquidity_provider", "file_key_name": "models.viperswap_lp_actions"}, "test.harmony.not_null_viperswap_lp_actions_action.f917333944": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "action", "model": "{{ get_where_subquery(ref('viperswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.viperswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "viperswap", "not_null_viperswap_lp_actions_action"], "unique_id": "test.harmony.not_null_viperswap_lp_actions_action.f917333944", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_viperswap_lp_actions_action.sql", "original_file_path": "models/viperswap/viperswap_lp_actions.yml", "name": "not_null_viperswap_lp_actions_action", "alias": "not_null_viperswap_lp_actions_action", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["viperswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/viperswap/viperswap_lp_actions.yml/not_null_viperswap_lp_actions_action.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.594522, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.viperswap_lp_actions\nwhere action is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "action", "file_key_name": "models.viperswap_lp_actions"}, "test.harmony.not_null_viperswap_lp_actions_pool_address.ae66749669": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('viperswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.viperswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "viperswap", "not_null_viperswap_lp_actions_pool_address"], "unique_id": "test.harmony.not_null_viperswap_lp_actions_pool_address.ae66749669", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_viperswap_lp_actions_pool_address.sql", "original_file_path": "models/viperswap/viperswap_lp_actions.yml", "name": "not_null_viperswap_lp_actions_pool_address", "alias": "not_null_viperswap_lp_actions_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["viperswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/viperswap/viperswap_lp_actions.yml/not_null_viperswap_lp_actions_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.5952482, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.viperswap_lp_actions\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pool_address", "file_key_name": "models.viperswap_lp_actions"}, "test.harmony.not_null_viperswap_lp_actions_amount0_raw.e2e61e6162": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount0_raw", "model": "{{ get_where_subquery(ref('viperswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.viperswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "viperswap", "not_null_viperswap_lp_actions_amount0_raw"], "unique_id": "test.harmony.not_null_viperswap_lp_actions_amount0_raw.e2e61e6162", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_viperswap_lp_actions_amount0_raw.sql", "original_file_path": "models/viperswap/viperswap_lp_actions.yml", "name": "not_null_viperswap_lp_actions_amount0_raw", "alias": "not_null_viperswap_lp_actions_amount0_raw", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["viperswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/viperswap/viperswap_lp_actions.yml/not_null_viperswap_lp_actions_amount0_raw.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.595975, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.viperswap_lp_actions\nwhere amount0_raw is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount0_raw", "file_key_name": "models.viperswap_lp_actions"}, "test.harmony.not_null_viperswap_lp_actions_amount1_raw.5d6166ac9a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount1_raw", "model": "{{ get_where_subquery(ref('viperswap_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.viperswap_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "viperswap", "not_null_viperswap_lp_actions_amount1_raw"], "unique_id": "test.harmony.not_null_viperswap_lp_actions_amount1_raw.5d6166ac9a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_viperswap_lp_actions_amount1_raw.sql", "original_file_path": "models/viperswap/viperswap_lp_actions.yml", "name": "not_null_viperswap_lp_actions_amount1_raw", "alias": "not_null_viperswap_lp_actions_amount1_raw", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["viperswap_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/viperswap/viperswap_lp_actions.yml/not_null_viperswap_lp_actions_amount1_raw.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.596826, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.viperswap_lp_actions\nwhere amount1_raw is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "amount1_raw", "file_key_name": "models.viperswap_lp_actions"}, "test.harmony.not_null_dfk_hero_updates_block_timestamp.5d82714d00": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_block_timestamp"], "unique_id": "test.harmony.not_null_dfk_hero_updates_block_timestamp.5d82714d00", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_block_timestamp.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_block_timestamp", "alias": "not_null_dfk_hero_updates_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.608298, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_timestamp", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_ingested_at.eb40ac7d41": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_ingested_at"], "unique_id": "test.harmony.not_null_dfk_hero_updates_ingested_at.eb40ac7d41", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_ingested_at.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_ingested_at", "alias": "not_null_dfk_hero_updates_ingested_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_ingested_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.60907, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ingested_at", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_block_id.e9e7a0ded2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_block_id"], "unique_id": "test.harmony.not_null_dfk_hero_updates_block_id.e9e7a0ded2", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_block_id.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_block_id", "alias": "not_null_dfk_hero_updates_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6098838, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "block_id", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.unique_dfk_hero_updates_log_id.eb1ed2ddc0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "unique_dfk_hero_updates_log_id"], "unique_id": "test.harmony.unique_dfk_hero_updates_log_id.eb1ed2ddc0", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "unique_dfk_hero_updates_log_id.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "unique_dfk_hero_updates_log_id", "alias": "unique_dfk_hero_updates_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/unique_dfk_hero_updates_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6106272, "compiled_sql": "\n    \n    \n\nselect\n    log_id as unique_field,\n    count(*) as n_records\n\nfrom HARMONY.DEV.dfk_hero_updates\nwhere log_id is not null\ngroup by log_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_log_id.76fbf6753e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_log_id"], "unique_id": "test.harmony.not_null_dfk_hero_updates_log_id.76fbf6753e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_log_id.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_log_id", "alias": "not_null_dfk_hero_updates_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_log_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.611357, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere log_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "log_id", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_id.806b206a3a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_id", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_id"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_id.806b206a3a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_id.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_id", "alias": "not_null_dfk_hero_updates_hero_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6121988, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_id", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_summoning_info_summonedtime.014ee3d7d0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "summoning_info_summonedtime", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_summoning_info_summonedtime"], "unique_id": "test.harmony.not_null_dfk_hero_updates_summoning_info_summonedtime.014ee3d7d0", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_summoning_info_summonedtime.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_summoning_info_summonedtime", "alias": "not_null_dfk_hero_updates_summoning_info_summonedtime", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_summoning_info_summonedtime.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.612919, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere summoning_info_summonedtime is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "summoning_info_summonedtime", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_summoning_info_nextsummontime.4f9c4e6309": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "summoning_info_nextsummontime", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_summoning_info_nextsummontime"], "unique_id": "test.harmony.not_null_dfk_hero_updates_summoning_info_nextsummontime.4f9c4e6309", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_summoning_info_nextsummontime.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_summoning_info_nextsummontime", "alias": "not_null_dfk_hero_updates_summoning_info_nextsummontime", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_summoning_info_nextsummontime.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6136389, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere summoning_info_nextsummontime is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "summoning_info_nextsummontime", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_summoning_info_summonerid.f22490372d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "summoning_info_summonerid", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_summoning_info_summonerid"], "unique_id": "test.harmony.not_null_dfk_hero_updates_summoning_info_summonerid.f22490372d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_summoning_info_summonerid.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_summoning_info_summonerid", "alias": "not_null_dfk_hero_updates_summoning_info_summonerid", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_summoning_info_summonerid.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.614356, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere summoning_info_summonerid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "summoning_info_summonerid", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_summoning_info_assistantid.df3ecd1be2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "summoning_info_assistantid", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_summoning_info_assistantid"], "unique_id": "test.harmony.not_null_dfk_hero_updates_summoning_info_assistantid.df3ecd1be2", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_summoning_info_assistantid.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_summoning_info_assistantid", "alias": "not_null_dfk_hero_updates_summoning_info_assistantid", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_summoning_info_assistantid.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.615194, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere summoning_info_assistantid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "summoning_info_assistantid", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_summoning_info_summons.3b741f449e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "summoning_info_summons", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_summoning_info_summons"], "unique_id": "test.harmony.not_null_dfk_hero_updates_summoning_info_summons.3b741f449e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_summoning_info_summons.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_summoning_info_summons", "alias": "not_null_dfk_hero_updates_summoning_info_summons", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_summoning_info_summons.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.615917, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere summoning_info_summons is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "summoning_info_summons", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_summoning_info_maxsummons.02ba30e162": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "summoning_info_maxsummons", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_summoning_info_maxsummons"], "unique_id": "test.harmony.not_null_dfk_hero_updates_summoning_info_maxsummons.02ba30e162", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_summoning_info_maxsummons.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_summoning_info_maxsummons", "alias": "not_null_dfk_hero_updates_summoning_info_maxsummons", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_summoning_info_maxsummons.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.61663, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere summoning_info_maxsummons is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "summoning_info_maxsummons", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_info_statgenes.378ac74eba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_info_statgenes", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_info_statgenes"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_info_statgenes.378ac74eba", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_info_statgenes.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_info_statgenes", "alias": "not_null_dfk_hero_updates_hero_info_statgenes", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_info_statgenes.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.617476, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_info_statgenes is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_info_statgenes", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_info_visualgenes.408ee79a50": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_info_visualgenes", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_info_visualgenes"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_info_visualgenes.408ee79a50", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_info_visualgenes.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_info_visualgenes", "alias": "not_null_dfk_hero_updates_hero_info_visualgenes", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_info_visualgenes.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.618199, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_info_visualgenes is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_info_visualgenes", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_info_rarity.f7584bce66": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_info_rarity", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_info_rarity"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_info_rarity.f7584bce66", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_info_rarity.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_info_rarity", "alias": "not_null_dfk_hero_updates_hero_info_rarity", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_info_rarity.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.618919, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_info_rarity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_info_rarity", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_info_shiny.edcc558f1c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_info_shiny", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_info_shiny"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_info_shiny.edcc558f1c", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_info_shiny.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_info_shiny", "alias": "not_null_dfk_hero_updates_hero_info_shiny", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_info_shiny.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.619638, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_info_shiny is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_info_shiny", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_info_generation.d99f46cb63": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_info_generation", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_info_generation"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_info_generation.d99f46cb63", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_info_generation.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_info_generation", "alias": "not_null_dfk_hero_updates_hero_info_generation", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_info_generation.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6204648, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_info_generation is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_info_generation", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_info_firstname.58498ff9e4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_info_firstname", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_info_firstname"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_info_firstname.58498ff9e4", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_info_firstname.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_info_firstname", "alias": "not_null_dfk_hero_updates_hero_info_firstname", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_info_firstname.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.621189, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_info_firstname is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_info_firstname", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_info_lastname.8d9ec5807a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_info_lastname", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_info_lastname"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_info_lastname.8d9ec5807a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_info_lastname.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_info_lastname", "alias": "not_null_dfk_hero_updates_hero_info_lastname", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_info_lastname.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.621909, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_info_lastname is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_info_lastname", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_info_shinystyle.3a5fe7028e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_info_shinystyle", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_info_shinystyle"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_info_shinystyle.3a5fe7028e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_info_shinystyle.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_info_shinystyle", "alias": "not_null_dfk_hero_updates_hero_info_shinystyle", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_info_shinystyle.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6228201, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_info_shinystyle is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_info_shinystyle", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_info_class.608d235cae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_info_class", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_info_class"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_info_class.608d235cae", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_info_class.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_info_class", "alias": "not_null_dfk_hero_updates_hero_info_class", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_info_class.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.62354, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_info_class is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_info_class", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_info_subclass.c1d4108382": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_info_subclass", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_info_subclass"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_info_subclass.c1d4108382", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_info_subclass.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_info_subclass", "alias": "not_null_dfk_hero_updates_hero_info_subclass", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_info_subclass.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.624259, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_info_subclass is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_info_subclass", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_state_staminafullat.19bd4c7531": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_state_staminafullat", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_state_staminafullat"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_state_staminafullat.19bd4c7531", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_state_staminafullat.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_state_staminafullat", "alias": "not_null_dfk_hero_updates_hero_state_staminafullat", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_state_staminafullat.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6249971, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_state_staminafullat is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_state_staminafullat", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_state_hpfullat.1a510462d5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_state_hpfullat", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_state_hpfullat"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_state_hpfullat.1a510462d5", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_state_hpfullat.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_state_hpfullat", "alias": "not_null_dfk_hero_updates_hero_state_hpfullat", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_state_hpfullat.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.625817, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_state_hpfullat is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_state_hpfullat", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_state_mpfullat.e3adfafadc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_state_mpfullat", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_state_mpfullat"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_state_mpfullat.e3adfafadc", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_state_mpfullat.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_state_mpfullat", "alias": "not_null_dfk_hero_updates_hero_state_mpfullat", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_state_mpfullat.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.626525, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_state_mpfullat is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_state_mpfullat", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_state_level.9a7dda4838": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_state_level", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_state_level"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_state_level.9a7dda4838", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_state_level.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_state_level", "alias": "not_null_dfk_hero_updates_hero_state_level", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_state_level.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.627241, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_state_level is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_state_level", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_state_xp.431cbf7c00": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_state_xp", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_state_xp"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_state_xp.431cbf7c00", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_state_xp.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_state_xp", "alias": "not_null_dfk_hero_updates_hero_state_xp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_state_xp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.628086, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_state_xp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_state_xp", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_state_currentquest.3e5968e41b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_state_currentquest", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_state_currentquest"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_state_currentquest.3e5968e41b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_state_currentquest.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_state_currentquest", "alias": "not_null_dfk_hero_updates_hero_state_currentquest", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_state_currentquest.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.628809, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_state_currentquest is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_state_currentquest", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_state_sp.5b5683c285": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_state_sp", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_state_sp"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_state_sp.5b5683c285", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_state_sp.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_state_sp", "alias": "not_null_dfk_hero_updates_hero_state_sp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_state_sp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.629529, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_state_sp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_state_sp", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_state_status.83f33d6965": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_state_status", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_state_status"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_state_status.83f33d6965", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_state_status.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_state_status", "alias": "not_null_dfk_hero_updates_hero_state_status", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_state_status.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.630254, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_state_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_state_status", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_stats_strength.420858698e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_stats_strength", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_stats_strength"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_stats_strength.420858698e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_stats_strength.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_stats_strength", "alias": "not_null_dfk_hero_updates_hero_stats_strength", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_stats_strength.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.631074, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_stats_strength is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_stats_strength", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_stats_intelligence.0b346639a5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_stats_intelligence", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_stats_intelligence"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_stats_intelligence.0b346639a5", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_stats_intelligence.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_stats_intelligence", "alias": "not_null_dfk_hero_updates_hero_stats_intelligence", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_stats_intelligence.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6317928, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_stats_intelligence is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_stats_intelligence", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_stats_wisdom.b22899144a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_stats_wisdom", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_stats_wisdom"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_stats_wisdom.b22899144a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_stats_wisdom.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_stats_wisdom", "alias": "not_null_dfk_hero_updates_hero_stats_wisdom", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_stats_wisdom.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6325, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_stats_wisdom is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_stats_wisdom", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_stats_luck.fa486fc10a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_stats_luck", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_stats_luck"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_stats_luck.fa486fc10a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_stats_luck.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_stats_luck", "alias": "not_null_dfk_hero_updates_hero_stats_luck", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_stats_luck.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6333451, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_stats_luck is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_stats_luck", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_stats_agility.3c50b6f002": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_stats_agility", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_stats_agility"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_stats_agility.3c50b6f002", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_stats_agility.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_stats_agility", "alias": "not_null_dfk_hero_updates_hero_stats_agility", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_stats_agility.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.634069, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_stats_agility is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_stats_agility", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_stats_vitality.39bee4d71b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_stats_vitality", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_stats_vitality"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_stats_vitality.39bee4d71b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_stats_vitality.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_stats_vitality", "alias": "not_null_dfk_hero_updates_hero_stats_vitality", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_stats_vitality.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.634788, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_stats_vitality is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_stats_vitality", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_stats_endurance.c6d90b953a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_stats_endurance", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_stats_endurance"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_stats_endurance.c6d90b953a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_stats_endurance.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_stats_endurance", "alias": "not_null_dfk_hero_updates_hero_stats_endurance", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_stats_endurance.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.635508, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_stats_endurance is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_stats_endurance", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_stats_dexterity.968ab5dc9f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_stats_dexterity", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_stats_dexterity"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_stats_dexterity.968ab5dc9f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_stats_dexterity.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_stats_dexterity", "alias": "not_null_dfk_hero_updates_hero_stats_dexterity", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_stats_dexterity.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.636319, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_stats_dexterity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_stats_dexterity", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_stats_hp.650ee449b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_stats_hp", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_stats_hp"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_stats_hp.650ee449b0", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_stats_hp.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_stats_hp", "alias": "not_null_dfk_hero_updates_hero_stats_hp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_stats_hp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.637038, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_stats_hp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_stats_hp", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_stats_mp.e377a9e808": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_stats_mp", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_stats_mp"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_stats_mp.e377a9e808", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_stats_mp.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_stats_mp", "alias": "not_null_dfk_hero_updates_hero_stats_mp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_stats_mp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.637749, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_stats_mp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_stats_mp", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_stats_stamina.0e28f15d14": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_stats_stamina", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_stats_stamina"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_stats_stamina.0e28f15d14", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_stats_stamina.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_stats_stamina", "alias": "not_null_dfk_hero_updates_hero_stats_stamina", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_stats_stamina.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.638588, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_stats_stamina is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_stats_stamina", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_strength.e636522ec5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_strength", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_strength"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_strength.e636522ec5", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_strength.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_strength", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_strength", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_strength.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.639311, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_strength is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_strength", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_intelligence.c0c7b4e8ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_intelligence", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_intelligence"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_intelligence.c0c7b4e8ef", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_intelligence.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_intelligence", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_intelligence", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_intelligence.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.640028, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_intelligence is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_intelligence", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_wisdom.e638b91e7e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_wisdom", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_wisdom"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_wisdom.e638b91e7e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_wisdom.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_wisdom", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_wisdom", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_wisdom.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6407459, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_wisdom is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_wisdom", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_luck.67fdc5d9fc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_luck", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_luck"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_luck.67fdc5d9fc", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_luck.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_luck", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_luck", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_luck.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6415749, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_luck is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_luck", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_agility.95eb68d12d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_agility", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_agility"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_agility.95eb68d12d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_agility.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_agility", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_agility", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_agility.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.642292, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_agility is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_agility", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_vitality.833a942c85": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_vitality", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_vitality"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_vitality.833a942c85", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_vitality.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_vitality", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_vitality", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_vitality.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.643008, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_vitality is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_vitality", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_endurance.3c3da2d64e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_endurance", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_endurance"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_endurance.3c3da2d64e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_endurance.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_endurance", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_endurance", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_endurance.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.643858, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_endurance is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_endurance", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_dexterity.37ea684305": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_dexterity", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_dexterity"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_dexterity.37ea684305", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_dexterity.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_dexterity", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_dexterity", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_dexterity.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.644578, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_dexterity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_dexterity", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hpsm.333f55e23d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_hpsm", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_hpsm"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hpsm.333f55e23d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_hpsm.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_hpsm", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_hpsm", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_hpsm.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6452968, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_hpsm is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_hpsm", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hprg.bb2f7e28d0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_hprg", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_hprg"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hprg.bb2f7e28d0", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_hprg.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_hprg", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_hprg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_hprg.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6460092, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_hprg is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_hprg", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hplg.b9753af52e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_hplg", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_hplg"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hplg.b9753af52e", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_hplg.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_hplg", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_hplg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_hplg.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6468291, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_hplg is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_hplg", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mpsm.ff48bffa5b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_mpsm", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_mpsm"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mpsm.ff48bffa5b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_mpsm.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_mpsm", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_mpsm", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_mpsm.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6475441, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_mpsm is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_mpsm", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mprg.84c957d14c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_mprg", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_mprg"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mprg.84c957d14c", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_mprg.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_mprg", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_mprg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_mprg.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.648258, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_mprg is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_mprg", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mplg.9311fd2515": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_primary_stat_growth_mplg", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_primary_stat_growth_mplg"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mplg.9311fd2515", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_primary_stat_growth_mplg.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_primary_stat_growth_mplg", "alias": "not_null_dfk_hero_updates_hero_primary_stat_growth_mplg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_primary_stat_growth_mplg.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.649102, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_primary_stat_growth_mplg is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_primary_stat_growth_mplg", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_strength.f698be1f0d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_strength", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_strength"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_strength.f698be1f0d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_strength.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_strength", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_strength", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_strength.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.649819, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_strength is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_strength", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_intelligence.4a0bd8fedc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_dfk_hero_updates_a553d77bbb61fa419fdf1eb445878b17\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_intelligence", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": "not_null_dfk_hero_updates_a553d77bbb61fa419fdf1eb445878b17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_intelligence"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_intelligence.4a0bd8fedc", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_a553d77bbb61fa419fdf1eb445878b17.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_intelligence", "alias": "not_null_dfk_hero_updates_a553d77bbb61fa419fdf1eb445878b17", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_a553d77bbb61fa419fdf1eb445878b17.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_dfk_hero_updates_a553d77bbb61fa419fdf1eb445878b17"}, "created_at": 1652754672.650542, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_intelligence is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_intelligence", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_wisdom.c77b6e7f75": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_wisdom", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_wisdom"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_wisdom.c77b6e7f75", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_wisdom.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_wisdom", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_wisdom", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_wisdom.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.651435, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_wisdom is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_wisdom", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_luck.85df403797": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_luck", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_luck"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_luck.85df403797", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_luck.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_luck", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_luck", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_luck.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6521542, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_luck is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_luck", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_agility.61f9e2c0ad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_agility", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_agility"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_agility.61f9e2c0ad", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_agility.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_agility", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_agility", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_agility.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6528761, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_agility is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_agility", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_vitality.e12340f529": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_vitality", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_vitality"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_vitality.e12340f529", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_vitality.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_vitality", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_vitality", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_vitality.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.653599, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_vitality is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_vitality", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_endurance.3936bfabaf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_endurance", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_endurance"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_endurance.3936bfabaf", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_endurance.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_endurance", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_endurance", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_endurance.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.654492, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_endurance is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_endurance", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_dexterity.5a4a4d002b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_dexterity", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_dexterity"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_dexterity.5a4a4d002b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_dexterity.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_dexterity", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_dexterity", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_dexterity.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.655215, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_dexterity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_dexterity", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hpsm.3519b0a108": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_hpsm", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_hpsm"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hpsm.3519b0a108", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_hpsm.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_hpsm", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_hpsm", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_hpsm.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.65593, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_hpsm is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_hpsm", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hprg.bd4afb8a71": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_hprg", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_hprg"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hprg.bd4afb8a71", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_hprg.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_hprg", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_hprg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_hprg.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.65676, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_hprg is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_hprg", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hplg.89204a4088": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_hplg", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_hplg"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hplg.89204a4088", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_hplg.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_hplg", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_hplg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_hplg.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6574888, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_hplg is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_hplg", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mpsm.9b791a152b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_mpsm", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_mpsm"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mpsm.9b791a152b", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_mpsm.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_mpsm", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_mpsm", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_mpsm.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.658209, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_mpsm is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_mpsm", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mprg.99bb003e4f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_mprg", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_mprg"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mprg.99bb003e4f", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_mprg.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_mprg", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_mprg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_mprg.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.658932, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_mprg is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_mprg", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mplg.6dcf7dd34a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_secondary_stat_growth_mplg", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_secondary_stat_growth_mplg"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mplg.6dcf7dd34a", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_secondary_stat_growth_mplg.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_secondary_stat_growth_mplg", "alias": "not_null_dfk_hero_updates_hero_secondary_stat_growth_mplg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_secondary_stat_growth_mplg.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6597571, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_secondary_stat_growth_mplg is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_secondary_stat_growth_mplg", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_professions_mining.6ebcec049d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_professions_mining", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_professions_mining"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_professions_mining.6ebcec049d", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_professions_mining.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_professions_mining", "alias": "not_null_dfk_hero_updates_hero_professions_mining", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_professions_mining.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.660465, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_professions_mining is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_professions_mining", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_professions_gardening.16ddc4e962": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_professions_gardening", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_professions_gardening"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_professions_gardening.16ddc4e962", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_professions_gardening.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_professions_gardening", "alias": "not_null_dfk_hero_updates_hero_professions_gardening", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_professions_gardening.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.661181, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_professions_gardening is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_professions_gardening", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_professions_foraging.13cbb9fba2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_professions_foraging", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_professions_foraging"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_professions_foraging.13cbb9fba2", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_professions_foraging.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_professions_foraging", "alias": "not_null_dfk_hero_updates_hero_professions_foraging", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_professions_foraging.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.6618948, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_professions_foraging is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_professions_foraging", "file_key_name": "models.dfk_hero_updates"}, "test.harmony.not_null_dfk_hero_updates_hero_professions_fishing.1e12aef556": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hero_professions_fishing", "model": "{{ get_where_subquery(ref('dfk_hero_updates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.harmony.dfk_hero_updates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HARMONY", "schema": "DEV_dbt_test__audit", "fqn": ["harmony", "dfk", "not_null_dfk_hero_updates_hero_professions_fishing"], "unique_id": "test.harmony.not_null_dfk_hero_updates_hero_professions_fishing.1e12aef556", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "not_null_dfk_hero_updates_hero_professions_fishing.sql", "original_file_path": "models/dfk/dfk_hero_updates.yaml", "name": "not_null_dfk_hero_updates_hero_professions_fishing", "alias": "not_null_dfk_hero_updates_hero_professions_fishing", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dfk_hero_updates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/harmony/models/dfk/dfk_hero_updates.yaml/not_null_dfk_hero_updates_hero_professions_fishing.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652754672.662722, "compiled_sql": "\n    \n    \n\nselect *\nfrom HARMONY.DEV.dfk_hero_updates\nwhere hero_professions_fishing is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hero_professions_fishing", "file_key_name": "models.dfk_hero_updates"}}, "sources": {"source.harmony.chainwalkers.harmony_blocks": {"fqn": ["harmony", "chainwalkers", "harmony_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.harmony.chainwalkers.harmony_blocks", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "harmony_blocks", "source_name": "chainwalkers", "source_description": "", "loader": "", "identifier": "harmony_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Blocks from the Harmony chain. Note always use the latest ingested at timestamp as duplicates can exist in this table!", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with `block_id` for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network. (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "header": {"name": "header", "description": "A json column containing the block's header information.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The time this row was ingested by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.harmony_blocks", "created_at": 1652754672.6631942}, "source.harmony.chainwalkers.harmony_txs": {"fqn": ["harmony", "chainwalkers", "harmony_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.harmony.chainwalkers.harmony_txs", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "harmony_txs", "source_name": "chainwalkers", "source_description": "", "loader": "", "identifier": "harmony_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Txs from the Harmony chain. Note always use the latest ingested at timestamp as duplicates can exist in this table!", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "Synonmous with transaction hash, a unique on chain identifier for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_block_index": {"name": "tx_block_index", "description": "The index of the transaction within the block. Starts at 0.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with `block_id` for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network. (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Harmony.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The time this row was ingested by Chainwalkers.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.harmony_txs", "created_at": 1652754672.66328}, "source.harmony.ingest.src_old_ant_ingest": {"fqn": ["harmony", "ingest", "src_old_ant_ingest"], "database": "ingest", "schema": "public", "unique_id": "source.harmony.ingest.src_old_ant_ingest", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "src_old_ant_ingest", "source_name": "ingest", "source_description": "", "loader": "", "identifier": "src_old_ant_ingest", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Ingest from ant - when it was directly ingested into the harmony db", "columns": {"ingest_timestamp": {"name": "ingest_timestamp", "description": "What time this infomations was ingested", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingest_data": {"name": "ingest_data", "description": "the json that was ingested", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ingest.public.src_old_ant_ingest", "created_at": 1652754672.663334}, "source.harmony.ingest.src_old_tokenprice_coingecko_mr": {"fqn": ["harmony", "ingest", "src_old_tokenprice_coingecko_mr"], "database": "ingest", "schema": "public", "unique_id": "source.harmony.ingest.src_old_tokenprice_coingecko_mr", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "src_old_tokenprice_coingecko_mr", "source_name": "ingest", "source_description": "", "loader": "", "identifier": "src_old_tokenprice_coingecko_mr", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Token Prices in Harmony Chain from CoinGecko - when it was directly ingested into the harmony db", "columns": {"address": {"name": "address", "description": "token_address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd": {"name": "usd", "description": "USD Price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_24h_change": {"name": "usd_24h_change", "description": "USD Price Changed in the last 24 Hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_24h_vol": {"name": "usd_24h_vol", "description": "24 Hour Volume Traded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_market_cap": {"name": "usd_market_cap", "description": "Market Cap of the coin in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "When the data was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ingest.public.src_old_tokenprice_coingecko_mr", "created_at": 1652754672.663389}, "source.harmony.ingest.ant_ingest": {"fqn": ["harmony", "ingest", "ant_ingest"], "database": "ingest", "schema": "public", "unique_id": "source.harmony.ingest.ant_ingest", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "ant_ingest", "source_name": "ingest", "source_description": "", "loader": "", "identifier": "ant_ingest", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Ingest from ant", "columns": {"ingest_timestamp": {"name": "ingest_timestamp", "description": "What time this infomations was ingested", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingest_data": {"name": "ingest_data", "description": "The json that was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ingest.public.ant_ingest", "created_at": 1652754672.6634371}, "source.harmony.ingest.src_token_usd_prices": {"fqn": ["harmony", "ingest", "src_token_usd_prices"], "database": "ingest", "schema": "public", "unique_id": "source.harmony.ingest.src_token_usd_prices", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "src_token_usd_prices", "source_name": "ingest", "source_description": "", "loader": "", "identifier": "src_token_usd_prices", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Token Prices in Harmony Chain from CoinGecko", "columns": {"address": {"name": "address", "description": "token_address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd": {"name": "usd", "description": "USD Price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_24h_change": {"name": "usd_24h_change", "description": "USD Price Changed in the last 24 Hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_24h_vol": {"name": "usd_24h_vol", "description": "24 Hour Volume Traded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usd_market_cap": {"name": "usd_market_cap", "description": "Market Cap of the coin in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "When the data was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ingest.public.src_token_usd_prices", "created_at": 1652754672.663488}}, "macros": {"macro.harmony.deduped_blocks": {"unique_id": "macro.harmony.deduped_blocks", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "macros/dedupe_utils.sql", "original_file_path": "macros/dedupe_utils.sql", "name": "deduped_blocks", "macro_sql": "{% macro deduped_blocks(table_name) -%}\n    (\n        select\n            *\n        from {{ source(\"chainwalkers\", table_name) }}\n        qualify row_number() over (partition by block_id order by ingested_at desc) = 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.392799}, "macro.harmony.deduped_txs": {"unique_id": "macro.harmony.deduped_txs", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "macros/dedupe_utils.sql", "original_file_path": "macros/dedupe_utils.sql", "name": "deduped_txs", "macro_sql": "{% macro deduped_txs(table_name) -%}\n    (\n        select\n            *\n        from {{ source(\"chainwalkers\", table_name) }}\n        qualify row_number() over (partition by tx_id order by ingested_at desc) = 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.3929632}, "macro.harmony.incremental_load_filter": {"unique_id": "macro.harmony.incremental_load_filter", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "macros/incremental_utils.sql", "original_file_path": "macros/incremental_utils.sql", "name": "incremental_load_filter", "macro_sql": "{% macro incremental_load_filter(time_col) -%}\n    -- dbt makes it easy to query your target table by using the \"{{ this }}\" variable.\n    {% if is_incremental() %}\n      {{ time_col }} > (select max({{ time_col }}) from {{ this }})\n    {%- else -%}\n      true\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.393693}, "macro.harmony.incremental_load_filter_2": {"unique_id": "macro.harmony.incremental_load_filter_2", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "macros/incremental_utils.sql", "original_file_path": "macros/incremental_utils.sql", "name": "incremental_load_filter_2", "macro_sql": "{% macro incremental_load_filter_2(time_col_other, time_col_this) -%}\n    -- dbt makes it easy to query your target table by using the \"{{ this }}\" variable.\n    {% if is_incremental() %}\n      {{ time_col_other }} > (select max({{ time_col_this }}) from {{ this }})\n    {%- else -%}\n      true\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.393945}, "macro.harmony.incremental_last_x_days": {"unique_id": "macro.harmony.incremental_last_x_days", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "macros/incremental_utils.sql", "original_file_path": "macros/incremental_utils.sql", "name": "incremental_last_x_days", "macro_sql": "{% macro incremental_last_x_days(time_col, time_in_days) -%}\n    {% if is_incremental() %}\n        {{ time_col }} >= current_date() - interval '{{ time_in_days }} day'\n    {% else %}\n        true\n    {% endif %}  \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.39414}, "macro.harmony.grant_data_share_statements": {"unique_id": "macro.harmony.grant_data_share_statements", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "macros/data_share.sql", "original_file_path": "macros/data_share.sql", "name": "grant_data_share_statements", "macro_sql": "{% macro grant_data_share_statements() %}\n  {% if target.schema == 'PROD' %}\n    GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"BLOCKS\" TO SHARE \"HARMONY_MDAO\";\n    GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"LOGS\" TO SHARE \"HARMONY_MDAO\";\n    GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"SWAPS\" TO SHARE \"HARMONY_MDAO\";\n    GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"TRANSFERS\" TO SHARE \"HARMONY_MDAO\";\n    GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"TXS\" TO SHARE \"HARMONY_MDAO\";\n    GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"LIQUIDITY_POOLS\" TO SHARE \"HARMONY_MDAO\";\n    GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"TOKENS\" TO SHARE \"HARMONY_MDAO\";\n\n    GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"DFK_HERO_UPDATES\" TO SHARE \"HARMONY_MDAO\";\n    GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"DFK_QUEST_REWARDS\" TO SHARE \"HARMONY_MDAO\";\n\n    --GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"DFK_HERO_SUMMONS\" TO SHARE \"HARMONY_MDAO\";\n    --GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"DFK_HERO_SALES\" TO SHARE \"HARMONY_MDAO\";\n\n    GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"TRANQUIL_TXS\" TO SHARE \"HARMONY_MDAO\";\n\n    GRANT SELECT ON TABLE \"HARMONY\".\"PROD\".\"BTC_BRIDGE\" TO SHARE \"HARMONY_MDAO\";\n  {% else %}\n    select 1; -- hooks will error if they don't have valid SQL in them, this handles that!\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.394561}, "macro.harmony.create_js_onetohex": {"unique_id": "macro.harmony.create_js_onetohex", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "macros/udfs/func_onetoeth.sql", "original_file_path": "macros/udfs/func_onetoeth.sql", "name": "create_js_onetohex", "macro_sql": "{% macro create_js_onetohex() -%}\ncreate or replace function {{ target.database }}.{{ target.schema }}.js_onetohex (s string)\nreturns string\nlanguage javascript\nas $$\nconst ALPHABET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\nconst ALPHABET_MAP = {};\nfor (let z = 0; z < ALPHABET.length; z++) {\n    const x = ALPHABET.charAt(z);\n    ALPHABET_MAP[x] = z;\n}\nfunction polymodStep(pre) {\n    const b = pre >> 25;\n    return (((pre & 0x1ffffff) << 5) ^\n        (-((b >> 0) & 1) & 0x3b6a57b2) ^\n        (-((b >> 1) & 1) & 0x26508e6d) ^\n        (-((b >> 2) & 1) & 0x1ea119fa) ^\n        (-((b >> 3) & 1) & 0x3d4233dd) ^\n        (-((b >> 4) & 1) & 0x2a1462b3));\n}\nfunction prefixChk(prefix) {\n    let chk = 1;\n    for (let i = 0; i < prefix.length; ++i) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            return \"Invalid prefix (\" + prefix + \")\";\n        chk = polymodStep(chk) ^ (c >> 5);\n    }\n    chk = polymodStep(chk);\n    for (let i = 0; i < prefix.length; ++i) {\n        const v = prefix.charCodeAt(i);\n        chk = polymodStep(chk) ^ (v & 0x1f);\n    }\n    return chk;\n}\nfunction convert(data, inBits, outBits, pad) {\n    let value = 0;\n    let bits = 0;\n    const maxV = (1 << outBits) - 1;\n    const result = [];\n    for (let i = 0; i < data.length; ++i) {\n        value = (value << inBits) | data[i];\n        bits += inBits;\n        while (bits >= outBits) {\n            bits -= outBits;\n            result.push((value >> bits) & maxV);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            result.push((value << (outBits - bits)) & maxV);\n        }\n    }\n    else {\n        if (bits >= inBits)\n            return \"Excess padding\";\n        if ((value << (outBits - bits)) & maxV)\n            return \"Non-zero padding\";\n    }\n    return result;\n}\nfunction toWords(bytes) {\n    return convert(bytes, 8, 5, true);\n}\nfunction fromWordsUnsafe(words) {\n    const res = convert(words, 5, 8, false);\n    if (Array.isArray(res))\n        return res;\n}\nfunction fromWords(words) {\n    const res = convert(words, 5, 8, false);\n    if (Array.isArray(res))\n        return res;\n    throw new Error(res);\n}\nfunction getLibraryFromEncoding(encoding) {\n    let ENCODING_CONST;\n    if (encoding === \"bech32\") {\n        ENCODING_CONST = 1;\n    }\n    else {\n        ENCODING_CONST = 0x2bc830a3;\n    }\n    function encode(prefix, words, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (prefix.length + 7 + words.length > LIMIT)\n            throw new TypeError(\"Exceeds length limit\");\n        prefix = prefix.toLowerCase();\n        // determine chk mod\n        let chk = prefixChk(prefix);\n        if (typeof chk === \"string\")\n            throw new Error(chk);\n        let result = prefix + \"1\";\n        for (let i = 0; i < words.length; ++i) {\n            const x = words[i];\n            if (x >> 5 !== 0)\n                throw new Error(\"Non 5-bit word\");\n            chk = polymodStep(chk) ^ x;\n            result += ALPHABET.charAt(x);\n        }\n        for (let i = 0; i < 6; ++i) {\n            chk = polymodStep(chk);\n        }\n        chk ^= ENCODING_CONST;\n        for (let i = 0; i < 6; ++i) {\n            const v = (chk >> ((5 - i) * 5)) & 0x1f;\n            result += ALPHABET.charAt(v);\n        }\n        return result;\n    }\n    function __decode(str, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (str.length < 8)\n            return str + \" too short\";\n        if (str.length > LIMIT)\n            return \"Exceeds length limit\";\n        // don\"t allow mixed case\n        const lowered = str.toLowerCase();\n        const uppered = str.toUpperCase();\n        if (str !== lowered && str !== uppered)\n            return \"Mixed-case string \" + str;\n        str = lowered;\n        const split = str.lastIndexOf(\"1\");\n        if (split === -1)\n            return \"No separator character for \" + str;\n        if (split === 0)\n            return \"Missing prefix for \" + str;\n        const prefix = str.slice(0, split);\n        const wordChars = str.slice(split + 1);\n        if (wordChars.length < 6)\n            return \"Data too short\";\n        let chk = prefixChk(prefix);\n        if (typeof chk === \"string\")\n            return chk;\n        const words = [];\n        for (let i = 0; i < wordChars.length; ++i) {\n            const c = wordChars.charAt(i);\n            const v = ALPHABET_MAP[c];\n            if (v === undefined)\n                return \"Unknown character \" + c;\n            chk = polymodStep(chk) ^ v;\n            // not in the checksum?\n            if (i + 6 >= wordChars.length)\n                continue;\n            words.push(v);\n        }\n        if (chk !== ENCODING_CONST)\n            return \"Invalid checksum for \" + str;\n        return { prefix, words };\n    }\n    function decodeUnsafe(str, LIMIT) {\n        const res = __decode(str, LIMIT);\n        if (typeof res === \"object\")\n            return res;\n    }\n    function decode(str, LIMIT) {\n        const res = __decode(str, LIMIT);\n        if (typeof res === \"object\")\n            return res;\n        throw new Error(res);\n    }\n    return {\n        decodeUnsafe,\n        decode,\n        encode,\n        toWords,\n        fromWordsUnsafe,\n        fromWords,\n    };\n}\nconst { prefix, words } = getLibraryFromEncoding(\"bech32\").decode(S);\nconst results = fromWords(words);\nreturn \"0x\"+results.map(a=>{return a.toString(16).padStart(2,\"0\")}).join(\"\");\n$$;\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.395948}, "macro.harmony.create_java_hextoint": {"unique_id": "macro.harmony.create_java_hextoint", "package_name": "harmony", "root_path": "/Users/jackforgash/gh/harmony_dbt", "path": "macros/udfs/func_hextoint.sql", "original_file_path": "macros/udfs/func_hextoint.sql", "name": "create_java_hextoint", "macro_sql": "{% macro create_java_hextoint() -%}\ncreate or replace function {{ target.database }}.{{ target.schema }}.java_hextoint (s string)\nreturns string\nlanguage java\nhandler='MyClass.x'\nas $$\nimport java.math.*;\nclass MyClass {\n  public static String x(String s)\n  {\n    return new BigInteger(s,16).toString();\n  }\n}\n$$;\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.396223}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.3971379}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.408261}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.408579}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.409012}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} \n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n    \n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.40975}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.410561}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.411089}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4115798}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.411904}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.411979}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.41215}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.412247}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.412427}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4126751}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4128692}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.413376}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.413557}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.414021}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.414495}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4152372}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.415442}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.41568}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.416897}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.417175}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.417428}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.419574}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.419861}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.420442}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.421817}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.423122}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.423649}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.425659}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.426074}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4271412}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4273338}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4274728}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.427613}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4277482}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.428153}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.428443}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.428736}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.429198}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.429461}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.432624}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4327848}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.432996}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4331388}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.433229}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4339788}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.43414}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4343061}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.435255}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4370618}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.440105}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.440382}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.440545}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.440626}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.440824}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.441664}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.441849}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4420888}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4425092}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.448191}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4502258}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4507232}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4510221}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4514298}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4517992}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.452611}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4531462}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.453745}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.456413}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4575338}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.457768}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.458185}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.458442}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4590561}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.45972}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.464444}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4690108}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.470207}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.471374}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.472076}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4756842}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4761531}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4763331}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.476529}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.476932}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4803772}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.48073}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.480949}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.482152}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.482549}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.482708}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.482888}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4831429}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.485887}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.489701}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4905758}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.490807}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.491267}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.491411}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.491519}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.491673}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4917839}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.492248}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.492486}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4936671}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.494093}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.49431}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4948559}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4951072}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.495383}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4958131}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.49605}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.496437}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.496665}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.49696}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4975512}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.498647}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.4992042}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.499489}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.501174}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5023942}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.503128}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.503354}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.503776}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5039518}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5041122}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.504286}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.504767}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.504897}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5050502}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.505436}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.506969}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.507267}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.507443}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.507645}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.507821}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5079732}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.508168}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.508438}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.508683}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.509404}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.509629}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.509813}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.51031}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.510449}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5106728}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.511082}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.511755}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.511917}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.512116}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.512274}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.512536}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5130088}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.514389}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5146399}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.514822}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.514969}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.515141}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.515379}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.515579}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.515937}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5161228}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.516278}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.51793}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.518081}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.518382}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.51856}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5188868}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.519114}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5197}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.519948}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.52071}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5212522}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5214798}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.521781}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.522055}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.522362}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.522431}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5225}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.522878}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5230348}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.523328}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.523511}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.524193}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.524266}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.524336}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5244002}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.524467}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.52462}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5246878}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5247538}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.524817}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.524971}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.525038}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.525105}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.525258}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.525324}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.525388}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.525538}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5256052}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.525669}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.525873}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.525943}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5260081}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.526498}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.52684}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5269408}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.527036}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.527621}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5277839}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5279381}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.52809}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5282829}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5285802}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.52865}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.528717}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.529085}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.52922}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.529349}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5294771}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5300338}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.530166}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.530316}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5305269}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5326772}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5330718}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.533345}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5337229}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.534632}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.537055}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5372171}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.537368}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.539086}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.539283}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.53969}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.539823}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.539943}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.540065}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.540399}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.540528}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.540648}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5409951}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.54113}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.54125}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.541752}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.541852}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.541944}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5422761}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.542376}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.542474}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.542878}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.543006}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5431309}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.543481}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.543581}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.544142}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.54425}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.544319}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.544385}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.544539}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.544644}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.544787}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.544897}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.545022}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5463989}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.546855}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.547304}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.547484}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.547852}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.547949}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.548049}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.548144}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.548715}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.549033}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.549175}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5495548}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5497248}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.550186}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5503411}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5505111}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.550883}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.551009}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5511339}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.551983}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5574331}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5579321}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.558243}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.558719}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.563678}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.564109}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.564579}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.565088}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.565727}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.566087}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.566398}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.566956}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.567177}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.567602}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.567892}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5685601}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.568884}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.569319}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.56964}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5699992}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.570166}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.570782}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5712981}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.571859}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5722308}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5726762}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5728378}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5732028}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5733728}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.573992}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.574615}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5751948}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.575528}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.576023}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5763059}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.57676}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5772622}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.577929}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5785851}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5790322}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.579193}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.579938}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.580801}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5837471}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.585174}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.585494}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.585653}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.585978}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.586168}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.586467}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5866308}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.587137}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.587837}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.588415}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.588641}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.58899}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.589345}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.589845}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5905302}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.591362}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.592179}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5925848}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.592774}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.593285}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.593984}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.594815}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.595264}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.595542}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.596168}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {%- for col in dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.5969841}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.598651}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.600684}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.602873}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.60559}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.605939}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.606178}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, group_by, order_by=none, relation_alias=none) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, group_by, order_by=order_by, relation_alias=relation_alias)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6068811}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, group_by, order_by=none, relation_alias=none) -%}\n\n    select\n        {{ dbt_utils.star(relation, relation_alias='deduped') | indent }}\n    from (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ group_by }}\n                {% if order_by is not none -%}\n                order by {{ order_by }}\n                {%- endif %}\n            ) as rn\n        from {{ relation if relation_alias is none else relation_alias }} as _inner\n    ) as deduped\n    where deduped.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.607268}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, group_by, order_by=none, relation_alias=none) -%}\n\n    select\n        {{ dbt_utils.star(relation, relation_alias='deduped') | indent }}\n    from (\n        select\n            array_agg (\n                original\n                {% if order_by is not none -%}\n                order by {{ order_by }}\n                {%- endif %}\n                limit 1\n            )[offset(0)] as deduped\n        from {{ relation if relation_alias is none else relation_alias }} as original\n        group by {{ group_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6076539}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.608261}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.609173}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.609609}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6098838}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.610262}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6105878}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6120472}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.612315}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.613025}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.613579}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.614552}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.615927}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.616981}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6178088}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.618309}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6190238}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.61945}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6200268}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6205199}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6206021}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.620682}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.62076}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6217742}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.622046}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.622614}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.623467}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6314292}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.633676}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.636001}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.63703}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.637762}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.638426}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.64005}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.640609}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.641535}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.641811}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6420531}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.642358}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.642594}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.643224}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.643422}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.643615}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.643811}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.644007}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.644355}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.644489}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.644619}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6447182}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6450748}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.645581}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.645725}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6460102}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6462662}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.646785}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6469371}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.647071}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.647201}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.64733}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.647787}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.648025}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6482759}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.648587}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.648812}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.64904}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6493921}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.649528}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6496582}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6498392}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6510332}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.651285}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.651538}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.651986}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.652359}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.652782}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6531231}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6532512}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.653379}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.653776}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6540349}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.654212}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.654479}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.656107}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.656391}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.656781}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.657053}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6574678}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6578822}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6583738}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.658577}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6587121}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6588402}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.659256}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.659754}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6599538}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.660146}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6603389}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.660537}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.660845}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.661298}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.661479}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.661619}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6627688}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.663098}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.663244}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.663399}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.663771}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.663954}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6643682}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.664928}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6651142}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6652522}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.665387}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.665525}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.666025}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.666163}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.666358}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.666556}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6668348}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.667117}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6698549}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6707242}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6730618}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6740842}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6756501}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.676394}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.677017}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.67776}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.679287}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.681969}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.683435}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.688079}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.688891}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.689968}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.690321}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.691958}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6921751}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.692557}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.692752}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.692915}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6939058}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.695463}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6963809}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.6968188}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.699015}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.699397}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\n    {% if recover_partitions|length > 0 %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.spark__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.700565}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {% set ddl %}\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n    {%- endif -%}\n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.701088}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7014332}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7017322}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.701857}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7021592}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.702291}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.702605}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.702736}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.707788}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.708111}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7082329}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.708519}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.708631}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7090392}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.70911}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.709177}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7092428}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.709394}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.709462}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.709528}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.709594}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.710197}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.710376}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7105532}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.710699}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.71084}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.711168}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.711265}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.71136}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.711515}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7118561}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.711925}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7119942}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.712069}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7121348}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7122}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.71244}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7129018}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.713105}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.713307}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.714443}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.715168}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.716089}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.716379}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7169821}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7217522}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7223492}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.722815}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7240698}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.724373}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.724471}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.725044}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.726063}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.726689}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.727241}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.728044}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.728666}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.729653}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.730643}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.731654}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.731957}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.732519}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7336059}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.734208}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.73536}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7357912}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.736971}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.738656}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max({{ timestamp_column }}) as latest_timestamp_column\n    from\n        {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        latest_timestamp_column < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.dateadd", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.73918}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7403588}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.741342}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7416189}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.742351}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.742715}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7439091}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.744334}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.74569}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.746141}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7466502}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.74705}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7480261}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.748899}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7497878}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.751173}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.751662}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7519622}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.752733}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.753906}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.754962}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.755239}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7556832}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.756165}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7569642}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.757781}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7586508}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.759475}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7603421}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.761219}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.76278}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.763571}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.764462}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.765116}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.765919}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.767234}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.76761}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7684171}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.769223}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.769892}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.770776}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.771543}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.775369}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7786088}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.779129}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    ),\n    {%- if take_diffs %}\n    grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.780222}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.781148}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.781663}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.783403}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.78468}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.787311}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.788215}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7888482}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.7895439}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/harmony_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652754671.790897}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.harmony.metric_gas_used_count": ["model.harmony.blocks", "model.harmony.blocks", "model.harmony.blocks"], "model.harmony.metric_transactions_count": ["model.harmony.txs", "model.harmony.txs", "model.harmony.txs"], "model.harmony.metric_miner_count": ["model.harmony.blocks", "model.harmony.blocks", "model.harmony.blocks"], "model.harmony.metric_unique_users_count": ["model.harmony.txs"], "model.harmony.metric_erc20_transfers_count": ["model.harmony.transfers", "model.harmony.transfers", "model.harmony.transfers"], "model.harmony.stg_tokenprice_from_swaps": ["model.harmony.swaps", "model.harmony.tokens", "model.harmony.tokens", "seed.harmony.harmony_stable_tokens"], "model.harmony.stg_txs": ["source.harmony.chainwalkers.harmony_txs"], "model.harmony.stg_delegators": ["model.harmony.stg_ant_ingest"], "model.harmony.stg_blocks": ["source.harmony.chainwalkers.harmony_blocks"], "model.harmony.stg_ant_ingest": ["source.harmony.ingest.ant_ingest", "source.harmony.ingest.src_old_ant_ingest"], "model.harmony.sushiswap_lp_actions": ["model.harmony.liquidity_pools", "model.harmony.logs", "model.harmony.tokenprices", "model.harmony.tokens", "model.harmony.txs"], "model.harmony.swaps": ["model.harmony.liquidity_pools", "model.harmony.logs", "model.harmony.tokens", "model.harmony.tokens"], "model.harmony.validators": ["model.harmony.stg_delegators"], "model.harmony.blocks": ["model.harmony.stg_blocks"], "model.harmony.liquidity_pools": ["model.harmony.logs", "model.harmony.tokens", "model.harmony.tokens", "seed.harmony.backfill_pools_data", "seed.harmony.dfk_dex_lp_labels", "seed.harmony.dfk_dex_lp_labels"], "model.harmony.tokens": ["seed.harmony.backfill_tokens_data", "seed.harmony.dfk_tokens", "seed.harmony.dfk_tokens", "seed.harmony.harmony_explorer_tokens"], "model.harmony.logs": ["model.harmony.stg_txs"], "model.harmony.transfers": ["model.harmony.logs"], "model.harmony.txs": ["model.harmony.stg_txs"], "model.harmony.btc_bridge": ["model.harmony.logs", "model.harmony.transfers"], "model.harmony.tranquil_daily_supply_borrow": ["model.harmony.logs", "model.harmony.tranquil_markets_tokenprice", "model.harmony.tranquil_txs", "seed.harmony.tranquil_market_labels"], "model.harmony.tranquil_markets_tokenprice": ["model.harmony.tokenprice_btc", "model.harmony.tokenprice_btc", "model.harmony.tokenprice_eth", "model.harmony.tokenprice_one", "model.harmony.tokenprice_stone", "model.harmony.tokenprice_usd", "model.harmony.tokenprice_usd", "model.harmony.tokenprice_usd"], "model.harmony.tranquil_txs": ["model.harmony.tranquil_markets_tokenprice", "seed.harmony.tranquil_market_labels"], "model.harmony.tokenprice_gaiatear": ["model.harmony.logs", "model.harmony.tokenprice_jewel"], "model.harmony.tokenprice_shvasrune": ["model.harmony.logs", "model.harmony.tokenprice_jewel"], "model.harmony.tokenprice_eth": ["model.harmony.logs", "model.harmony.tokenprice_jewel"], "model.harmony.tokenprice_stone": ["model.harmony.logs", "model.harmony.tokenprice_one"], "model.harmony.tokenprice_usd": [], "model.harmony.tokenprice_dfkgold": ["model.harmony.logs", "model.harmony.tokenprice_jewel"], "model.harmony.tokenprice_one": ["model.harmony.logs", "model.harmony.tokenprice_jewel"], "model.harmony.tokenprice_jewel": ["model.harmony.logs"], "model.harmony.tokenprices": ["model.harmony.stg_tokenprice_from_swaps"], "model.harmony.tokenprice_btc": ["model.harmony.logs", "model.harmony.tokenprice_jewel"], "model.harmony.dfk_seed_harvests": ["model.harmony.logs", "model.harmony.txs"], "model.harmony.dfk_potions_crafted": ["model.harmony.txs"], "model.harmony.dfk_bank_transactions": ["model.harmony.logs", "model.harmony.txs"], "model.harmony.dfk_quest_rewards": ["model.harmony.logs", "model.harmony.tokenprice_dfkgold", "model.harmony.tokenprice_gaiatear", "model.harmony.tokenprice_jewel", "model.harmony.tokenprice_shvasrune", "model.harmony.tokens", "model.harmony.txs", "seed.harmony.dfk_item_to_gold"], "model.harmony.dfk_hero_summons": ["model.harmony.logs", "model.harmony.txs"], "model.harmony.dfk_hero_sales": ["model.harmony.logs", "model.harmony.logs", "model.harmony.tokenprice_jewel"], "model.harmony.dfk_hero_rental": ["model.harmony.logs", "model.harmony.tokenprice_jewel", "model.harmony.txs"], "model.harmony.dfk_item_transactions": ["model.harmony.logs", "model.harmony.txs"], "model.harmony.dfk_hero_updates": ["model.harmony.logs"], "model.harmony.dfk_seed_liquidity_actions": ["model.harmony.liquidity_pools", "model.harmony.logs", "model.harmony.tokens", "model.harmony.txs"], "model.harmony.viperswap_lp_actions": ["model.harmony.liquidity_pools", "model.harmony.logs", "model.harmony.tokenprices", "model.harmony.tokens", "model.harmony.txs"], "seed.harmony.dfk_tokens": [], "seed.harmony.dfk_dex_lp_labels": [], "seed.harmony.backfill_pools_data": [], "seed.harmony.harmony_explorer_tokens": [], "seed.harmony.harmony_stable_tokens": [], "seed.harmony.backfill_tokens_data": [], "seed.harmony.tranquil_market_labels": [], "seed.harmony.dfk_item_to_gold": [], "test.harmony.not_null_metric_gas_used_count_metric_date.4a0eb3c505": ["model.harmony.metric_gas_used_count"], "test.harmony.not_null_metric_gas_used_count_metric_period.452eb8b3d7": ["model.harmony.metric_gas_used_count"], "test.harmony.not_null_metric_gas_used_count_gas_total.ea230e6e01": ["model.harmony.metric_gas_used_count"], "test.harmony.not_null_metric_transactions_count_metric_date.a0ba3ef0a1": ["model.harmony.metric_transactions_count"], "test.harmony.not_null_metric_transactions_count_metric_period.5c51be1b98": ["model.harmony.metric_transactions_count"], "test.harmony.not_null_metric_transactions_count_txs_count.4e26fab0f3": ["model.harmony.metric_transactions_count"], "test.harmony.not_null_metric_miner_count_metric_date.c62b8a3b14": ["model.harmony.metric_miner_count"], "test.harmony.not_null_metric_miner_count_metric_period.0c3abeb408": ["model.harmony.metric_miner_count"], "test.harmony.not_null_metric_miner_count_miner_count.9d6e2fb19b": ["model.harmony.metric_miner_count"], "test.harmony.not_null_metric_unique_users_count_metric_date.8e870921c3": ["model.harmony.metric_unique_users_count"], "test.harmony.not_null_metric_unique_users_count_metric_period.0420fc3861": ["model.harmony.metric_unique_users_count"], "test.harmony.not_null_metric_unique_users_count_unique_users_count.fc29ed7470": ["model.harmony.metric_unique_users_count"], "test.harmony.not_null_metric_unique_users_count_unique_users_cumulative.5a0421d0e6": ["model.harmony.metric_unique_users_count"], "test.harmony.not_null_metric_erc20_transfers_count_metric_date.d92fe99fd7": ["model.harmony.metric_erc20_transfers_count"], "test.harmony.not_null_metric_erc20_transfers_count_metric_period.76b6cff96a": ["model.harmony.metric_erc20_transfers_count"], "test.harmony.not_null_metric_erc20_transfers_count_transfers_count.929d391ccb": ["model.harmony.metric_erc20_transfers_count"], "test.harmony.not_null_stg_txs_record_id.cde613d2f1": ["model.harmony.stg_txs"], "test.harmony.not_null_stg_txs_tx_id.6ca0194e5a": ["model.harmony.stg_txs"], "test.harmony.not_null_stg_txs_tx_block_index.5edea4684a": ["model.harmony.stg_txs"], "test.harmony.not_null_stg_txs_offset_id.ded9486e64": ["model.harmony.stg_txs"], "test.harmony.not_null_stg_txs_block_id.705b788dc6": ["model.harmony.stg_txs"], "test.harmony.not_null_stg_txs_block_timestamp.0eae229ba1": ["model.harmony.stg_txs"], "test.harmony.not_null_stg_txs_network.89f4d31e91": ["model.harmony.stg_txs"], "test.harmony.not_null_stg_txs_chain_id.fdb1c9956d": ["model.harmony.stg_txs"], "test.harmony.not_null_stg_txs_ingested_at.ad55bb9e47": ["model.harmony.stg_txs"], "test.harmony.not_null_stg_delegators_ingest_timestamp.5c02b89faf": ["model.harmony.stg_delegators"], "test.harmony.not_null_stg_delegators_day_date.defe482aef": ["model.harmony.stg_delegators"], "test.harmony.not_null_stg_delegators_validator_address.f3f0e33492": ["model.harmony.stg_delegators"], "test.harmony.not_null_stg_delegators_validator_identity.55aed20cd9": ["model.harmony.stg_delegators"], "test.harmony.not_null_stg_delegators_delegations.abcb6ce8fd": ["model.harmony.stg_delegators"], "test.harmony.not_null_stg_delegators_total_delegation.5010d275b4": ["model.harmony.stg_delegators"], "test.harmony.not_null_stg_delegators_total_delegator_count.7cfe837d1d": ["model.harmony.stg_delegators"], "test.harmony.not_null_stg_tokenprice_from_swaps_block_date.db204690a0": ["model.harmony.stg_tokenprice_from_swaps"], "test.harmony.not_null_stg_tokenprice_from_swaps_token_address.a09b5b4dcb": ["model.harmony.stg_tokenprice_from_swaps"], "test.harmony.not_null_stg_tokenprice_from_swaps_token_symbol.07ecb6a41e": ["model.harmony.stg_tokenprice_from_swaps"], "test.harmony.not_null_stg_tokenprice_from_swaps_usd_price.ea7453ba8b": ["model.harmony.stg_tokenprice_from_swaps"], "test.harmony.not_null_stg_tokenprice_from_swaps_usd_volume.a6cd8a6d28": ["model.harmony.stg_tokenprice_from_swaps"], "test.harmony.not_null_stg_tokenprice_from_swaps_token_volume.a99dbe42d3": ["model.harmony.stg_tokenprice_from_swaps"], "test.harmony.not_null_stg_tokenprice_from_swaps_pair_token_for_price.7c12c493e9": ["model.harmony.stg_tokenprice_from_swaps"], "test.harmony.not_null_stg_tokenprice_from_swaps_pair_symbol_for_price.505c85c86a": ["model.harmony.stg_tokenprice_from_swaps"], "test.harmony.not_null_stg_tokenprice_from_swaps_volume_for_price.9994df39d5": ["model.harmony.stg_tokenprice_from_swaps"], "test.harmony.not_null_stg_tokenprice_from_swaps_key.a0c3769066": ["model.harmony.stg_tokenprice_from_swaps"], "test.harmony.unique_stg_tokenprice_from_swaps_key.5c3ec7c700": ["model.harmony.stg_tokenprice_from_swaps"], "test.harmony.not_null_stg_tokenprice_from_swaps_lookup_round.56a999e64a": ["model.harmony.stg_tokenprice_from_swaps"], "test.harmony.not_null_stg_blocks_record_id.120642bef2": ["model.harmony.stg_blocks"], "test.harmony.not_null_stg_blocks_offset_id.530a409a08": ["model.harmony.stg_blocks"], "test.harmony.not_null_stg_blocks_block_id.1ded7ed662": ["model.harmony.stg_blocks"], "test.harmony.not_null_stg_blocks_block_timestamp.87c5f1915b": ["model.harmony.stg_blocks"], "test.harmony.not_null_stg_blocks_network.faf2bb40dd": ["model.harmony.stg_blocks"], "test.harmony.not_null_stg_blocks_chain_id.5794c79333": ["model.harmony.stg_blocks"], "test.harmony.not_null_stg_blocks_tx_count.10a456056a": ["model.harmony.stg_blocks"], "test.harmony.not_null_stg_blocks_header.cd46f3c5a5": ["model.harmony.stg_blocks"], "test.harmony.not_null_stg_blocks_ingested_at.7b953999e0": ["model.harmony.stg_blocks"], "test.harmony.not_null_stg_ant_ingest_ingest_timestamp.8f1622cdb7": ["model.harmony.stg_ant_ingest"], "test.harmony.unique_sushiswap_lp_actions_log_id.992d51f31a": ["model.harmony.sushiswap_lp_actions"], "test.harmony.not_null_sushiswap_lp_actions_log_id.1e0108487a": ["model.harmony.sushiswap_lp_actions"], "test.harmony.not_null_sushiswap_lp_actions_block_timestamp.f6c0a02608": ["model.harmony.sushiswap_lp_actions"], "test.harmony.not_null_sushiswap_lp_actions_tx_hash.a09ca7ef95": ["model.harmony.sushiswap_lp_actions"], "test.harmony.not_null_sushiswap_lp_actions_liquidity_provider.48f0335b57": ["model.harmony.sushiswap_lp_actions"], "test.harmony.not_null_sushiswap_lp_actions_pool_address.e8adf279f1": ["model.harmony.sushiswap_lp_actions"], "test.harmony.not_null_sushiswap_lp_actions_pool_name.4283540719": ["model.harmony.sushiswap_lp_actions"], "test.harmony.not_null_sushiswap_lp_actions_token0.04702ced55": ["model.harmony.sushiswap_lp_actions"], "test.harmony.not_null_sushiswap_lp_actions_token1.306284a205": ["model.harmony.sushiswap_lp_actions"], "test.harmony.not_null_sushiswap_lp_actions_action.8783363d62": ["model.harmony.sushiswap_lp_actions"], "test.harmony.unique_validators_u_key.1a041149bf": ["model.harmony.validators"], "test.harmony.not_null_validators_u_key.c2a23189a9": ["model.harmony.validators"], "test.harmony.not_null_validators_day_date.fcd5e2f119": ["model.harmony.validators"], "test.harmony.not_null_validators_validator_address.d425c825be": ["model.harmony.validators"], "test.harmony.not_null_validators_validator_hex_address.2b0ca6958d": ["model.harmony.validators"], "test.harmony.not_null_validators_validator_identity.b113614b7c": ["model.harmony.validators"], "test.harmony.not_null_validators_active_status.4441826ad0": ["model.harmony.validators"], "test.harmony.not_null_validators_total_one_delegated.70a13fb852": ["model.harmony.validators"], "test.harmony.not_null_validators_total_one_rewarded.177c7e37dc": ["model.harmony.validators"], "test.harmony.not_null_validators_total_one_undelegated.5342e21372": ["model.harmony.validators"], "test.harmony.not_null_swaps_block_timestamp.5d3288de7d": ["model.harmony.swaps"], "test.harmony.not_null_swaps_ingested_at.c7fb2cdf29": ["model.harmony.swaps"], "test.harmony.not_null_swaps_log_id.2ca95384a4": ["model.harmony.swaps"], "test.harmony.unique_swaps_log_id.f5bf2166b8": ["model.harmony.swaps"], "test.harmony.not_null_swaps_tx_hash.45f63d6a6d": ["model.harmony.swaps"], "test.harmony.not_null_swaps_pool_address.8e2188071f": ["model.harmony.swaps"], "test.harmony.not_null_swaps_amount0In.5c503a8e41": ["model.harmony.swaps"], "test.harmony.not_null_swaps_amount0Out.de7b24755d": ["model.harmony.swaps"], "test.harmony.not_null_swaps_amount1In.c15b0b307d": ["model.harmony.swaps"], "test.harmony.not_null_swaps_amount1Out.dd655a2a88": ["model.harmony.swaps"], "test.harmony.not_null_swaps_from_address.d7528e5d54": ["model.harmony.swaps"], "test.harmony.not_null_swaps_to_address.1cc0a11155": ["model.harmony.swaps"], "test.harmony.unique_logs_log_id.f25b608512": ["model.harmony.logs"], "test.harmony.not_null_logs_log_id.f4da856ee6": ["model.harmony.logs"], "test.harmony.not_null_logs_block_id.b7026e9962": ["model.harmony.logs"], "test.harmony.not_null_logs_block_timestamp.2b6ad6b9f2": ["model.harmony.logs"], "test.harmony.not_null_logs_ingested_at.471bc62a90": ["model.harmony.logs"], "test.harmony.not_null_logs_tx_hash.de211e27c7": ["model.harmony.logs"], "test.harmony.not_null_logs_event_index.16f3fe5212": ["model.harmony.logs"], "test.harmony.not_null_logs_native_contract_address.9250381076": ["model.harmony.logs"], "test.harmony.not_null_logs_evm_contract_address.cd39018b68": ["model.harmony.logs"], "test.harmony.not_null_logs_topics.6d9f87e3ef": ["model.harmony.logs"], "test.harmony.not_null_logs_data.e1331bb0e3": ["model.harmony.logs"], "test.harmony.not_null_logs_event_removed.811c385fa4": ["model.harmony.logs"], "test.harmony.unique_transfers_log_id.c52ad13d9c": ["model.harmony.transfers"], "test.harmony.not_null_transfers_log_id.e3335603cc": ["model.harmony.transfers"], "test.harmony.not_null_transfers_block_id.8563ace82f": ["model.harmony.transfers"], "test.harmony.not_null_transfers_tx_hash.f917940677": ["model.harmony.transfers"], "test.harmony.not_null_transfers_block_timestamp.1ee2080d0f": ["model.harmony.transfers"], "test.harmony.not_null_transfers_ingested_at.2973350946": ["model.harmony.transfers"], "test.harmony.not_null_transfers_contract_address.bb3139097d": ["model.harmony.transfers"], "test.harmony.not_null_transfers_from_address.2fb510e338": ["model.harmony.transfers"], "test.harmony.not_null_transfers_to_address.fb7c1028bc": ["model.harmony.transfers"], "test.harmony.not_null_transfers_raw_amount.0cbb84fe98": ["model.harmony.transfers"], "test.harmony.not_null_txs_block_timestamp.8ef5450d62": ["model.harmony.txs"], "test.harmony.not_null_txs_ingested_at.314927472a": ["model.harmony.txs"], "test.harmony.not_null_txs_nonce.7f8a213b50": ["model.harmony.txs"], "test.harmony.not_null_txs_native_from_address.957b997570": ["model.harmony.txs"], "test.harmony.not_null_txs_native_to_address.d8bc78d945": ["model.harmony.txs"], "test.harmony.not_null_txs_from_address.d9889ce7a7": ["model.harmony.txs"], "test.harmony.not_null_txs_to_address.1133d6e894": ["model.harmony.txs"], "test.harmony.not_null_txs_value.afdf3ec4e4": ["model.harmony.txs"], "test.harmony.not_null_txs_gas_price.d358615965": ["model.harmony.txs"], "test.harmony.not_null_txs_gas.6961e08eff": ["model.harmony.txs"], "test.harmony.not_null_txs_tx_hash.a718ce56dd": ["model.harmony.txs"], "test.harmony.unique_txs_tx_hash.57f702658d": ["model.harmony.txs"], "test.harmony.not_null_txs_data.9e837c9d87": ["model.harmony.txs"], "test.harmony.not_null_txs_status.a6404fa35e": ["model.harmony.txs"], "test.harmony.unique_btc_bridge_log_id.dc62ce7d29": ["model.harmony.btc_bridge"], "test.harmony.not_null_btc_bridge_log_id.32a932e33f": ["model.harmony.btc_bridge"], "test.harmony.not_null_btc_bridge_block_id.915dd88258": ["model.harmony.btc_bridge"], "test.harmony.not_null_btc_bridge_tx_hash.4af9bb9dc3": ["model.harmony.btc_bridge"], "test.harmony.not_null_btc_bridge_block_timestamp.bee9636f47": ["model.harmony.btc_bridge"], "test.harmony.not_null_btc_bridge_ingested_at.6dbd126cd3": ["model.harmony.btc_bridge"], "test.harmony.not_null_btc_bridge_contract_address.7739f76dd2": ["model.harmony.btc_bridge"], "test.harmony.not_null_btc_bridge_from_address.704b573f4b": ["model.harmony.btc_bridge"], "test.harmony.not_null_btc_bridge_to_address.3662fdc894": ["model.harmony.btc_bridge"], "test.harmony.not_null_btc_bridge_tx_type.7148bf48d6": ["model.harmony.btc_bridge"], "test.harmony.accepted_values_btc_bridge_tx_type__True__issue__redeem.53c7451a12": ["model.harmony.btc_bridge"], "test.harmony.not_null_btc_bridge_is_vault.53fa8b2ebb": ["model.harmony.btc_bridge"], "test.harmony.not_null_btc_bridge_raw_amount.9e1b7ab3e0": ["model.harmony.btc_bridge"], "test.harmony.unique_blocks_block_id.44b12036dd": ["model.harmony.blocks"], "test.harmony.not_null_blocks_block_id.27dfbcb068": ["model.harmony.blocks"], "test.harmony.not_null_blocks_block_timestamp.aa760dde19": ["model.harmony.blocks"], "test.harmony.not_null_blocks_ingested_at.859ac7d611": ["model.harmony.blocks"], "test.harmony.unique_blocks_block_hash.e25d7e2970": ["model.harmony.blocks"], "test.harmony.not_null_blocks_block_hash.f93dc2372d": ["model.harmony.blocks"], "test.harmony.unique_blocks_block_parent_hash.af1623766d": ["model.harmony.blocks"], "test.harmony.not_null_blocks_block_parent_hash.f9bbb459e0": ["model.harmony.blocks"], "test.harmony.not_null_blocks_gas_limit.f3d264290d": ["model.harmony.blocks"], "test.harmony.not_null_blocks_gas_used.70b3b7d3fa": ["model.harmony.blocks"], "test.harmony.not_null_blocks_miner.29cc4b19a7": ["model.harmony.blocks"], "test.harmony.not_null_blocks_nonce.0943cbfeed": ["model.harmony.blocks"], "test.harmony.not_null_blocks_size.ad5782522f": ["model.harmony.blocks"], "test.harmony.not_null_blocks_tx_count.a43c2db24e": ["model.harmony.blocks"], "test.harmony.not_null_blocks_state_root.7c516b3871": ["model.harmony.blocks"], "test.harmony.not_null_blocks_receipts_root.c17d662161": ["model.harmony.blocks"], "test.harmony.unique_liquidity_pools_pool_address.be2b9f6549": ["model.harmony.liquidity_pools"], "test.harmony.not_null_liquidity_pools_pool_address.8fd9b96a56": ["model.harmony.liquidity_pools"], "test.harmony.not_null_liquidity_pools_pool_name.ee41ec63dc": ["model.harmony.liquidity_pools"], "test.harmony.not_null_liquidity_pools_token0.cf9b78ba02": ["model.harmony.liquidity_pools"], "test.harmony.not_null_liquidity_pools_token1.cd051a6071": ["model.harmony.liquidity_pools"], "test.harmony.unique_tokens_token_address.9d9193ee34": ["model.harmony.tokens"], "test.harmony.not_null_tokens_token_address.d9e6576877": ["model.harmony.tokens"], "test.harmony.not_null_tokens_token_symbol.b9037dba39": ["model.harmony.tokens"], "test.harmony.not_null_tokens_decimals.48a7b1db68": ["model.harmony.tokens"], "test.harmony.not_null_tranquil_daily_supply_borrow_token_symbol.21fbf58bb9": ["model.harmony.tranquil_daily_supply_borrow"], "test.harmony.not_null_tranquil_daily_supply_borrow_block_date.1aeee85431": ["model.harmony.tranquil_daily_supply_borrow"], "test.harmony.not_null_tranquil_daily_supply_borrow_price.d6abc5f43b": ["model.harmony.tranquil_daily_supply_borrow"], "test.harmony.not_null_tranquil_markets_tokenprice_token_symbol.5911fa7339": ["model.harmony.tranquil_markets_tokenprice"], "test.harmony.not_null_tranquil_markets_tokenprice_timestamp.d13951c4a3": ["model.harmony.tranquil_markets_tokenprice"], "test.harmony.not_null_tranquil_markets_tokenprice_price.f685b7fcd7": ["model.harmony.tranquil_markets_tokenprice"], "test.harmony.unique_tranquil_txs_log_id.ee665dfe23": ["model.harmony.tranquil_txs"], "test.harmony.not_null_tranquil_txs_log_id.a063f813b3": ["model.harmony.tranquil_txs"], "test.harmony.not_null_tranquil_txs_tx_hash.b79bf2185f": ["model.harmony.tranquil_txs"], "test.harmony.not_null_tranquil_txs_block_timestamp.2e90ec8f55": ["model.harmony.tranquil_txs"], "test.harmony.not_null_tranquil_txs_block_id.0b4429bacd": ["model.harmony.tranquil_txs"], "test.harmony.not_null_tranquil_txs_user_address.c5c46adeae": ["model.harmony.tranquil_txs"], "test.harmony.not_null_tranquil_txs_evm_contract_address.0592e58a69": ["model.harmony.tranquil_txs"], "test.harmony.not_null_tranquil_txs_token_symbol.c654f00a7f": ["model.harmony.tranquil_txs"], "test.harmony.not_null_tranquil_txs_token_amount_raw.b4a6586754": ["model.harmony.tranquil_txs"], "test.harmony.not_null_tranquil_txs_token_amount.0db3f42715": ["model.harmony.tranquil_txs"], "test.harmony.not_null_tranquil_txs_tx_type.04f0e47be1": ["model.harmony.tranquil_txs"], "test.harmony.not_null_tokenprice_eth_timestamp.a9fcba1ba3": ["model.harmony.tokenprice_eth"], "test.harmony.unique_tokenprice_eth_timestamp.e64a320f18": ["model.harmony.tokenprice_eth"], "test.harmony.not_null_tokenprice_eth_price.cea7d07005": ["model.harmony.tokenprice_eth"], "test.harmony.not_null_tokenprice_stone_timestamp.1e827176bb": ["model.harmony.tokenprice_stone"], "test.harmony.unique_tokenprice_stone_timestamp.213c69340a": ["model.harmony.tokenprice_stone"], "test.harmony.not_null_tokenprice_stone_price.9d01834762": ["model.harmony.tokenprice_stone"], "test.harmony.not_null_tokenprice_usd_timestamp.b838b4a738": ["model.harmony.tokenprice_usd"], "test.harmony.unique_tokenprice_usd_timestamp.fc397d4b13": ["model.harmony.tokenprice_usd"], "test.harmony.not_null_tokenprice_usd_price.240f53ff0b": ["model.harmony.tokenprice_usd"], "test.harmony.not_null_tokenprice_dfkgold_timestamp.f82703b2bc": ["model.harmony.tokenprice_dfkgold"], "test.harmony.unique_tokenprice_dfkgold_timestamp.71e30aa140": ["model.harmony.tokenprice_dfkgold"], "test.harmony.not_null_tokenprice_dfkgold_price.7aff81d199": ["model.harmony.tokenprice_dfkgold"], "test.harmony.not_null_tokenprice_gaiatear_timestamp.b1f11762d7": ["model.harmony.tokenprice_gaiatear"], "test.harmony.unique_tokenprice_gaiatear_timestamp.4bc0e6ede1": ["model.harmony.tokenprice_gaiatear"], "test.harmony.not_null_tokenprice_gaiatear_price.e9055f2a26": ["model.harmony.tokenprice_gaiatear"], "test.harmony.not_null_tokenprice_shvasrune_timestamp.12a9557a54": ["model.harmony.tokenprice_shvasrune"], "test.harmony.unique_tokenprice_shvasrune_timestamp.1bba330039": ["model.harmony.tokenprice_shvasrune"], "test.harmony.not_null_tokenprice_shvasrune_price.c2c6b5a871": ["model.harmony.tokenprice_shvasrune"], "test.harmony.not_null_tokenprice_btc_timestamp.960a420451": ["model.harmony.tokenprice_btc"], "test.harmony.unique_tokenprice_btc_timestamp.7cfb2382cb": ["model.harmony.tokenprice_btc"], "test.harmony.not_null_tokenprice_btc_price.4b83451ce2": ["model.harmony.tokenprice_btc"], "test.harmony.not_null_tokenprice_one_timestamp.696359f1d2": ["model.harmony.tokenprice_one"], "test.harmony.unique_tokenprice_one_timestamp.35687e8a10": ["model.harmony.tokenprice_one"], "test.harmony.not_null_tokenprice_one_price.9fedd60475": ["model.harmony.tokenprice_one"], "test.harmony.not_null_tokenprice_jewel_timestamp.c95057f07f": ["model.harmony.tokenprice_jewel"], "test.harmony.unique_tokenprice_jewel_timestamp.464d07552e": ["model.harmony.tokenprice_jewel"], "test.harmony.not_null_tokenprice_jewel_price.55d8fb7952": ["model.harmony.tokenprice_jewel"], "test.harmony.not_null_tokenprices_key.248bd37af9": ["model.harmony.tokenprices"], "test.harmony.unique_tokenprices_key.dce80052a0": ["model.harmony.tokenprices"], "test.harmony.not_null_tokenprices_block_date.9e7830a534": ["model.harmony.tokenprices"], "test.harmony.not_null_tokenprices_token_address.553c7ecbc9": ["model.harmony.tokenprices"], "test.harmony.not_null_tokenprices_token_symbol.ad788d700d": ["model.harmony.tokenprices"], "test.harmony.not_null_tokenprices_usd_price.ad956c060f": ["model.harmony.tokenprices"], "test.harmony.not_null_tokenprices_usd_volume.06e472dad5": ["model.harmony.tokenprices"], "test.harmony.not_null_tokenprices_token_volume.f81cd2a394": ["model.harmony.tokenprices"], "test.harmony.unique_dfk_bank_transactions_tx_hash.6a574eb80e": ["model.harmony.dfk_bank_transactions"], "test.harmony.not_null_dfk_bank_transactions_tx_hash.5b7b36a100": ["model.harmony.dfk_bank_transactions"], "test.harmony.not_null_dfk_bank_transactions_block_timestamp.8a580bfb29": ["model.harmony.dfk_bank_transactions"], "test.harmony.not_null_dfk_bank_transactions_ingested_at.1525787d28": ["model.harmony.dfk_bank_transactions"], "test.harmony.not_null_dfk_bank_transactions_native_from_address.eb283bdf82": ["model.harmony.dfk_bank_transactions"], "test.harmony.not_null_dfk_bank_transactions_from_address.30a9faaa1f": ["model.harmony.dfk_bank_transactions"], "test.harmony.not_null_dfk_bank_transactions_type.0122242487": ["model.harmony.dfk_bank_transactions"], "test.harmony.not_null_dfk_bank_transactions_jewel_amount.c5c19d0070": ["model.harmony.dfk_bank_transactions"], "test.harmony.not_null_dfk_bank_transactions_xjewel_amount.e2b867313b": ["model.harmony.dfk_bank_transactions"], "test.harmony.not_null_dfk_quest_rewards_log_id.d8a2c2e745": ["model.harmony.dfk_quest_rewards"], "test.harmony.unique_dfk_quest_rewards_log_id.181d50274c": ["model.harmony.dfk_quest_rewards"], "test.harmony.not_null_dfk_quest_rewards_block_timestamp.33b0d48b64": ["model.harmony.dfk_quest_rewards"], "test.harmony.not_null_dfk_quest_rewards_ingested_at.8c2eda3de0": ["model.harmony.dfk_quest_rewards"], "test.harmony.not_null_dfk_quest_rewards_evm_contract_address.6e887b1a40": ["model.harmony.dfk_quest_rewards"], "test.harmony.not_null_dfk_quest_rewards_token_name.1f68aecefb": ["model.harmony.dfk_quest_rewards"], "test.harmony.not_null_dfk_quest_rewards_from_address.fa86619b22": ["model.harmony.dfk_quest_rewards"], "test.harmony.not_null_dfk_quest_rewards_to_address.7c408caace": ["model.harmony.dfk_quest_rewards"], "test.harmony.not_null_dfk_quest_rewards_calculated_value.c187e76f86": ["model.harmony.dfk_quest_rewards"], "test.harmony.not_null_dfk_quest_rewards_tx_hash.20e4a48bb4": ["model.harmony.dfk_quest_rewards"], "test.harmony.not_null_dfk_quest_rewards_amount_usd.55e7b8fe00": ["model.harmony.dfk_quest_rewards"], "test.harmony.not_null_dfk_hero_summons_tx_hash.e543421a67": ["model.harmony.dfk_hero_summons"], "test.harmony.unique_dfk_hero_summons_tx_hash.ebbd8ab5c6": ["model.harmony.dfk_hero_summons"], "test.harmony.not_null_dfk_hero_summons_block_timestamp.3882749bc8": ["model.harmony.dfk_hero_summons"], "test.harmony.not_null_dfk_hero_summons_ingested_at.aaf9c8b651": ["model.harmony.dfk_hero_summons"], "test.harmony.not_null_dfk_hero_summons_hero_id.dc487032ac": ["model.harmony.dfk_hero_summons"], "test.harmony.not_null_dfk_hero_summons_crystal_id.a052476168": ["model.harmony.dfk_hero_summons"], "test.harmony.not_null_dfk_hero_summons_summoneer.b4601e6e8c": ["model.harmony.dfk_hero_summons"], "test.harmony.not_null_dfk_hero_sales_tx_hash.ad6991f7e2": ["model.harmony.dfk_hero_sales"], "test.harmony.unique_dfk_hero_sales_tx_hash.15a6f08266": ["model.harmony.dfk_hero_sales"], "test.harmony.not_null_dfk_hero_sales_block_timestamp.de1dd507fd": ["model.harmony.dfk_hero_sales"], "test.harmony.not_null_dfk_hero_sales_ingested_at.015644d5f4": ["model.harmony.dfk_hero_sales"], "test.harmony.not_null_dfk_hero_sales_hero_token_id.583c649524": ["model.harmony.dfk_hero_sales"], "test.harmony.not_null_dfk_hero_sales_auction_id.632a655c34": ["model.harmony.dfk_hero_sales"], "test.harmony.not_null_dfk_hero_sales_total_jewels.12a1d5c1eb": ["model.harmony.dfk_hero_sales"], "test.harmony.not_null_dfk_hero_sales_tax_jewels.91da0b7dba": ["model.harmony.dfk_hero_sales"], "test.harmony.not_null_dfk_hero_sales_total_usd.8aa69d6d8f": ["model.harmony.dfk_hero_sales"], "test.harmony.not_null_dfk_hero_sales_tax_usd.f1ae7d543c": ["model.harmony.dfk_hero_sales"], "test.harmony.not_null_dfk_hero_sales_buyer_address.b1b866987d": ["model.harmony.dfk_hero_sales"], "test.harmony.not_null_dfk_seed_harvests_block_timestamp.39e6a8ee79": ["model.harmony.dfk_seed_harvests"], "test.harmony.not_null_dfk_seed_harvests_ingested_at.5c10bb344c": ["model.harmony.dfk_seed_harvests"], "test.harmony.not_null_dfk_seed_harvests_block_number.94b33d4c1d": ["model.harmony.dfk_seed_harvests"], "test.harmony.not_null_dfk_seed_harvests_garden_epoch.1fff8ab18d": ["model.harmony.dfk_seed_harvests"], "test.harmony.not_null_dfk_seed_harvests_native_from_address.0ec5d4c793": ["model.harmony.dfk_seed_harvests"], "test.harmony.not_null_dfk_seed_harvests_from_address.052f2540b6": ["model.harmony.dfk_seed_harvests"], "test.harmony.unique_dfk_seed_harvests_tx_hash.99d4d1e0aa": ["model.harmony.dfk_seed_harvests"], "test.harmony.not_null_dfk_seed_harvests_tx_hash.80cb588c5d": ["model.harmony.dfk_seed_harvests"], "test.harmony.not_null_dfk_seed_harvests_jewel_locked.0288e7217f": ["model.harmony.dfk_seed_harvests"], "test.harmony.not_null_dfk_seed_harvests_jewel_unlocked.9e26f9d4a4": ["model.harmony.dfk_seed_harvests"], "test.harmony.not_null_dfk_potions_crafted_tx_hash.b36dd3c642": ["model.harmony.dfk_potions_crafted"], "test.harmony.unique_dfk_potions_crafted_tx_hash.921954e171": ["model.harmony.dfk_potions_crafted"], "test.harmony.not_null_dfk_potions_crafted_block_timestamp.24333b5359": ["model.harmony.dfk_potions_crafted"], "test.harmony.not_null_dfk_potions_crafted_ingested_at.8333dbecd6": ["model.harmony.dfk_potions_crafted"], "test.harmony.not_null_dfk_potions_crafted_crafter.908f7c51d2": ["model.harmony.dfk_potions_crafted"], "test.harmony.not_null_dfk_potions_crafted_potion_type.731da0f49c": ["model.harmony.dfk_potions_crafted"], "test.harmony.not_null_dfk_potions_crafted_potions_crafted.dd8097c9bf": ["model.harmony.dfk_potions_crafted"], "test.harmony.unique_dfk_item_transactions_tx_hash.de03a99a4b": ["model.harmony.dfk_item_transactions"], "test.harmony.not_null_dfk_item_transactions_tx_hash.7a5c029a90": ["model.harmony.dfk_item_transactions"], "test.harmony.not_null_dfk_item_transactions_block_timestamp.896f37f711": ["model.harmony.dfk_item_transactions"], "test.harmony.not_null_dfk_item_transactions_ingested_at.2003546fbd": ["model.harmony.dfk_item_transactions"], "test.harmony.not_null_dfk_item_transactions_native_from_address.5e4f787217": ["model.harmony.dfk_item_transactions"], "test.harmony.not_null_dfk_item_transactions_from_address.62cf0232cb": ["model.harmony.dfk_item_transactions"], "test.harmony.not_null_dfk_item_transactions_market_action.a64adadbe3": ["model.harmony.dfk_item_transactions"], "test.harmony.not_null_dfk_item_transactions_amount_give.f950d75693": ["model.harmony.dfk_item_transactions"], "test.harmony.not_null_dfk_item_transactions_token_give_address.92b8c165a4": ["model.harmony.dfk_item_transactions"], "test.harmony.not_null_dfk_item_transactions_amount_take.5839c661a6": ["model.harmony.dfk_item_transactions"], "test.harmony.not_null_dfk_item_transactions_token_take_address.368da9df1d": ["model.harmony.dfk_item_transactions"], "test.harmony.unique_dfk_seed_liquidity_actions_log_id.5ff183d9e4": ["model.harmony.dfk_seed_liquidity_actions"], "test.harmony.not_null_dfk_seed_liquidity_actions_log_id.290eb334e4": ["model.harmony.dfk_seed_liquidity_actions"], "test.harmony.not_null_dfk_seed_liquidity_actions_block_id.8579bb9a85": ["model.harmony.dfk_seed_liquidity_actions"], "test.harmony.not_null_dfk_seed_liquidity_actions_block_timestamp.143c23fece": ["model.harmony.dfk_seed_liquidity_actions"], "test.harmony.not_null_dfk_seed_liquidity_actions_ingested_at.fed78e06bc": ["model.harmony.dfk_seed_liquidity_actions"], "test.harmony.not_null_dfk_seed_liquidity_actions_tx_hash.c6a0b2cfe4": ["model.harmony.dfk_seed_liquidity_actions"], "test.harmony.not_null_dfk_seed_liquidity_actions_one_lp_address.d711aafe1e": ["model.harmony.dfk_seed_liquidity_actions"], "test.harmony.not_null_dfk_seed_liquidity_actions_eth_lp_address.5713259131": ["model.harmony.dfk_seed_liquidity_actions"], "test.harmony.not_null_dfk_seed_liquidity_actions_pool_name.85e6365239": ["model.harmony.dfk_seed_liquidity_actions"], "test.harmony.not_null_dfk_seed_liquidity_actions_token0_address.0f2f408a84": ["model.harmony.dfk_seed_liquidity_actions"], "test.harmony.not_null_dfk_seed_liquidity_actions_token1_address.9776668543": ["model.harmony.dfk_seed_liquidity_actions"], "test.harmony.not_null_dfk_seed_liquidity_actions_action.eac7589e37": ["model.harmony.dfk_seed_liquidity_actions"], "test.harmony.not_null_dfk_hero_rental_tx_hash.52307d63f1": ["model.harmony.dfk_hero_rental"], "test.harmony.unique_dfk_hero_rental_tx_hash.2b446d1e89": ["model.harmony.dfk_hero_rental"], "test.harmony.not_null_dfk_hero_rental_block_timestamp.fe79e6721b": ["model.harmony.dfk_hero_rental"], "test.harmony.not_null_dfk_hero_rental_ingested_at.bfeaba7cd3": ["model.harmony.dfk_hero_rental"], "test.harmony.not_null_dfk_hero_rental_jewel_amount.1ec981b976": ["model.harmony.dfk_hero_rental"], "test.harmony.not_null_dfk_hero_rental_user_address.a403584d0f": ["model.harmony.dfk_hero_rental"], "test.harmony.not_null_dfk_hero_rental_renter_address.eab038232a": ["model.harmony.dfk_hero_rental"], "test.harmony.not_null_dfk_hero_rental_amount_usd.182e104a9c": ["model.harmony.dfk_hero_rental"], "test.harmony.unique_viperswap_lp_actions_log_id.42c0280195": ["model.harmony.viperswap_lp_actions"], "test.harmony.not_null_viperswap_lp_actions_log_id.fed60c0c15": ["model.harmony.viperswap_lp_actions"], "test.harmony.not_null_viperswap_lp_actions_block_id.13bbade106": ["model.harmony.viperswap_lp_actions"], "test.harmony.not_null_viperswap_lp_actions_block_timestamp.22e023bed4": ["model.harmony.viperswap_lp_actions"], "test.harmony.not_null_viperswap_lp_actions_ingested_at.c6199b65f5": ["model.harmony.viperswap_lp_actions"], "test.harmony.not_null_viperswap_lp_actions_tx_hash.29f131a5e2": ["model.harmony.viperswap_lp_actions"], "test.harmony.not_null_viperswap_lp_actions_liquidity_provider.4871ab7a4f": ["model.harmony.viperswap_lp_actions"], "test.harmony.not_null_viperswap_lp_actions_action.f917333944": ["model.harmony.viperswap_lp_actions"], "test.harmony.not_null_viperswap_lp_actions_pool_address.ae66749669": ["model.harmony.viperswap_lp_actions"], "test.harmony.not_null_viperswap_lp_actions_amount0_raw.e2e61e6162": ["model.harmony.viperswap_lp_actions"], "test.harmony.not_null_viperswap_lp_actions_amount1_raw.5d6166ac9a": ["model.harmony.viperswap_lp_actions"], "test.harmony.not_null_dfk_hero_updates_block_timestamp.5d82714d00": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_ingested_at.eb40ac7d41": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_block_id.e9e7a0ded2": ["model.harmony.dfk_hero_updates"], "test.harmony.unique_dfk_hero_updates_log_id.eb1ed2ddc0": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_log_id.76fbf6753e": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_id.806b206a3a": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_summoning_info_summonedtime.014ee3d7d0": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_summoning_info_nextsummontime.4f9c4e6309": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_summoning_info_summonerid.f22490372d": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_summoning_info_assistantid.df3ecd1be2": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_summoning_info_summons.3b741f449e": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_summoning_info_maxsummons.02ba30e162": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_info_statgenes.378ac74eba": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_info_visualgenes.408ee79a50": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_info_rarity.f7584bce66": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_info_shiny.edcc558f1c": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_info_generation.d99f46cb63": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_info_firstname.58498ff9e4": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_info_lastname.8d9ec5807a": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_info_shinystyle.3a5fe7028e": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_info_class.608d235cae": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_info_subclass.c1d4108382": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_state_staminafullat.19bd4c7531": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_state_hpfullat.1a510462d5": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_state_mpfullat.e3adfafadc": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_state_level.9a7dda4838": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_state_xp.431cbf7c00": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_state_currentquest.3e5968e41b": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_state_sp.5b5683c285": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_state_status.83f33d6965": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_stats_strength.420858698e": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_stats_intelligence.0b346639a5": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_stats_wisdom.b22899144a": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_stats_luck.fa486fc10a": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_stats_agility.3c50b6f002": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_stats_vitality.39bee4d71b": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_stats_endurance.c6d90b953a": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_stats_dexterity.968ab5dc9f": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_stats_hp.650ee449b0": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_stats_mp.e377a9e808": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_stats_stamina.0e28f15d14": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_strength.e636522ec5": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_intelligence.c0c7b4e8ef": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_wisdom.e638b91e7e": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_luck.67fdc5d9fc": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_agility.95eb68d12d": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_vitality.833a942c85": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_endurance.3c3da2d64e": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_dexterity.37ea684305": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hpsm.333f55e23d": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hprg.bb2f7e28d0": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hplg.b9753af52e": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mpsm.ff48bffa5b": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mprg.84c957d14c": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mplg.9311fd2515": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_strength.f698be1f0d": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_intelligence.4a0bd8fedc": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_wisdom.c77b6e7f75": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_luck.85df403797": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_agility.61f9e2c0ad": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_vitality.e12340f529": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_endurance.3936bfabaf": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_dexterity.5a4a4d002b": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hpsm.3519b0a108": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hprg.bd4afb8a71": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hplg.89204a4088": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mpsm.9b791a152b": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mprg.99bb003e4f": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mplg.6dcf7dd34a": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_professions_mining.6ebcec049d": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_professions_gardening.16ddc4e962": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_professions_foraging.13cbb9fba2": ["model.harmony.dfk_hero_updates"], "test.harmony.not_null_dfk_hero_updates_hero_professions_fishing.1e12aef556": ["model.harmony.dfk_hero_updates"], "source.harmony.chainwalkers.harmony_blocks": [], "source.harmony.chainwalkers.harmony_txs": [], "source.harmony.ingest.src_old_ant_ingest": [], "source.harmony.ingest.src_old_tokenprice_coingecko_mr": [], "source.harmony.ingest.ant_ingest": [], "source.harmony.ingest.src_token_usd_prices": []}, "child_map": {"model.harmony.metric_gas_used_count": ["test.harmony.not_null_metric_gas_used_count_gas_total.ea230e6e01", "test.harmony.not_null_metric_gas_used_count_metric_date.4a0eb3c505", "test.harmony.not_null_metric_gas_used_count_metric_period.452eb8b3d7"], "model.harmony.metric_transactions_count": ["test.harmony.not_null_metric_transactions_count_metric_date.a0ba3ef0a1", "test.harmony.not_null_metric_transactions_count_metric_period.5c51be1b98", "test.harmony.not_null_metric_transactions_count_txs_count.4e26fab0f3"], "model.harmony.metric_miner_count": ["test.harmony.not_null_metric_miner_count_metric_date.c62b8a3b14", "test.harmony.not_null_metric_miner_count_metric_period.0c3abeb408", "test.harmony.not_null_metric_miner_count_miner_count.9d6e2fb19b"], "model.harmony.metric_unique_users_count": ["test.harmony.not_null_metric_unique_users_count_metric_date.8e870921c3", "test.harmony.not_null_metric_unique_users_count_metric_period.0420fc3861", "test.harmony.not_null_metric_unique_users_count_unique_users_count.fc29ed7470", "test.harmony.not_null_metric_unique_users_count_unique_users_cumulative.5a0421d0e6"], "model.harmony.metric_erc20_transfers_count": ["test.harmony.not_null_metric_erc20_transfers_count_metric_date.d92fe99fd7", "test.harmony.not_null_metric_erc20_transfers_count_metric_period.76b6cff96a", "test.harmony.not_null_metric_erc20_transfers_count_transfers_count.929d391ccb"], "model.harmony.stg_tokenprice_from_swaps": ["model.harmony.tokenprices", "test.harmony.not_null_stg_tokenprice_from_swaps_block_date.db204690a0", "test.harmony.not_null_stg_tokenprice_from_swaps_key.a0c3769066", "test.harmony.not_null_stg_tokenprice_from_swaps_lookup_round.56a999e64a", "test.harmony.not_null_stg_tokenprice_from_swaps_pair_symbol_for_price.505c85c86a", "test.harmony.not_null_stg_tokenprice_from_swaps_pair_token_for_price.7c12c493e9", "test.harmony.not_null_stg_tokenprice_from_swaps_token_address.a09b5b4dcb", "test.harmony.not_null_stg_tokenprice_from_swaps_token_symbol.07ecb6a41e", "test.harmony.not_null_stg_tokenprice_from_swaps_token_volume.a99dbe42d3", "test.harmony.not_null_stg_tokenprice_from_swaps_usd_price.ea7453ba8b", "test.harmony.not_null_stg_tokenprice_from_swaps_usd_volume.a6cd8a6d28", "test.harmony.not_null_stg_tokenprice_from_swaps_volume_for_price.9994df39d5", "test.harmony.unique_stg_tokenprice_from_swaps_key.5c3ec7c700"], "model.harmony.stg_txs": ["model.harmony.logs", "model.harmony.txs", "test.harmony.not_null_stg_txs_block_id.705b788dc6", "test.harmony.not_null_stg_txs_block_timestamp.0eae229ba1", "test.harmony.not_null_stg_txs_chain_id.fdb1c9956d", "test.harmony.not_null_stg_txs_ingested_at.ad55bb9e47", "test.harmony.not_null_stg_txs_network.89f4d31e91", "test.harmony.not_null_stg_txs_offset_id.ded9486e64", "test.harmony.not_null_stg_txs_record_id.cde613d2f1", "test.harmony.not_null_stg_txs_tx_block_index.5edea4684a", "test.harmony.not_null_stg_txs_tx_id.6ca0194e5a"], "model.harmony.stg_delegators": ["model.harmony.validators", "test.harmony.not_null_stg_delegators_day_date.defe482aef", "test.harmony.not_null_stg_delegators_delegations.abcb6ce8fd", "test.harmony.not_null_stg_delegators_ingest_timestamp.5c02b89faf", "test.harmony.not_null_stg_delegators_total_delegation.5010d275b4", "test.harmony.not_null_stg_delegators_total_delegator_count.7cfe837d1d", "test.harmony.not_null_stg_delegators_validator_address.f3f0e33492", "test.harmony.not_null_stg_delegators_validator_identity.55aed20cd9"], "model.harmony.stg_blocks": ["model.harmony.blocks", "test.harmony.not_null_stg_blocks_block_id.1ded7ed662", "test.harmony.not_null_stg_blocks_block_timestamp.87c5f1915b", "test.harmony.not_null_stg_blocks_chain_id.5794c79333", "test.harmony.not_null_stg_blocks_header.cd46f3c5a5", "test.harmony.not_null_stg_blocks_ingested_at.7b953999e0", "test.harmony.not_null_stg_blocks_network.faf2bb40dd", "test.harmony.not_null_stg_blocks_offset_id.530a409a08", "test.harmony.not_null_stg_blocks_record_id.120642bef2", "test.harmony.not_null_stg_blocks_tx_count.10a456056a"], "model.harmony.stg_ant_ingest": ["model.harmony.stg_delegators", "test.harmony.not_null_stg_ant_ingest_ingest_timestamp.8f1622cdb7"], "model.harmony.sushiswap_lp_actions": ["test.harmony.not_null_sushiswap_lp_actions_action.8783363d62", "test.harmony.not_null_sushiswap_lp_actions_block_timestamp.f6c0a02608", "test.harmony.not_null_sushiswap_lp_actions_liquidity_provider.48f0335b57", "test.harmony.not_null_sushiswap_lp_actions_log_id.1e0108487a", "test.harmony.not_null_sushiswap_lp_actions_pool_address.e8adf279f1", "test.harmony.not_null_sushiswap_lp_actions_pool_name.4283540719", "test.harmony.not_null_sushiswap_lp_actions_token0.04702ced55", "test.harmony.not_null_sushiswap_lp_actions_token1.306284a205", "test.harmony.not_null_sushiswap_lp_actions_tx_hash.a09ca7ef95", "test.harmony.unique_sushiswap_lp_actions_log_id.992d51f31a"], "model.harmony.swaps": ["model.harmony.stg_tokenprice_from_swaps", "test.harmony.not_null_swaps_amount0In.5c503a8e41", "test.harmony.not_null_swaps_amount0Out.de7b24755d", "test.harmony.not_null_swaps_amount1In.c15b0b307d", "test.harmony.not_null_swaps_amount1Out.dd655a2a88", "test.harmony.not_null_swaps_block_timestamp.5d3288de7d", "test.harmony.not_null_swaps_from_address.d7528e5d54", "test.harmony.not_null_swaps_ingested_at.c7fb2cdf29", "test.harmony.not_null_swaps_log_id.2ca95384a4", "test.harmony.not_null_swaps_pool_address.8e2188071f", "test.harmony.not_null_swaps_to_address.1cc0a11155", "test.harmony.not_null_swaps_tx_hash.45f63d6a6d", "test.harmony.unique_swaps_log_id.f5bf2166b8"], "model.harmony.validators": ["test.harmony.not_null_validators_active_status.4441826ad0", "test.harmony.not_null_validators_day_date.fcd5e2f119", "test.harmony.not_null_validators_total_one_delegated.70a13fb852", "test.harmony.not_null_validators_total_one_rewarded.177c7e37dc", "test.harmony.not_null_validators_total_one_undelegated.5342e21372", "test.harmony.not_null_validators_u_key.c2a23189a9", "test.harmony.not_null_validators_validator_address.d425c825be", "test.harmony.not_null_validators_validator_hex_address.2b0ca6958d", "test.harmony.not_null_validators_validator_identity.b113614b7c", "test.harmony.unique_validators_u_key.1a041149bf"], "model.harmony.blocks": ["model.harmony.metric_gas_used_count", "model.harmony.metric_gas_used_count", "model.harmony.metric_gas_used_count", "model.harmony.metric_miner_count", "model.harmony.metric_miner_count", "model.harmony.metric_miner_count", "test.harmony.not_null_blocks_block_hash.f93dc2372d", "test.harmony.not_null_blocks_block_id.27dfbcb068", "test.harmony.not_null_blocks_block_parent_hash.f9bbb459e0", "test.harmony.not_null_blocks_block_timestamp.aa760dde19", "test.harmony.not_null_blocks_gas_limit.f3d264290d", "test.harmony.not_null_blocks_gas_used.70b3b7d3fa", "test.harmony.not_null_blocks_ingested_at.859ac7d611", "test.harmony.not_null_blocks_miner.29cc4b19a7", "test.harmony.not_null_blocks_nonce.0943cbfeed", "test.harmony.not_null_blocks_receipts_root.c17d662161", "test.harmony.not_null_blocks_size.ad5782522f", "test.harmony.not_null_blocks_state_root.7c516b3871", "test.harmony.not_null_blocks_tx_count.a43c2db24e", "test.harmony.unique_blocks_block_hash.e25d7e2970", "test.harmony.unique_blocks_block_id.44b12036dd", "test.harmony.unique_blocks_block_parent_hash.af1623766d"], "model.harmony.liquidity_pools": ["model.harmony.dfk_seed_liquidity_actions", "model.harmony.sushiswap_lp_actions", "model.harmony.swaps", "model.harmony.viperswap_lp_actions", "test.harmony.not_null_liquidity_pools_pool_address.8fd9b96a56", "test.harmony.not_null_liquidity_pools_pool_name.ee41ec63dc", "test.harmony.not_null_liquidity_pools_token0.cf9b78ba02", "test.harmony.not_null_liquidity_pools_token1.cd051a6071", "test.harmony.unique_liquidity_pools_pool_address.be2b9f6549"], "model.harmony.tokens": ["model.harmony.dfk_quest_rewards", "model.harmony.dfk_seed_liquidity_actions", "model.harmony.liquidity_pools", "model.harmony.liquidity_pools", "model.harmony.stg_tokenprice_from_swaps", "model.harmony.stg_tokenprice_from_swaps", "model.harmony.sushiswap_lp_actions", "model.harmony.swaps", "model.harmony.swaps", "model.harmony.viperswap_lp_actions", "test.harmony.not_null_tokens_decimals.48a7b1db68", "test.harmony.not_null_tokens_token_address.d9e6576877", "test.harmony.not_null_tokens_token_symbol.b9037dba39", "test.harmony.unique_tokens_token_address.9d9193ee34"], "model.harmony.logs": ["model.harmony.btc_bridge", "model.harmony.dfk_bank_transactions", "model.harmony.dfk_hero_rental", "model.harmony.dfk_hero_sales", "model.harmony.dfk_hero_sales", "model.harmony.dfk_hero_summons", "model.harmony.dfk_hero_updates", "model.harmony.dfk_item_transactions", "model.harmony.dfk_quest_rewards", "model.harmony.dfk_seed_harvests", "model.harmony.dfk_seed_liquidity_actions", "model.harmony.liquidity_pools", "model.harmony.sushiswap_lp_actions", "model.harmony.swaps", "model.harmony.tokenprice_btc", "model.harmony.tokenprice_dfkgold", "model.harmony.tokenprice_eth", "model.harmony.tokenprice_gaiatear", "model.harmony.tokenprice_jewel", "model.harmony.tokenprice_one", "model.harmony.tokenprice_shvasrune", "model.harmony.tokenprice_stone", "model.harmony.tranquil_daily_supply_borrow", "model.harmony.transfers", "model.harmony.viperswap_lp_actions", "test.harmony.not_null_logs_block_id.b7026e9962", "test.harmony.not_null_logs_block_timestamp.2b6ad6b9f2", "test.harmony.not_null_logs_data.e1331bb0e3", "test.harmony.not_null_logs_event_index.16f3fe5212", "test.harmony.not_null_logs_event_removed.811c385fa4", "test.harmony.not_null_logs_evm_contract_address.cd39018b68", "test.harmony.not_null_logs_ingested_at.471bc62a90", "test.harmony.not_null_logs_log_id.f4da856ee6", "test.harmony.not_null_logs_native_contract_address.9250381076", "test.harmony.not_null_logs_topics.6d9f87e3ef", "test.harmony.not_null_logs_tx_hash.de211e27c7", "test.harmony.unique_logs_log_id.f25b608512"], "model.harmony.transfers": ["model.harmony.btc_bridge", "model.harmony.metric_erc20_transfers_count", "model.harmony.metric_erc20_transfers_count", "model.harmony.metric_erc20_transfers_count", "test.harmony.not_null_transfers_block_id.8563ace82f", "test.harmony.not_null_transfers_block_timestamp.1ee2080d0f", "test.harmony.not_null_transfers_contract_address.bb3139097d", "test.harmony.not_null_transfers_from_address.2fb510e338", "test.harmony.not_null_transfers_ingested_at.2973350946", "test.harmony.not_null_transfers_log_id.e3335603cc", "test.harmony.not_null_transfers_raw_amount.0cbb84fe98", "test.harmony.not_null_transfers_to_address.fb7c1028bc", "test.harmony.not_null_transfers_tx_hash.f917940677", "test.harmony.unique_transfers_log_id.c52ad13d9c"], "model.harmony.txs": ["model.harmony.dfk_bank_transactions", "model.harmony.dfk_hero_rental", "model.harmony.dfk_hero_summons", "model.harmony.dfk_item_transactions", "model.harmony.dfk_potions_crafted", "model.harmony.dfk_quest_rewards", "model.harmony.dfk_seed_harvests", "model.harmony.dfk_seed_liquidity_actions", "model.harmony.metric_transactions_count", "model.harmony.metric_transactions_count", "model.harmony.metric_transactions_count", "model.harmony.metric_unique_users_count", "model.harmony.sushiswap_lp_actions", "model.harmony.viperswap_lp_actions", "test.harmony.not_null_txs_block_timestamp.8ef5450d62", "test.harmony.not_null_txs_data.9e837c9d87", "test.harmony.not_null_txs_from_address.d9889ce7a7", "test.harmony.not_null_txs_gas.6961e08eff", "test.harmony.not_null_txs_gas_price.d358615965", "test.harmony.not_null_txs_ingested_at.314927472a", "test.harmony.not_null_txs_native_from_address.957b997570", "test.harmony.not_null_txs_native_to_address.d8bc78d945", "test.harmony.not_null_txs_nonce.7f8a213b50", "test.harmony.not_null_txs_status.a6404fa35e", "test.harmony.not_null_txs_to_address.1133d6e894", "test.harmony.not_null_txs_tx_hash.a718ce56dd", "test.harmony.not_null_txs_value.afdf3ec4e4", "test.harmony.unique_txs_tx_hash.57f702658d"], "model.harmony.btc_bridge": ["test.harmony.accepted_values_btc_bridge_tx_type__True__issue__redeem.53c7451a12", "test.harmony.not_null_btc_bridge_block_id.915dd88258", "test.harmony.not_null_btc_bridge_block_timestamp.bee9636f47", "test.harmony.not_null_btc_bridge_contract_address.7739f76dd2", "test.harmony.not_null_btc_bridge_from_address.704b573f4b", "test.harmony.not_null_btc_bridge_ingested_at.6dbd126cd3", "test.harmony.not_null_btc_bridge_is_vault.53fa8b2ebb", "test.harmony.not_null_btc_bridge_log_id.32a932e33f", "test.harmony.not_null_btc_bridge_raw_amount.9e1b7ab3e0", "test.harmony.not_null_btc_bridge_to_address.3662fdc894", "test.harmony.not_null_btc_bridge_tx_hash.4af9bb9dc3", "test.harmony.not_null_btc_bridge_tx_type.7148bf48d6", "test.harmony.unique_btc_bridge_log_id.dc62ce7d29"], "model.harmony.tranquil_daily_supply_borrow": ["test.harmony.not_null_tranquil_daily_supply_borrow_block_date.1aeee85431", "test.harmony.not_null_tranquil_daily_supply_borrow_price.d6abc5f43b", "test.harmony.not_null_tranquil_daily_supply_borrow_token_symbol.21fbf58bb9"], "model.harmony.tranquil_markets_tokenprice": ["model.harmony.tranquil_daily_supply_borrow", "model.harmony.tranquil_txs", "test.harmony.not_null_tranquil_markets_tokenprice_price.f685b7fcd7", "test.harmony.not_null_tranquil_markets_tokenprice_timestamp.d13951c4a3", "test.harmony.not_null_tranquil_markets_tokenprice_token_symbol.5911fa7339"], "model.harmony.tranquil_txs": ["model.harmony.tranquil_daily_supply_borrow", "test.harmony.not_null_tranquil_txs_block_id.0b4429bacd", "test.harmony.not_null_tranquil_txs_block_timestamp.2e90ec8f55", "test.harmony.not_null_tranquil_txs_evm_contract_address.0592e58a69", "test.harmony.not_null_tranquil_txs_log_id.a063f813b3", "test.harmony.not_null_tranquil_txs_token_amount.0db3f42715", "test.harmony.not_null_tranquil_txs_token_amount_raw.b4a6586754", "test.harmony.not_null_tranquil_txs_token_symbol.c654f00a7f", "test.harmony.not_null_tranquil_txs_tx_hash.b79bf2185f", "test.harmony.not_null_tranquil_txs_tx_type.04f0e47be1", "test.harmony.not_null_tranquil_txs_user_address.c5c46adeae", "test.harmony.unique_tranquil_txs_log_id.ee665dfe23"], "model.harmony.tokenprice_gaiatear": ["model.harmony.dfk_quest_rewards", "test.harmony.not_null_tokenprice_gaiatear_price.e9055f2a26", "test.harmony.not_null_tokenprice_gaiatear_timestamp.b1f11762d7", "test.harmony.unique_tokenprice_gaiatear_timestamp.4bc0e6ede1"], "model.harmony.tokenprice_shvasrune": ["model.harmony.dfk_quest_rewards", "test.harmony.not_null_tokenprice_shvasrune_price.c2c6b5a871", "test.harmony.not_null_tokenprice_shvasrune_timestamp.12a9557a54", "test.harmony.unique_tokenprice_shvasrune_timestamp.1bba330039"], "model.harmony.tokenprice_eth": ["model.harmony.tranquil_markets_tokenprice", "test.harmony.not_null_tokenprice_eth_price.cea7d07005", "test.harmony.not_null_tokenprice_eth_timestamp.a9fcba1ba3", "test.harmony.unique_tokenprice_eth_timestamp.e64a320f18"], "model.harmony.tokenprice_stone": ["model.harmony.tranquil_markets_tokenprice", "test.harmony.not_null_tokenprice_stone_price.9d01834762", "test.harmony.not_null_tokenprice_stone_timestamp.1e827176bb", "test.harmony.unique_tokenprice_stone_timestamp.213c69340a"], "model.harmony.tokenprice_usd": ["model.harmony.tranquil_markets_tokenprice", "model.harmony.tranquil_markets_tokenprice", "model.harmony.tranquil_markets_tokenprice", "test.harmony.not_null_tokenprice_usd_price.240f53ff0b", "test.harmony.not_null_tokenprice_usd_timestamp.b838b4a738", "test.harmony.unique_tokenprice_usd_timestamp.fc397d4b13"], "model.harmony.tokenprice_dfkgold": ["model.harmony.dfk_quest_rewards", "test.harmony.not_null_tokenprice_dfkgold_price.7aff81d199", "test.harmony.not_null_tokenprice_dfkgold_timestamp.f82703b2bc", "test.harmony.unique_tokenprice_dfkgold_timestamp.71e30aa140"], "model.harmony.tokenprice_one": ["model.harmony.tokenprice_stone", "model.harmony.tranquil_markets_tokenprice", "test.harmony.not_null_tokenprice_one_price.9fedd60475", "test.harmony.not_null_tokenprice_one_timestamp.696359f1d2", "test.harmony.unique_tokenprice_one_timestamp.35687e8a10"], "model.harmony.tokenprice_jewel": ["model.harmony.dfk_hero_rental", "model.harmony.dfk_hero_sales", "model.harmony.dfk_quest_rewards", "model.harmony.tokenprice_btc", "model.harmony.tokenprice_dfkgold", "model.harmony.tokenprice_eth", "model.harmony.tokenprice_gaiatear", "model.harmony.tokenprice_one", "model.harmony.tokenprice_shvasrune", "test.harmony.not_null_tokenprice_jewel_price.55d8fb7952", "test.harmony.not_null_tokenprice_jewel_timestamp.c95057f07f", "test.harmony.unique_tokenprice_jewel_timestamp.464d07552e"], "model.harmony.tokenprices": ["model.harmony.sushiswap_lp_actions", "model.harmony.viperswap_lp_actions", "test.harmony.not_null_tokenprices_block_date.9e7830a534", "test.harmony.not_null_tokenprices_key.248bd37af9", "test.harmony.not_null_tokenprices_token_address.553c7ecbc9", "test.harmony.not_null_tokenprices_token_symbol.ad788d700d", "test.harmony.not_null_tokenprices_token_volume.f81cd2a394", "test.harmony.not_null_tokenprices_usd_price.ad956c060f", "test.harmony.not_null_tokenprices_usd_volume.06e472dad5", "test.harmony.unique_tokenprices_key.dce80052a0"], "model.harmony.tokenprice_btc": ["model.harmony.tranquil_markets_tokenprice", "model.harmony.tranquil_markets_tokenprice", "test.harmony.not_null_tokenprice_btc_price.4b83451ce2", "test.harmony.not_null_tokenprice_btc_timestamp.960a420451", "test.harmony.unique_tokenprice_btc_timestamp.7cfb2382cb"], "model.harmony.dfk_seed_harvests": ["test.harmony.not_null_dfk_seed_harvests_block_number.94b33d4c1d", "test.harmony.not_null_dfk_seed_harvests_block_timestamp.39e6a8ee79", "test.harmony.not_null_dfk_seed_harvests_from_address.052f2540b6", "test.harmony.not_null_dfk_seed_harvests_garden_epoch.1fff8ab18d", "test.harmony.not_null_dfk_seed_harvests_ingested_at.5c10bb344c", "test.harmony.not_null_dfk_seed_harvests_jewel_locked.0288e7217f", "test.harmony.not_null_dfk_seed_harvests_jewel_unlocked.9e26f9d4a4", "test.harmony.not_null_dfk_seed_harvests_native_from_address.0ec5d4c793", "test.harmony.not_null_dfk_seed_harvests_tx_hash.80cb588c5d", "test.harmony.unique_dfk_seed_harvests_tx_hash.99d4d1e0aa"], "model.harmony.dfk_potions_crafted": ["test.harmony.not_null_dfk_potions_crafted_block_timestamp.24333b5359", "test.harmony.not_null_dfk_potions_crafted_crafter.908f7c51d2", "test.harmony.not_null_dfk_potions_crafted_ingested_at.8333dbecd6", "test.harmony.not_null_dfk_potions_crafted_potion_type.731da0f49c", "test.harmony.not_null_dfk_potions_crafted_potions_crafted.dd8097c9bf", "test.harmony.not_null_dfk_potions_crafted_tx_hash.b36dd3c642", "test.harmony.unique_dfk_potions_crafted_tx_hash.921954e171"], "model.harmony.dfk_bank_transactions": ["test.harmony.not_null_dfk_bank_transactions_block_timestamp.8a580bfb29", "test.harmony.not_null_dfk_bank_transactions_from_address.30a9faaa1f", "test.harmony.not_null_dfk_bank_transactions_ingested_at.1525787d28", "test.harmony.not_null_dfk_bank_transactions_jewel_amount.c5c19d0070", "test.harmony.not_null_dfk_bank_transactions_native_from_address.eb283bdf82", "test.harmony.not_null_dfk_bank_transactions_tx_hash.5b7b36a100", "test.harmony.not_null_dfk_bank_transactions_type.0122242487", "test.harmony.not_null_dfk_bank_transactions_xjewel_amount.e2b867313b", "test.harmony.unique_dfk_bank_transactions_tx_hash.6a574eb80e"], "model.harmony.dfk_quest_rewards": ["test.harmony.not_null_dfk_quest_rewards_amount_usd.55e7b8fe00", "test.harmony.not_null_dfk_quest_rewards_block_timestamp.33b0d48b64", "test.harmony.not_null_dfk_quest_rewards_calculated_value.c187e76f86", "test.harmony.not_null_dfk_quest_rewards_evm_contract_address.6e887b1a40", "test.harmony.not_null_dfk_quest_rewards_from_address.fa86619b22", "test.harmony.not_null_dfk_quest_rewards_ingested_at.8c2eda3de0", "test.harmony.not_null_dfk_quest_rewards_log_id.d8a2c2e745", "test.harmony.not_null_dfk_quest_rewards_to_address.7c408caace", "test.harmony.not_null_dfk_quest_rewards_token_name.1f68aecefb", "test.harmony.not_null_dfk_quest_rewards_tx_hash.20e4a48bb4", "test.harmony.unique_dfk_quest_rewards_log_id.181d50274c"], "model.harmony.dfk_hero_summons": ["test.harmony.not_null_dfk_hero_summons_block_timestamp.3882749bc8", "test.harmony.not_null_dfk_hero_summons_crystal_id.a052476168", "test.harmony.not_null_dfk_hero_summons_hero_id.dc487032ac", "test.harmony.not_null_dfk_hero_summons_ingested_at.aaf9c8b651", "test.harmony.not_null_dfk_hero_summons_summoneer.b4601e6e8c", "test.harmony.not_null_dfk_hero_summons_tx_hash.e543421a67", "test.harmony.unique_dfk_hero_summons_tx_hash.ebbd8ab5c6"], "model.harmony.dfk_hero_sales": ["test.harmony.not_null_dfk_hero_sales_auction_id.632a655c34", "test.harmony.not_null_dfk_hero_sales_block_timestamp.de1dd507fd", "test.harmony.not_null_dfk_hero_sales_buyer_address.b1b866987d", "test.harmony.not_null_dfk_hero_sales_hero_token_id.583c649524", "test.harmony.not_null_dfk_hero_sales_ingested_at.015644d5f4", "test.harmony.not_null_dfk_hero_sales_tax_jewels.91da0b7dba", "test.harmony.not_null_dfk_hero_sales_tax_usd.f1ae7d543c", "test.harmony.not_null_dfk_hero_sales_total_jewels.12a1d5c1eb", "test.harmony.not_null_dfk_hero_sales_total_usd.8aa69d6d8f", "test.harmony.not_null_dfk_hero_sales_tx_hash.ad6991f7e2", "test.harmony.unique_dfk_hero_sales_tx_hash.15a6f08266"], "model.harmony.dfk_hero_rental": ["test.harmony.not_null_dfk_hero_rental_amount_usd.182e104a9c", "test.harmony.not_null_dfk_hero_rental_block_timestamp.fe79e6721b", "test.harmony.not_null_dfk_hero_rental_ingested_at.bfeaba7cd3", "test.harmony.not_null_dfk_hero_rental_jewel_amount.1ec981b976", "test.harmony.not_null_dfk_hero_rental_renter_address.eab038232a", "test.harmony.not_null_dfk_hero_rental_tx_hash.52307d63f1", "test.harmony.not_null_dfk_hero_rental_user_address.a403584d0f", "test.harmony.unique_dfk_hero_rental_tx_hash.2b446d1e89"], "model.harmony.dfk_item_transactions": ["test.harmony.not_null_dfk_item_transactions_amount_give.f950d75693", "test.harmony.not_null_dfk_item_transactions_amount_take.5839c661a6", "test.harmony.not_null_dfk_item_transactions_block_timestamp.896f37f711", "test.harmony.not_null_dfk_item_transactions_from_address.62cf0232cb", "test.harmony.not_null_dfk_item_transactions_ingested_at.2003546fbd", "test.harmony.not_null_dfk_item_transactions_market_action.a64adadbe3", "test.harmony.not_null_dfk_item_transactions_native_from_address.5e4f787217", "test.harmony.not_null_dfk_item_transactions_token_give_address.92b8c165a4", "test.harmony.not_null_dfk_item_transactions_token_take_address.368da9df1d", "test.harmony.not_null_dfk_item_transactions_tx_hash.7a5c029a90", "test.harmony.unique_dfk_item_transactions_tx_hash.de03a99a4b"], "model.harmony.dfk_hero_updates": ["test.harmony.not_null_dfk_hero_updates_block_id.e9e7a0ded2", "test.harmony.not_null_dfk_hero_updates_block_timestamp.5d82714d00", "test.harmony.not_null_dfk_hero_updates_hero_id.806b206a3a", "test.harmony.not_null_dfk_hero_updates_hero_info_class.608d235cae", "test.harmony.not_null_dfk_hero_updates_hero_info_firstname.58498ff9e4", "test.harmony.not_null_dfk_hero_updates_hero_info_generation.d99f46cb63", "test.harmony.not_null_dfk_hero_updates_hero_info_lastname.8d9ec5807a", "test.harmony.not_null_dfk_hero_updates_hero_info_rarity.f7584bce66", "test.harmony.not_null_dfk_hero_updates_hero_info_shiny.edcc558f1c", "test.harmony.not_null_dfk_hero_updates_hero_info_shinystyle.3a5fe7028e", "test.harmony.not_null_dfk_hero_updates_hero_info_statgenes.378ac74eba", "test.harmony.not_null_dfk_hero_updates_hero_info_subclass.c1d4108382", "test.harmony.not_null_dfk_hero_updates_hero_info_visualgenes.408ee79a50", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_agility.95eb68d12d", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_dexterity.37ea684305", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_endurance.3c3da2d64e", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hplg.b9753af52e", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hprg.bb2f7e28d0", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hpsm.333f55e23d", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_intelligence.c0c7b4e8ef", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_luck.67fdc5d9fc", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mplg.9311fd2515", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mprg.84c957d14c", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mpsm.ff48bffa5b", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_strength.e636522ec5", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_vitality.833a942c85", "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_wisdom.e638b91e7e", "test.harmony.not_null_dfk_hero_updates_hero_professions_fishing.1e12aef556", "test.harmony.not_null_dfk_hero_updates_hero_professions_foraging.13cbb9fba2", "test.harmony.not_null_dfk_hero_updates_hero_professions_gardening.16ddc4e962", "test.harmony.not_null_dfk_hero_updates_hero_professions_mining.6ebcec049d", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_agility.61f9e2c0ad", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_dexterity.5a4a4d002b", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_endurance.3936bfabaf", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hplg.89204a4088", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hprg.bd4afb8a71", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hpsm.3519b0a108", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_intelligence.4a0bd8fedc", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_luck.85df403797", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mplg.6dcf7dd34a", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mprg.99bb003e4f", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mpsm.9b791a152b", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_strength.f698be1f0d", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_vitality.e12340f529", "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_wisdom.c77b6e7f75", "test.harmony.not_null_dfk_hero_updates_hero_state_currentquest.3e5968e41b", "test.harmony.not_null_dfk_hero_updates_hero_state_hpfullat.1a510462d5", "test.harmony.not_null_dfk_hero_updates_hero_state_level.9a7dda4838", "test.harmony.not_null_dfk_hero_updates_hero_state_mpfullat.e3adfafadc", "test.harmony.not_null_dfk_hero_updates_hero_state_sp.5b5683c285", "test.harmony.not_null_dfk_hero_updates_hero_state_staminafullat.19bd4c7531", "test.harmony.not_null_dfk_hero_updates_hero_state_status.83f33d6965", "test.harmony.not_null_dfk_hero_updates_hero_state_xp.431cbf7c00", "test.harmony.not_null_dfk_hero_updates_hero_stats_agility.3c50b6f002", "test.harmony.not_null_dfk_hero_updates_hero_stats_dexterity.968ab5dc9f", "test.harmony.not_null_dfk_hero_updates_hero_stats_endurance.c6d90b953a", "test.harmony.not_null_dfk_hero_updates_hero_stats_hp.650ee449b0", "test.harmony.not_null_dfk_hero_updates_hero_stats_intelligence.0b346639a5", "test.harmony.not_null_dfk_hero_updates_hero_stats_luck.fa486fc10a", "test.harmony.not_null_dfk_hero_updates_hero_stats_mp.e377a9e808", "test.harmony.not_null_dfk_hero_updates_hero_stats_stamina.0e28f15d14", "test.harmony.not_null_dfk_hero_updates_hero_stats_strength.420858698e", "test.harmony.not_null_dfk_hero_updates_hero_stats_vitality.39bee4d71b", "test.harmony.not_null_dfk_hero_updates_hero_stats_wisdom.b22899144a", "test.harmony.not_null_dfk_hero_updates_ingested_at.eb40ac7d41", "test.harmony.not_null_dfk_hero_updates_log_id.76fbf6753e", "test.harmony.not_null_dfk_hero_updates_summoning_info_assistantid.df3ecd1be2", "test.harmony.not_null_dfk_hero_updates_summoning_info_maxsummons.02ba30e162", "test.harmony.not_null_dfk_hero_updates_summoning_info_nextsummontime.4f9c4e6309", "test.harmony.not_null_dfk_hero_updates_summoning_info_summonedtime.014ee3d7d0", "test.harmony.not_null_dfk_hero_updates_summoning_info_summonerid.f22490372d", "test.harmony.not_null_dfk_hero_updates_summoning_info_summons.3b741f449e", "test.harmony.unique_dfk_hero_updates_log_id.eb1ed2ddc0"], "model.harmony.dfk_seed_liquidity_actions": ["test.harmony.not_null_dfk_seed_liquidity_actions_action.eac7589e37", "test.harmony.not_null_dfk_seed_liquidity_actions_block_id.8579bb9a85", "test.harmony.not_null_dfk_seed_liquidity_actions_block_timestamp.143c23fece", "test.harmony.not_null_dfk_seed_liquidity_actions_eth_lp_address.5713259131", "test.harmony.not_null_dfk_seed_liquidity_actions_ingested_at.fed78e06bc", "test.harmony.not_null_dfk_seed_liquidity_actions_log_id.290eb334e4", "test.harmony.not_null_dfk_seed_liquidity_actions_one_lp_address.d711aafe1e", "test.harmony.not_null_dfk_seed_liquidity_actions_pool_name.85e6365239", "test.harmony.not_null_dfk_seed_liquidity_actions_token0_address.0f2f408a84", "test.harmony.not_null_dfk_seed_liquidity_actions_token1_address.9776668543", "test.harmony.not_null_dfk_seed_liquidity_actions_tx_hash.c6a0b2cfe4", "test.harmony.unique_dfk_seed_liquidity_actions_log_id.5ff183d9e4"], "model.harmony.viperswap_lp_actions": ["test.harmony.not_null_viperswap_lp_actions_action.f917333944", "test.harmony.not_null_viperswap_lp_actions_amount0_raw.e2e61e6162", "test.harmony.not_null_viperswap_lp_actions_amount1_raw.5d6166ac9a", "test.harmony.not_null_viperswap_lp_actions_block_id.13bbade106", "test.harmony.not_null_viperswap_lp_actions_block_timestamp.22e023bed4", "test.harmony.not_null_viperswap_lp_actions_ingested_at.c6199b65f5", "test.harmony.not_null_viperswap_lp_actions_liquidity_provider.4871ab7a4f", "test.harmony.not_null_viperswap_lp_actions_log_id.fed60c0c15", "test.harmony.not_null_viperswap_lp_actions_pool_address.ae66749669", "test.harmony.not_null_viperswap_lp_actions_tx_hash.29f131a5e2", "test.harmony.unique_viperswap_lp_actions_log_id.42c0280195"], "seed.harmony.dfk_tokens": ["model.harmony.tokens", "model.harmony.tokens"], "seed.harmony.dfk_dex_lp_labels": ["model.harmony.liquidity_pools", "model.harmony.liquidity_pools"], "seed.harmony.backfill_pools_data": ["model.harmony.liquidity_pools"], "seed.harmony.harmony_explorer_tokens": ["model.harmony.tokens"], "seed.harmony.harmony_stable_tokens": ["model.harmony.stg_tokenprice_from_swaps"], "seed.harmony.backfill_tokens_data": ["model.harmony.tokens"], "seed.harmony.tranquil_market_labels": ["model.harmony.tranquil_daily_supply_borrow", "model.harmony.tranquil_txs"], "seed.harmony.dfk_item_to_gold": ["model.harmony.dfk_quest_rewards"], "test.harmony.not_null_metric_gas_used_count_metric_date.4a0eb3c505": [], "test.harmony.not_null_metric_gas_used_count_metric_period.452eb8b3d7": [], "test.harmony.not_null_metric_gas_used_count_gas_total.ea230e6e01": [], "test.harmony.not_null_metric_transactions_count_metric_date.a0ba3ef0a1": [], "test.harmony.not_null_metric_transactions_count_metric_period.5c51be1b98": [], "test.harmony.not_null_metric_transactions_count_txs_count.4e26fab0f3": [], "test.harmony.not_null_metric_miner_count_metric_date.c62b8a3b14": [], "test.harmony.not_null_metric_miner_count_metric_period.0c3abeb408": [], "test.harmony.not_null_metric_miner_count_miner_count.9d6e2fb19b": [], "test.harmony.not_null_metric_unique_users_count_metric_date.8e870921c3": [], "test.harmony.not_null_metric_unique_users_count_metric_period.0420fc3861": [], "test.harmony.not_null_metric_unique_users_count_unique_users_count.fc29ed7470": [], "test.harmony.not_null_metric_unique_users_count_unique_users_cumulative.5a0421d0e6": [], "test.harmony.not_null_metric_erc20_transfers_count_metric_date.d92fe99fd7": [], "test.harmony.not_null_metric_erc20_transfers_count_metric_period.76b6cff96a": [], "test.harmony.not_null_metric_erc20_transfers_count_transfers_count.929d391ccb": [], "test.harmony.not_null_stg_txs_record_id.cde613d2f1": [], "test.harmony.not_null_stg_txs_tx_id.6ca0194e5a": [], "test.harmony.not_null_stg_txs_tx_block_index.5edea4684a": [], "test.harmony.not_null_stg_txs_offset_id.ded9486e64": [], "test.harmony.not_null_stg_txs_block_id.705b788dc6": [], "test.harmony.not_null_stg_txs_block_timestamp.0eae229ba1": [], "test.harmony.not_null_stg_txs_network.89f4d31e91": [], "test.harmony.not_null_stg_txs_chain_id.fdb1c9956d": [], "test.harmony.not_null_stg_txs_ingested_at.ad55bb9e47": [], "test.harmony.not_null_stg_delegators_ingest_timestamp.5c02b89faf": [], "test.harmony.not_null_stg_delegators_day_date.defe482aef": [], "test.harmony.not_null_stg_delegators_validator_address.f3f0e33492": [], "test.harmony.not_null_stg_delegators_validator_identity.55aed20cd9": [], "test.harmony.not_null_stg_delegators_delegations.abcb6ce8fd": [], "test.harmony.not_null_stg_delegators_total_delegation.5010d275b4": [], "test.harmony.not_null_stg_delegators_total_delegator_count.7cfe837d1d": [], "test.harmony.not_null_stg_tokenprice_from_swaps_block_date.db204690a0": [], "test.harmony.not_null_stg_tokenprice_from_swaps_token_address.a09b5b4dcb": [], "test.harmony.not_null_stg_tokenprice_from_swaps_token_symbol.07ecb6a41e": [], "test.harmony.not_null_stg_tokenprice_from_swaps_usd_price.ea7453ba8b": [], "test.harmony.not_null_stg_tokenprice_from_swaps_usd_volume.a6cd8a6d28": [], "test.harmony.not_null_stg_tokenprice_from_swaps_token_volume.a99dbe42d3": [], "test.harmony.not_null_stg_tokenprice_from_swaps_pair_token_for_price.7c12c493e9": [], "test.harmony.not_null_stg_tokenprice_from_swaps_pair_symbol_for_price.505c85c86a": [], "test.harmony.not_null_stg_tokenprice_from_swaps_volume_for_price.9994df39d5": [], "test.harmony.not_null_stg_tokenprice_from_swaps_key.a0c3769066": [], "test.harmony.unique_stg_tokenprice_from_swaps_key.5c3ec7c700": [], "test.harmony.not_null_stg_tokenprice_from_swaps_lookup_round.56a999e64a": [], "test.harmony.not_null_stg_blocks_record_id.120642bef2": [], "test.harmony.not_null_stg_blocks_offset_id.530a409a08": [], "test.harmony.not_null_stg_blocks_block_id.1ded7ed662": [], "test.harmony.not_null_stg_blocks_block_timestamp.87c5f1915b": [], "test.harmony.not_null_stg_blocks_network.faf2bb40dd": [], "test.harmony.not_null_stg_blocks_chain_id.5794c79333": [], "test.harmony.not_null_stg_blocks_tx_count.10a456056a": [], "test.harmony.not_null_stg_blocks_header.cd46f3c5a5": [], "test.harmony.not_null_stg_blocks_ingested_at.7b953999e0": [], "test.harmony.not_null_stg_ant_ingest_ingest_timestamp.8f1622cdb7": [], "test.harmony.unique_sushiswap_lp_actions_log_id.992d51f31a": [], "test.harmony.not_null_sushiswap_lp_actions_log_id.1e0108487a": [], "test.harmony.not_null_sushiswap_lp_actions_block_timestamp.f6c0a02608": [], "test.harmony.not_null_sushiswap_lp_actions_tx_hash.a09ca7ef95": [], "test.harmony.not_null_sushiswap_lp_actions_liquidity_provider.48f0335b57": [], "test.harmony.not_null_sushiswap_lp_actions_pool_address.e8adf279f1": [], "test.harmony.not_null_sushiswap_lp_actions_pool_name.4283540719": [], "test.harmony.not_null_sushiswap_lp_actions_token0.04702ced55": [], "test.harmony.not_null_sushiswap_lp_actions_token1.306284a205": [], "test.harmony.not_null_sushiswap_lp_actions_action.8783363d62": [], "test.harmony.unique_validators_u_key.1a041149bf": [], "test.harmony.not_null_validators_u_key.c2a23189a9": [], "test.harmony.not_null_validators_day_date.fcd5e2f119": [], "test.harmony.not_null_validators_validator_address.d425c825be": [], "test.harmony.not_null_validators_validator_hex_address.2b0ca6958d": [], "test.harmony.not_null_validators_validator_identity.b113614b7c": [], "test.harmony.not_null_validators_active_status.4441826ad0": [], "test.harmony.not_null_validators_total_one_delegated.70a13fb852": [], "test.harmony.not_null_validators_total_one_rewarded.177c7e37dc": [], "test.harmony.not_null_validators_total_one_undelegated.5342e21372": [], "test.harmony.not_null_swaps_block_timestamp.5d3288de7d": [], "test.harmony.not_null_swaps_ingested_at.c7fb2cdf29": [], "test.harmony.not_null_swaps_log_id.2ca95384a4": [], "test.harmony.unique_swaps_log_id.f5bf2166b8": [], "test.harmony.not_null_swaps_tx_hash.45f63d6a6d": [], "test.harmony.not_null_swaps_pool_address.8e2188071f": [], "test.harmony.not_null_swaps_amount0In.5c503a8e41": [], "test.harmony.not_null_swaps_amount0Out.de7b24755d": [], "test.harmony.not_null_swaps_amount1In.c15b0b307d": [], "test.harmony.not_null_swaps_amount1Out.dd655a2a88": [], "test.harmony.not_null_swaps_from_address.d7528e5d54": [], "test.harmony.not_null_swaps_to_address.1cc0a11155": [], "test.harmony.unique_logs_log_id.f25b608512": [], "test.harmony.not_null_logs_log_id.f4da856ee6": [], "test.harmony.not_null_logs_block_id.b7026e9962": [], "test.harmony.not_null_logs_block_timestamp.2b6ad6b9f2": [], "test.harmony.not_null_logs_ingested_at.471bc62a90": [], "test.harmony.not_null_logs_tx_hash.de211e27c7": [], "test.harmony.not_null_logs_event_index.16f3fe5212": [], "test.harmony.not_null_logs_native_contract_address.9250381076": [], "test.harmony.not_null_logs_evm_contract_address.cd39018b68": [], "test.harmony.not_null_logs_topics.6d9f87e3ef": [], "test.harmony.not_null_logs_data.e1331bb0e3": [], "test.harmony.not_null_logs_event_removed.811c385fa4": [], "test.harmony.unique_transfers_log_id.c52ad13d9c": [], "test.harmony.not_null_transfers_log_id.e3335603cc": [], "test.harmony.not_null_transfers_block_id.8563ace82f": [], "test.harmony.not_null_transfers_tx_hash.f917940677": [], "test.harmony.not_null_transfers_block_timestamp.1ee2080d0f": [], "test.harmony.not_null_transfers_ingested_at.2973350946": [], "test.harmony.not_null_transfers_contract_address.bb3139097d": [], "test.harmony.not_null_transfers_from_address.2fb510e338": [], "test.harmony.not_null_transfers_to_address.fb7c1028bc": [], "test.harmony.not_null_transfers_raw_amount.0cbb84fe98": [], "test.harmony.not_null_txs_block_timestamp.8ef5450d62": [], "test.harmony.not_null_txs_ingested_at.314927472a": [], "test.harmony.not_null_txs_nonce.7f8a213b50": [], "test.harmony.not_null_txs_native_from_address.957b997570": [], "test.harmony.not_null_txs_native_to_address.d8bc78d945": [], "test.harmony.not_null_txs_from_address.d9889ce7a7": [], "test.harmony.not_null_txs_to_address.1133d6e894": [], "test.harmony.not_null_txs_value.afdf3ec4e4": [], "test.harmony.not_null_txs_gas_price.d358615965": [], "test.harmony.not_null_txs_gas.6961e08eff": [], "test.harmony.not_null_txs_tx_hash.a718ce56dd": [], "test.harmony.unique_txs_tx_hash.57f702658d": [], "test.harmony.not_null_txs_data.9e837c9d87": [], "test.harmony.not_null_txs_status.a6404fa35e": [], "test.harmony.unique_btc_bridge_log_id.dc62ce7d29": [], "test.harmony.not_null_btc_bridge_log_id.32a932e33f": [], "test.harmony.not_null_btc_bridge_block_id.915dd88258": [], "test.harmony.not_null_btc_bridge_tx_hash.4af9bb9dc3": [], "test.harmony.not_null_btc_bridge_block_timestamp.bee9636f47": [], "test.harmony.not_null_btc_bridge_ingested_at.6dbd126cd3": [], "test.harmony.not_null_btc_bridge_contract_address.7739f76dd2": [], "test.harmony.not_null_btc_bridge_from_address.704b573f4b": [], "test.harmony.not_null_btc_bridge_to_address.3662fdc894": [], "test.harmony.not_null_btc_bridge_tx_type.7148bf48d6": [], "test.harmony.accepted_values_btc_bridge_tx_type__True__issue__redeem.53c7451a12": [], "test.harmony.not_null_btc_bridge_is_vault.53fa8b2ebb": [], "test.harmony.not_null_btc_bridge_raw_amount.9e1b7ab3e0": [], "test.harmony.unique_blocks_block_id.44b12036dd": [], "test.harmony.not_null_blocks_block_id.27dfbcb068": [], "test.harmony.not_null_blocks_block_timestamp.aa760dde19": [], "test.harmony.not_null_blocks_ingested_at.859ac7d611": [], "test.harmony.unique_blocks_block_hash.e25d7e2970": [], "test.harmony.not_null_blocks_block_hash.f93dc2372d": [], "test.harmony.unique_blocks_block_parent_hash.af1623766d": [], "test.harmony.not_null_blocks_block_parent_hash.f9bbb459e0": [], "test.harmony.not_null_blocks_gas_limit.f3d264290d": [], "test.harmony.not_null_blocks_gas_used.70b3b7d3fa": [], "test.harmony.not_null_blocks_miner.29cc4b19a7": [], "test.harmony.not_null_blocks_nonce.0943cbfeed": [], "test.harmony.not_null_blocks_size.ad5782522f": [], "test.harmony.not_null_blocks_tx_count.a43c2db24e": [], "test.harmony.not_null_blocks_state_root.7c516b3871": [], "test.harmony.not_null_blocks_receipts_root.c17d662161": [], "test.harmony.unique_liquidity_pools_pool_address.be2b9f6549": [], "test.harmony.not_null_liquidity_pools_pool_address.8fd9b96a56": [], "test.harmony.not_null_liquidity_pools_pool_name.ee41ec63dc": [], "test.harmony.not_null_liquidity_pools_token0.cf9b78ba02": [], "test.harmony.not_null_liquidity_pools_token1.cd051a6071": [], "test.harmony.unique_tokens_token_address.9d9193ee34": [], "test.harmony.not_null_tokens_token_address.d9e6576877": [], "test.harmony.not_null_tokens_token_symbol.b9037dba39": [], "test.harmony.not_null_tokens_decimals.48a7b1db68": [], "test.harmony.not_null_tranquil_daily_supply_borrow_token_symbol.21fbf58bb9": [], "test.harmony.not_null_tranquil_daily_supply_borrow_block_date.1aeee85431": [], "test.harmony.not_null_tranquil_daily_supply_borrow_price.d6abc5f43b": [], "test.harmony.not_null_tranquil_markets_tokenprice_token_symbol.5911fa7339": [], "test.harmony.not_null_tranquil_markets_tokenprice_timestamp.d13951c4a3": [], "test.harmony.not_null_tranquil_markets_tokenprice_price.f685b7fcd7": [], "test.harmony.unique_tranquil_txs_log_id.ee665dfe23": [], "test.harmony.not_null_tranquil_txs_log_id.a063f813b3": [], "test.harmony.not_null_tranquil_txs_tx_hash.b79bf2185f": [], "test.harmony.not_null_tranquil_txs_block_timestamp.2e90ec8f55": [], "test.harmony.not_null_tranquil_txs_block_id.0b4429bacd": [], "test.harmony.not_null_tranquil_txs_user_address.c5c46adeae": [], "test.harmony.not_null_tranquil_txs_evm_contract_address.0592e58a69": [], "test.harmony.not_null_tranquil_txs_token_symbol.c654f00a7f": [], "test.harmony.not_null_tranquil_txs_token_amount_raw.b4a6586754": [], "test.harmony.not_null_tranquil_txs_token_amount.0db3f42715": [], "test.harmony.not_null_tranquil_txs_tx_type.04f0e47be1": [], "test.harmony.not_null_tokenprice_eth_timestamp.a9fcba1ba3": [], "test.harmony.unique_tokenprice_eth_timestamp.e64a320f18": [], "test.harmony.not_null_tokenprice_eth_price.cea7d07005": [], "test.harmony.not_null_tokenprice_stone_timestamp.1e827176bb": [], "test.harmony.unique_tokenprice_stone_timestamp.213c69340a": [], "test.harmony.not_null_tokenprice_stone_price.9d01834762": [], "test.harmony.not_null_tokenprice_usd_timestamp.b838b4a738": [], "test.harmony.unique_tokenprice_usd_timestamp.fc397d4b13": [], "test.harmony.not_null_tokenprice_usd_price.240f53ff0b": [], "test.harmony.not_null_tokenprice_dfkgold_timestamp.f82703b2bc": [], "test.harmony.unique_tokenprice_dfkgold_timestamp.71e30aa140": [], "test.harmony.not_null_tokenprice_dfkgold_price.7aff81d199": [], "test.harmony.not_null_tokenprice_gaiatear_timestamp.b1f11762d7": [], "test.harmony.unique_tokenprice_gaiatear_timestamp.4bc0e6ede1": [], "test.harmony.not_null_tokenprice_gaiatear_price.e9055f2a26": [], "test.harmony.not_null_tokenprice_shvasrune_timestamp.12a9557a54": [], "test.harmony.unique_tokenprice_shvasrune_timestamp.1bba330039": [], "test.harmony.not_null_tokenprice_shvasrune_price.c2c6b5a871": [], "test.harmony.not_null_tokenprice_btc_timestamp.960a420451": [], "test.harmony.unique_tokenprice_btc_timestamp.7cfb2382cb": [], "test.harmony.not_null_tokenprice_btc_price.4b83451ce2": [], "test.harmony.not_null_tokenprice_one_timestamp.696359f1d2": [], "test.harmony.unique_tokenprice_one_timestamp.35687e8a10": [], "test.harmony.not_null_tokenprice_one_price.9fedd60475": [], "test.harmony.not_null_tokenprice_jewel_timestamp.c95057f07f": [], "test.harmony.unique_tokenprice_jewel_timestamp.464d07552e": [], "test.harmony.not_null_tokenprice_jewel_price.55d8fb7952": [], "test.harmony.not_null_tokenprices_key.248bd37af9": [], "test.harmony.unique_tokenprices_key.dce80052a0": [], "test.harmony.not_null_tokenprices_block_date.9e7830a534": [], "test.harmony.not_null_tokenprices_token_address.553c7ecbc9": [], "test.harmony.not_null_tokenprices_token_symbol.ad788d700d": [], "test.harmony.not_null_tokenprices_usd_price.ad956c060f": [], "test.harmony.not_null_tokenprices_usd_volume.06e472dad5": [], "test.harmony.not_null_tokenprices_token_volume.f81cd2a394": [], "test.harmony.unique_dfk_bank_transactions_tx_hash.6a574eb80e": [], "test.harmony.not_null_dfk_bank_transactions_tx_hash.5b7b36a100": [], "test.harmony.not_null_dfk_bank_transactions_block_timestamp.8a580bfb29": [], "test.harmony.not_null_dfk_bank_transactions_ingested_at.1525787d28": [], "test.harmony.not_null_dfk_bank_transactions_native_from_address.eb283bdf82": [], "test.harmony.not_null_dfk_bank_transactions_from_address.30a9faaa1f": [], "test.harmony.not_null_dfk_bank_transactions_type.0122242487": [], "test.harmony.not_null_dfk_bank_transactions_jewel_amount.c5c19d0070": [], "test.harmony.not_null_dfk_bank_transactions_xjewel_amount.e2b867313b": [], "test.harmony.not_null_dfk_quest_rewards_log_id.d8a2c2e745": [], "test.harmony.unique_dfk_quest_rewards_log_id.181d50274c": [], "test.harmony.not_null_dfk_quest_rewards_block_timestamp.33b0d48b64": [], "test.harmony.not_null_dfk_quest_rewards_ingested_at.8c2eda3de0": [], "test.harmony.not_null_dfk_quest_rewards_evm_contract_address.6e887b1a40": [], "test.harmony.not_null_dfk_quest_rewards_token_name.1f68aecefb": [], "test.harmony.not_null_dfk_quest_rewards_from_address.fa86619b22": [], "test.harmony.not_null_dfk_quest_rewards_to_address.7c408caace": [], "test.harmony.not_null_dfk_quest_rewards_calculated_value.c187e76f86": [], "test.harmony.not_null_dfk_quest_rewards_tx_hash.20e4a48bb4": [], "test.harmony.not_null_dfk_quest_rewards_amount_usd.55e7b8fe00": [], "test.harmony.not_null_dfk_hero_summons_tx_hash.e543421a67": [], "test.harmony.unique_dfk_hero_summons_tx_hash.ebbd8ab5c6": [], "test.harmony.not_null_dfk_hero_summons_block_timestamp.3882749bc8": [], "test.harmony.not_null_dfk_hero_summons_ingested_at.aaf9c8b651": [], "test.harmony.not_null_dfk_hero_summons_hero_id.dc487032ac": [], "test.harmony.not_null_dfk_hero_summons_crystal_id.a052476168": [], "test.harmony.not_null_dfk_hero_summons_summoneer.b4601e6e8c": [], "test.harmony.not_null_dfk_hero_sales_tx_hash.ad6991f7e2": [], "test.harmony.unique_dfk_hero_sales_tx_hash.15a6f08266": [], "test.harmony.not_null_dfk_hero_sales_block_timestamp.de1dd507fd": [], "test.harmony.not_null_dfk_hero_sales_ingested_at.015644d5f4": [], "test.harmony.not_null_dfk_hero_sales_hero_token_id.583c649524": [], "test.harmony.not_null_dfk_hero_sales_auction_id.632a655c34": [], "test.harmony.not_null_dfk_hero_sales_total_jewels.12a1d5c1eb": [], "test.harmony.not_null_dfk_hero_sales_tax_jewels.91da0b7dba": [], "test.harmony.not_null_dfk_hero_sales_total_usd.8aa69d6d8f": [], "test.harmony.not_null_dfk_hero_sales_tax_usd.f1ae7d543c": [], "test.harmony.not_null_dfk_hero_sales_buyer_address.b1b866987d": [], "test.harmony.not_null_dfk_seed_harvests_block_timestamp.39e6a8ee79": [], "test.harmony.not_null_dfk_seed_harvests_ingested_at.5c10bb344c": [], "test.harmony.not_null_dfk_seed_harvests_block_number.94b33d4c1d": [], "test.harmony.not_null_dfk_seed_harvests_garden_epoch.1fff8ab18d": [], "test.harmony.not_null_dfk_seed_harvests_native_from_address.0ec5d4c793": [], "test.harmony.not_null_dfk_seed_harvests_from_address.052f2540b6": [], "test.harmony.unique_dfk_seed_harvests_tx_hash.99d4d1e0aa": [], "test.harmony.not_null_dfk_seed_harvests_tx_hash.80cb588c5d": [], "test.harmony.not_null_dfk_seed_harvests_jewel_locked.0288e7217f": [], "test.harmony.not_null_dfk_seed_harvests_jewel_unlocked.9e26f9d4a4": [], "test.harmony.not_null_dfk_potions_crafted_tx_hash.b36dd3c642": [], "test.harmony.unique_dfk_potions_crafted_tx_hash.921954e171": [], "test.harmony.not_null_dfk_potions_crafted_block_timestamp.24333b5359": [], "test.harmony.not_null_dfk_potions_crafted_ingested_at.8333dbecd6": [], "test.harmony.not_null_dfk_potions_crafted_crafter.908f7c51d2": [], "test.harmony.not_null_dfk_potions_crafted_potion_type.731da0f49c": [], "test.harmony.not_null_dfk_potions_crafted_potions_crafted.dd8097c9bf": [], "test.harmony.unique_dfk_item_transactions_tx_hash.de03a99a4b": [], "test.harmony.not_null_dfk_item_transactions_tx_hash.7a5c029a90": [], "test.harmony.not_null_dfk_item_transactions_block_timestamp.896f37f711": [], "test.harmony.not_null_dfk_item_transactions_ingested_at.2003546fbd": [], "test.harmony.not_null_dfk_item_transactions_native_from_address.5e4f787217": [], "test.harmony.not_null_dfk_item_transactions_from_address.62cf0232cb": [], "test.harmony.not_null_dfk_item_transactions_market_action.a64adadbe3": [], "test.harmony.not_null_dfk_item_transactions_amount_give.f950d75693": [], "test.harmony.not_null_dfk_item_transactions_token_give_address.92b8c165a4": [], "test.harmony.not_null_dfk_item_transactions_amount_take.5839c661a6": [], "test.harmony.not_null_dfk_item_transactions_token_take_address.368da9df1d": [], "test.harmony.unique_dfk_seed_liquidity_actions_log_id.5ff183d9e4": [], "test.harmony.not_null_dfk_seed_liquidity_actions_log_id.290eb334e4": [], "test.harmony.not_null_dfk_seed_liquidity_actions_block_id.8579bb9a85": [], "test.harmony.not_null_dfk_seed_liquidity_actions_block_timestamp.143c23fece": [], "test.harmony.not_null_dfk_seed_liquidity_actions_ingested_at.fed78e06bc": [], "test.harmony.not_null_dfk_seed_liquidity_actions_tx_hash.c6a0b2cfe4": [], "test.harmony.not_null_dfk_seed_liquidity_actions_one_lp_address.d711aafe1e": [], "test.harmony.not_null_dfk_seed_liquidity_actions_eth_lp_address.5713259131": [], "test.harmony.not_null_dfk_seed_liquidity_actions_pool_name.85e6365239": [], "test.harmony.not_null_dfk_seed_liquidity_actions_token0_address.0f2f408a84": [], "test.harmony.not_null_dfk_seed_liquidity_actions_token1_address.9776668543": [], "test.harmony.not_null_dfk_seed_liquidity_actions_action.eac7589e37": [], "test.harmony.not_null_dfk_hero_rental_tx_hash.52307d63f1": [], "test.harmony.unique_dfk_hero_rental_tx_hash.2b446d1e89": [], "test.harmony.not_null_dfk_hero_rental_block_timestamp.fe79e6721b": [], "test.harmony.not_null_dfk_hero_rental_ingested_at.bfeaba7cd3": [], "test.harmony.not_null_dfk_hero_rental_jewel_amount.1ec981b976": [], "test.harmony.not_null_dfk_hero_rental_user_address.a403584d0f": [], "test.harmony.not_null_dfk_hero_rental_renter_address.eab038232a": [], "test.harmony.not_null_dfk_hero_rental_amount_usd.182e104a9c": [], "test.harmony.unique_viperswap_lp_actions_log_id.42c0280195": [], "test.harmony.not_null_viperswap_lp_actions_log_id.fed60c0c15": [], "test.harmony.not_null_viperswap_lp_actions_block_id.13bbade106": [], "test.harmony.not_null_viperswap_lp_actions_block_timestamp.22e023bed4": [], "test.harmony.not_null_viperswap_lp_actions_ingested_at.c6199b65f5": [], "test.harmony.not_null_viperswap_lp_actions_tx_hash.29f131a5e2": [], "test.harmony.not_null_viperswap_lp_actions_liquidity_provider.4871ab7a4f": [], "test.harmony.not_null_viperswap_lp_actions_action.f917333944": [], "test.harmony.not_null_viperswap_lp_actions_pool_address.ae66749669": [], "test.harmony.not_null_viperswap_lp_actions_amount0_raw.e2e61e6162": [], "test.harmony.not_null_viperswap_lp_actions_amount1_raw.5d6166ac9a": [], "test.harmony.not_null_dfk_hero_updates_block_timestamp.5d82714d00": [], "test.harmony.not_null_dfk_hero_updates_ingested_at.eb40ac7d41": [], "test.harmony.not_null_dfk_hero_updates_block_id.e9e7a0ded2": [], "test.harmony.unique_dfk_hero_updates_log_id.eb1ed2ddc0": [], "test.harmony.not_null_dfk_hero_updates_log_id.76fbf6753e": [], "test.harmony.not_null_dfk_hero_updates_hero_id.806b206a3a": [], "test.harmony.not_null_dfk_hero_updates_summoning_info_summonedtime.014ee3d7d0": [], "test.harmony.not_null_dfk_hero_updates_summoning_info_nextsummontime.4f9c4e6309": [], "test.harmony.not_null_dfk_hero_updates_summoning_info_summonerid.f22490372d": [], "test.harmony.not_null_dfk_hero_updates_summoning_info_assistantid.df3ecd1be2": [], "test.harmony.not_null_dfk_hero_updates_summoning_info_summons.3b741f449e": [], "test.harmony.not_null_dfk_hero_updates_summoning_info_maxsummons.02ba30e162": [], "test.harmony.not_null_dfk_hero_updates_hero_info_statgenes.378ac74eba": [], "test.harmony.not_null_dfk_hero_updates_hero_info_visualgenes.408ee79a50": [], "test.harmony.not_null_dfk_hero_updates_hero_info_rarity.f7584bce66": [], "test.harmony.not_null_dfk_hero_updates_hero_info_shiny.edcc558f1c": [], "test.harmony.not_null_dfk_hero_updates_hero_info_generation.d99f46cb63": [], "test.harmony.not_null_dfk_hero_updates_hero_info_firstname.58498ff9e4": [], "test.harmony.not_null_dfk_hero_updates_hero_info_lastname.8d9ec5807a": [], "test.harmony.not_null_dfk_hero_updates_hero_info_shinystyle.3a5fe7028e": [], "test.harmony.not_null_dfk_hero_updates_hero_info_class.608d235cae": [], "test.harmony.not_null_dfk_hero_updates_hero_info_subclass.c1d4108382": [], "test.harmony.not_null_dfk_hero_updates_hero_state_staminafullat.19bd4c7531": [], "test.harmony.not_null_dfk_hero_updates_hero_state_hpfullat.1a510462d5": [], "test.harmony.not_null_dfk_hero_updates_hero_state_mpfullat.e3adfafadc": [], "test.harmony.not_null_dfk_hero_updates_hero_state_level.9a7dda4838": [], "test.harmony.not_null_dfk_hero_updates_hero_state_xp.431cbf7c00": [], "test.harmony.not_null_dfk_hero_updates_hero_state_currentquest.3e5968e41b": [], "test.harmony.not_null_dfk_hero_updates_hero_state_sp.5b5683c285": [], "test.harmony.not_null_dfk_hero_updates_hero_state_status.83f33d6965": [], "test.harmony.not_null_dfk_hero_updates_hero_stats_strength.420858698e": [], "test.harmony.not_null_dfk_hero_updates_hero_stats_intelligence.0b346639a5": [], "test.harmony.not_null_dfk_hero_updates_hero_stats_wisdom.b22899144a": [], "test.harmony.not_null_dfk_hero_updates_hero_stats_luck.fa486fc10a": [], "test.harmony.not_null_dfk_hero_updates_hero_stats_agility.3c50b6f002": [], "test.harmony.not_null_dfk_hero_updates_hero_stats_vitality.39bee4d71b": [], "test.harmony.not_null_dfk_hero_updates_hero_stats_endurance.c6d90b953a": [], "test.harmony.not_null_dfk_hero_updates_hero_stats_dexterity.968ab5dc9f": [], "test.harmony.not_null_dfk_hero_updates_hero_stats_hp.650ee449b0": [], "test.harmony.not_null_dfk_hero_updates_hero_stats_mp.e377a9e808": [], "test.harmony.not_null_dfk_hero_updates_hero_stats_stamina.0e28f15d14": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_strength.e636522ec5": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_intelligence.c0c7b4e8ef": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_wisdom.e638b91e7e": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_luck.67fdc5d9fc": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_agility.95eb68d12d": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_vitality.833a942c85": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_endurance.3c3da2d64e": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_dexterity.37ea684305": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hpsm.333f55e23d": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hprg.bb2f7e28d0": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_hplg.b9753af52e": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mpsm.ff48bffa5b": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mprg.84c957d14c": [], "test.harmony.not_null_dfk_hero_updates_hero_primary_stat_growth_mplg.9311fd2515": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_strength.f698be1f0d": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_intelligence.4a0bd8fedc": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_wisdom.c77b6e7f75": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_luck.85df403797": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_agility.61f9e2c0ad": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_vitality.e12340f529": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_endurance.3936bfabaf": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_dexterity.5a4a4d002b": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hpsm.3519b0a108": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hprg.bd4afb8a71": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_hplg.89204a4088": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mpsm.9b791a152b": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mprg.99bb003e4f": [], "test.harmony.not_null_dfk_hero_updates_hero_secondary_stat_growth_mplg.6dcf7dd34a": [], "test.harmony.not_null_dfk_hero_updates_hero_professions_mining.6ebcec049d": [], "test.harmony.not_null_dfk_hero_updates_hero_professions_gardening.16ddc4e962": [], "test.harmony.not_null_dfk_hero_updates_hero_professions_foraging.13cbb9fba2": [], "test.harmony.not_null_dfk_hero_updates_hero_professions_fishing.1e12aef556": [], "source.harmony.chainwalkers.harmony_blocks": ["model.harmony.stg_blocks"], "source.harmony.chainwalkers.harmony_txs": ["model.harmony.stg_txs"], "source.harmony.ingest.src_old_ant_ingest": ["model.harmony.stg_ant_ingest"], "source.harmony.ingest.src_old_tokenprice_coingecko_mr": [], "source.harmony.ingest.ant_ingest": ["model.harmony.stg_ant_ingest"], "source.harmony.ingest.src_token_usd_prices": []}}